{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/wwwid",
        "title": "WWWID - Medium",
        "link": "https://medium.com/wwwid?source=rss----c432d91819e0---4",
        "author": "",
        "description": "Tren dan update pengembangan web - Medium",
        "image": "https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png"
    },
    "items": [
        {
            "title": "Cara Mengecek dan Mengatur Versi Browser untuk Pengguna",
            "pubDate": "2019-03-06 00:13:10",
            "link": "https://medium.com/wwwid/cara-mengecek-dan-mengatur-versi-browser-untuk-pengguna-1b3bb6e301be?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/1b3bb6e301be",
            "author": "Satya Kresna Adi Pratama",
            "thumbnail": "https://cdn-images-1.medium.com/max/810/1*v0nGBjqP8exXd996b4GnRw.jpeg",
            "description": "\n<p>User Agent berisikan informasi tentang nama browser, versi browser, sistem operasi, tipe perangkat dan banyak informasi yang berguna untuk dipakai. Dalam pekerjaan, saya menggunakan informasi berupa nama browser dan versinya untuk mengendalikan browser dan versi yang digunakan oleh pengguna ketika mengakses ke sistem saya.</p>\n<blockquote><em>Daripada membuat sebuah library untuk menampung user-agent dari awal lebih baik saya menggunakan yang sudah ada dan banyak penggunanya. Terima kasih Github. :)</em></blockquote>\n<p>Saya mengandalkan ua-parser-js untuk mengecek dan mengendalikan browser dan versi dari browser tersebut. Berikut kepingan kode terlampir di bawah:</p>\n<a href=\"https://medium.com/media/5e9f708d26870adf345551ca226166bb/href\">https://medium.com/media/5e9f708d26870adf345551ca226166bb/href</a><p>Pertama, saya menambahkan ua-parser-js CDN ke dalam tag script. Kedua, saya melakukan instansiasi UAParser class. Ketiga, saya melakukan pengecekan untuk mengendalikan versi dari setiap browser.</p>\n<p>Salah satu alasan mengapa saya melakukan hal ini adalah karena saya menggunakan ES6 (modern JavaScript) dalam mengembangkan sistem yang saya buat. Fitur-fitur ES6 yang saya gunakan antara lain const, let, fetch (XHR replacement), template string literals, includes().</p>\n<p>Kalangan pengguna sistem saya beragam umurnya dan tidak semua dari mereka melek dengan teknologi dan pernah beberapa kali mereka membuka website saya di ponsel pintar mereka namun data tidak tampil karena saya menggunakan ES6 dan yang bersangkutan tidak melakukan pembaharuan browser.</p>\n<blockquote><em>Daripada saya melakukan transpile ke ES5 atau menggunakan bantuan polyfill lebih baik saya mengecek browser mereka dan memaksa mereka untuk melakukan pembaharuan browser. ✌️</em></blockquote>\n<p>Menurut saya, semenjak kehadiran ES6 dan dorongan dari tim TC39, ketergantungan dengan JQuery sebagai pihak ketiga dapat kita kurangi. Sekarang saya lebih sering menggunakan getElementById, getElementsByClassName, querySelector, querySelectorAll, addEventListener dan perintah lainnya untuk memilih elemen yang saya butuhkan yang mana sudah disediakan oleh browser secara alami.</p>\n<blockquote><em>Jika anda tertarik untuk berpindah dari JQuery ke JavaScript, silahkan Anda baca “You Might Don’t Need JQuery”. Hal ini akan membuat web Anda (sedikit) lebih cepat tanpa bantuan pihak ketiga.</em></blockquote>\n<p>Dari kode di atas pula saya menetapkan versi standar browser yang harus user gunakan ketika berinteraksi di sistem yang saya buat dan jika user tidak menggunakan lima browser di atas maka saya akan meminta mereka untuk menginstall salah satu dari lima browser tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*v0nGBjqP8exXd996b4GnRw.jpeg\"><figcaption>Menentukan versi standar setiap browser.</figcaption></figure><p>Mengapa cuma lima? Karena menurut pengamatan saya pribadi rata-rata user browsing menggunakan browser berdasarkan sistem operasi yang mereka pakai:</p>\n<ul>\n<li>Windows: Chrome, Firefox, Opera, Edge</li>\n<li>MacOS: Chrome, Firefox, Opera, Safari</li>\n<li>Linux: Chrome, Firefox, Opera</li>\n<li>Android: Chrome</li>\n<li>iOS: Safari</li>\n</ul>\n<p>Terima kasih telah membaca tulisan ini dan semoga bermanfaat.</p>\n<h4>Referensi</h4>\n<ul>\n<li><a href=\"https://github.com/faisalman/ua-parser-js\">UA Parser JS</a></li>\n<li><a href=\"https://github.com/nefe/You-Dont-Need-jQuery\">You Might Don’t Need JQuery</a></li>\n<li><a href=\"https://caniuse.com/#search=es6\">Can I Use ES6?</a></li>\n<li><a href=\"https://github.com/tc39\">TC39</a></li>\n</ul>\n<p><em>Originally published at </em><a href=\"https://www.satyakresna.io/posts/cara-mengecek-dan-mengatur-versi-browser-untuk-pengguna/\"><em>www.satyakresna.io</em></a><em> on March 6, 2019.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1b3bb6e301be\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/cara-mengecek-dan-mengatur-versi-browser-untuk-pengguna-1b3bb6e301be\">Cara Mengecek dan Mengatur Versi Browser untuk Pengguna</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>User Agent berisikan informasi tentang nama browser, versi browser, sistem operasi, tipe perangkat dan banyak informasi yang berguna untuk dipakai. Dalam pekerjaan, saya menggunakan informasi berupa nama browser dan versinya untuk mengendalikan browser dan versi yang digunakan oleh pengguna ketika mengakses ke sistem saya.</p>\n<blockquote><em>Daripada membuat sebuah library untuk menampung user-agent dari awal lebih baik saya menggunakan yang sudah ada dan banyak penggunanya. Terima kasih Github. :)</em></blockquote>\n<p>Saya mengandalkan ua-parser-js untuk mengecek dan mengendalikan browser dan versi dari browser tersebut. Berikut kepingan kode terlampir di bawah:</p>\n<a href=\"https://medium.com/media/5e9f708d26870adf345551ca226166bb/href\">https://medium.com/media/5e9f708d26870adf345551ca226166bb/href</a><p>Pertama, saya menambahkan ua-parser-js CDN ke dalam tag script. Kedua, saya melakukan instansiasi UAParser class. Ketiga, saya melakukan pengecekan untuk mengendalikan versi dari setiap browser.</p>\n<p>Salah satu alasan mengapa saya melakukan hal ini adalah karena saya menggunakan ES6 (modern JavaScript) dalam mengembangkan sistem yang saya buat. Fitur-fitur ES6 yang saya gunakan antara lain const, let, fetch (XHR replacement), template string literals, includes().</p>\n<p>Kalangan pengguna sistem saya beragam umurnya dan tidak semua dari mereka melek dengan teknologi dan pernah beberapa kali mereka membuka website saya di ponsel pintar mereka namun data tidak tampil karena saya menggunakan ES6 dan yang bersangkutan tidak melakukan pembaharuan browser.</p>\n<blockquote><em>Daripada saya melakukan transpile ke ES5 atau menggunakan bantuan polyfill lebih baik saya mengecek browser mereka dan memaksa mereka untuk melakukan pembaharuan browser. ✌️</em></blockquote>\n<p>Menurut saya, semenjak kehadiran ES6 dan dorongan dari tim TC39, ketergantungan dengan JQuery sebagai pihak ketiga dapat kita kurangi. Sekarang saya lebih sering menggunakan getElementById, getElementsByClassName, querySelector, querySelectorAll, addEventListener dan perintah lainnya untuk memilih elemen yang saya butuhkan yang mana sudah disediakan oleh browser secara alami.</p>\n<blockquote><em>Jika anda tertarik untuk berpindah dari JQuery ke JavaScript, silahkan Anda baca “You Might Don’t Need JQuery”. Hal ini akan membuat web Anda (sedikit) lebih cepat tanpa bantuan pihak ketiga.</em></blockquote>\n<p>Dari kode di atas pula saya menetapkan versi standar browser yang harus user gunakan ketika berinteraksi di sistem yang saya buat dan jika user tidak menggunakan lima browser di atas maka saya akan meminta mereka untuk menginstall salah satu dari lima browser tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*v0nGBjqP8exXd996b4GnRw.jpeg\"><figcaption>Menentukan versi standar setiap browser.</figcaption></figure><p>Mengapa cuma lima? Karena menurut pengamatan saya pribadi rata-rata user browsing menggunakan browser berdasarkan sistem operasi yang mereka pakai:</p>\n<ul>\n<li>Windows: Chrome, Firefox, Opera, Edge</li>\n<li>MacOS: Chrome, Firefox, Opera, Safari</li>\n<li>Linux: Chrome, Firefox, Opera</li>\n<li>Android: Chrome</li>\n<li>iOS: Safari</li>\n</ul>\n<p>Terima kasih telah membaca tulisan ini dan semoga bermanfaat.</p>\n<h4>Referensi</h4>\n<ul>\n<li><a href=\"https://github.com/faisalman/ua-parser-js\">UA Parser JS</a></li>\n<li><a href=\"https://github.com/nefe/You-Dont-Need-jQuery\">You Might Don’t Need JQuery</a></li>\n<li><a href=\"https://caniuse.com/#search=es6\">Can I Use ES6?</a></li>\n<li><a href=\"https://github.com/tc39\">TC39</a></li>\n</ul>\n<p><em>Originally published at </em><a href=\"https://www.satyakresna.io/posts/cara-mengecek-dan-mengatur-versi-browser-untuk-pengguna/\"><em>www.satyakresna.io</em></a><em> on March 6, 2019.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1b3bb6e301be\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/cara-mengecek-dan-mengatur-versi-browser-untuk-pengguna-1b3bb6e301be\">Cara Mengecek dan Mengatur Versi Browser untuk Pengguna</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "browsers",
                "user-agent",
                "browser-standard"
            ]
        },
        {
            "title": "LighthouseBOT Untuk Auto Audit Web di Github Repository",
            "pubDate": "2019-02-25 22:48:13",
            "link": "https://medium.com/wwwid/lighthousebot-untuk-auto-audit-web-b6058984a6c6?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/b6058984a6c6",
            "author": "R AdySurya A",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*VbeayEhFNfTloVFJ4vo78g.png",
            "description": "\n<h3>LighthouseBOT Untuk Auto Audit Web di Github Repositori</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VbeayEhFNfTloVFJ4vo78g.png\"><figcaption>capture from <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en\">https://chrome.google.com/webstore/detail/lighthouse</a></figcaption></figure><p><strong>LighthouseBOT — </strong>merupakan sebuah akun “bot” yang bekerja untuk “Audit Web” dengan menggunakan Lighthouse dan melaporkan hasil audit tersebut pada repositori kita di <strong>Github</strong>. Dengan menggunakan LighthouseBOT maka kita tidak perlu lagi untuk melakukan audit secara manual dengan menggunakan <a href=\"https://web.dev/\">https://web.dev</a>, Lighthouse pada Chrome DevTools, Lighthouse Extension pada browser, Lighthouse-cli, &amp; cara-cara lain yang menggunakan Lighthouse.</p>\n<p>Hal — hal yang bisa dilakukan LighthouseBOT hanyalah menampilkan laporan mengenai Performance, Accessibility, SEO, &amp; Best Practices.</p>\n<p><strong>Yang dibutuhkan</strong></p>\n<ul>\n<li><a href=\"https://github.com/\">Github</a></li>\n<li><a href=\"https://travis-ci.com/\">Travis</a></li>\n</ul>\n<h3>Cara integrasi</h3>\n<ul>\n<li>Menambahkan <a href=\"https://github.com/lighthousebot\"><strong>LighthouseBOT</strong></a> sebagai <strong>kolaborator </strong>di repositori Github.</li>\n<li>Mengajukan permintaan API_KEYuntuk<strong> Lighthouse CI.</strong>\n</li>\n<li>Menambahkan <strong><em>Script</em></strong> dan Konfigurasi <strong>Travis</strong> untuk<strong> Lighthouse CI.</strong>\n</li>\n<li>Tes dengan<strong><em> Pull-Request.</em></strong>\n</li>\n</ul>\n<h4>Menambahkan LighthouseBOT sebagai kolaborator di Github Repository</h4>\n<p>Menambahkan LighthouseBOT sebagai kolaborator pada repositori project kamu di <strong>Github.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1011/1*M_r0Ex0sWrCDy1HYmTqrGQ.png\"><figcaption>Silahkan follow <a href=\"https://github.com/lighthousebot\">https://github.com/lighthousebot</a> 😇</figcaption></figure><p>Setelah ditambah, status LighthouseBOT default-nya pending atau menunggu sampai permintaan teman-teman diterima. Sambil menunggu, silahkan isi formulir di bawah ini untuk mendapatkan LIGHTHOUSE_API_KEY yang digunakan (saya mendapatkan LIGHTHOUSE_API_KEY dalam waktu kurang lebih 1x24 jam). LIGHTHOUSE_API_KEY nanti di tambahkan pada environment variable di Travis-ci.com.</p>\n<h4>Mengajukan Permintaan API_KEY untuk Lighthouse CI</h4>\n<a href=\"https://medium.com/media/f27ea1265bd5404d8fd802707d6dfdaa/href\">https://medium.com/media/f27ea1265bd5404d8fd802707d6dfdaa/href</a><h4>Menambahkan Script dan Konfigurasi Travis untuk Lighthouse CI</h4>\n<p>Jika LIGHTHOUSE_API_KEY telah didapatkan melalui email yang kamu gunakan pada saat proses pengajuan maka yang kamu perlukan adalah menambahkan LIGHTHOUSE_API_KEY pada Travis-ci yang sudah integrasi dengan repositori di Github.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fvrBfkQ3qDb-IrLuI8mWgg.png\"></figure><p>Jika telah mendapatkan Environment Variable, silahkan tambahkan package <strong>LighthouseBot</strong> pada project kamu.</p>\n<pre>yarn add <a href=\"https://github.com/GoogleChromeLabs/lighthousebot\">https://github.com/GoogleChromeLabs/lighthousebot</a> --dev</pre>\n<p>Perintahnya seperti ini,</p>\n<pre>// dasar | basic usage<br>lighthousebot &lt;alamat_web&gt;</pre>\n<pre>// Perfomance budgeting<br>lighthousebot --perf=95 --seo=100 --pwa=100 --a11y=100 --bp=100 &lt;alamat_web&gt;</pre>\n<ul>\n<li>perf — <strong>Performance</strong>\n</li>\n<li>seo — <strong>Search Engine Optimization</strong>\n</li>\n<li>pwa — <strong>Progressive Web Application</strong>\n</li>\n<li>a11y — <strong>Accessibility</strong>\n</li>\n<li>bp — <strong>Best Practices</strong>\n</li>\n</ul>\n<p>Jangan lupa tambahkan perintah lighthousebot pada .travis.yml dibagian after_success</p>\n<pre>after_success:  <br>  - lighthousebot --perf=95 --seo=100 --pwa=100 --a11y=100 --bp=100 &lt;alamat_web&gt;</pre>\n<p>Jika menggunakan options seperti contoh perfomance budgeting, artinya kita telah mengatur minimum pencapaian setiap web kita di audit. Jika kurang dari nilai yang sudah di tentukan maka di anggap error atau gagal dalam tes audit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/820/1*O1JXrMQchCkwMRJlxgt5ZA.png\"></figure><p>Terakhir, kamu bisa tes dengan mengirimkan commit atau pull-request ke repository kamu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CFxH8GUvcCsG7bPsxbuqzA.png\"><figcaption>Log Travis dan data tersebut akan di gunakan oleh LighthouseBOT sebagai komentar di Repository Github kamu.</figcaption></figure><h3>Kesimpulan</h3>\n<p>Jika kamu memiliki project open source atau private project dan tetap peduli pada performa website, kamu bisa menggunakan LigthouseBOT, agar kamu dapat dibantu dan mengurangi hal — hal manual. Selain itu, kamu akan lebih peduli terhadap code yang kamu tulis dikarenakan ada pencapaian yang sudah di tetapkan.</p>\n<p>Contoh project yang menerapkan LighthouseBOT.</p>\n<p><a href=\"https://github.com/ri7nz/Medicine\">ri7nz/Medicine</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b6058984a6c6\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/lighthousebot-untuk-auto-audit-web-b6058984a6c6\">LighthouseBOT Untuk Auto Audit Web di Github Repository</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h3>LighthouseBOT Untuk Auto Audit Web di Github Repositori</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VbeayEhFNfTloVFJ4vo78g.png\"><figcaption>capture from <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en\">https://chrome.google.com/webstore/detail/lighthouse</a></figcaption></figure><p><strong>LighthouseBOT — </strong>merupakan sebuah akun “bot” yang bekerja untuk “Audit Web” dengan menggunakan Lighthouse dan melaporkan hasil audit tersebut pada repositori kita di <strong>Github</strong>. Dengan menggunakan LighthouseBOT maka kita tidak perlu lagi untuk melakukan audit secara manual dengan menggunakan <a href=\"https://web.dev/\">https://web.dev</a>, Lighthouse pada Chrome DevTools, Lighthouse Extension pada browser, Lighthouse-cli, &amp; cara-cara lain yang menggunakan Lighthouse.</p>\n<p>Hal — hal yang bisa dilakukan LighthouseBOT hanyalah menampilkan laporan mengenai Performance, Accessibility, SEO, &amp; Best Practices.</p>\n<p><strong>Yang dibutuhkan</strong></p>\n<ul>\n<li><a href=\"https://github.com/\">Github</a></li>\n<li><a href=\"https://travis-ci.com/\">Travis</a></li>\n</ul>\n<h3>Cara integrasi</h3>\n<ul>\n<li>Menambahkan <a href=\"https://github.com/lighthousebot\"><strong>LighthouseBOT</strong></a> sebagai <strong>kolaborator </strong>di repositori Github.</li>\n<li>Mengajukan permintaan API_KEYuntuk<strong> Lighthouse CI.</strong>\n</li>\n<li>Menambahkan <strong><em>Script</em></strong> dan Konfigurasi <strong>Travis</strong> untuk<strong> Lighthouse CI.</strong>\n</li>\n<li>Tes dengan<strong><em> Pull-Request.</em></strong>\n</li>\n</ul>\n<h4>Menambahkan LighthouseBOT sebagai kolaborator di Github Repository</h4>\n<p>Menambahkan LighthouseBOT sebagai kolaborator pada repositori project kamu di <strong>Github.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1011/1*M_r0Ex0sWrCDy1HYmTqrGQ.png\"><figcaption>Silahkan follow <a href=\"https://github.com/lighthousebot\">https://github.com/lighthousebot</a> 😇</figcaption></figure><p>Setelah ditambah, status LighthouseBOT default-nya pending atau menunggu sampai permintaan teman-teman diterima. Sambil menunggu, silahkan isi formulir di bawah ini untuk mendapatkan LIGHTHOUSE_API_KEY yang digunakan (saya mendapatkan LIGHTHOUSE_API_KEY dalam waktu kurang lebih 1x24 jam). LIGHTHOUSE_API_KEY nanti di tambahkan pada environment variable di Travis-ci.com.</p>\n<h4>Mengajukan Permintaan API_KEY untuk Lighthouse CI</h4>\n<a href=\"https://medium.com/media/f27ea1265bd5404d8fd802707d6dfdaa/href\">https://medium.com/media/f27ea1265bd5404d8fd802707d6dfdaa/href</a><h4>Menambahkan Script dan Konfigurasi Travis untuk Lighthouse CI</h4>\n<p>Jika LIGHTHOUSE_API_KEY telah didapatkan melalui email yang kamu gunakan pada saat proses pengajuan maka yang kamu perlukan adalah menambahkan LIGHTHOUSE_API_KEY pada Travis-ci yang sudah integrasi dengan repositori di Github.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fvrBfkQ3qDb-IrLuI8mWgg.png\"></figure><p>Jika telah mendapatkan Environment Variable, silahkan tambahkan package <strong>LighthouseBot</strong> pada project kamu.</p>\n<pre>yarn add <a href=\"https://github.com/GoogleChromeLabs/lighthousebot\">https://github.com/GoogleChromeLabs/lighthousebot</a> --dev</pre>\n<p>Perintahnya seperti ini,</p>\n<pre>// dasar | basic usage<br>lighthousebot &lt;alamat_web&gt;</pre>\n<pre>// Perfomance budgeting<br>lighthousebot --perf=95 --seo=100 --pwa=100 --a11y=100 --bp=100 &lt;alamat_web&gt;</pre>\n<ul>\n<li>perf — <strong>Performance</strong>\n</li>\n<li>seo — <strong>Search Engine Optimization</strong>\n</li>\n<li>pwa — <strong>Progressive Web Application</strong>\n</li>\n<li>a11y — <strong>Accessibility</strong>\n</li>\n<li>bp — <strong>Best Practices</strong>\n</li>\n</ul>\n<p>Jangan lupa tambahkan perintah lighthousebot pada .travis.yml dibagian after_success</p>\n<pre>after_success:  <br>  - lighthousebot --perf=95 --seo=100 --pwa=100 --a11y=100 --bp=100 &lt;alamat_web&gt;</pre>\n<p>Jika menggunakan options seperti contoh perfomance budgeting, artinya kita telah mengatur minimum pencapaian setiap web kita di audit. Jika kurang dari nilai yang sudah di tentukan maka di anggap error atau gagal dalam tes audit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/820/1*O1JXrMQchCkwMRJlxgt5ZA.png\"></figure><p>Terakhir, kamu bisa tes dengan mengirimkan commit atau pull-request ke repository kamu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CFxH8GUvcCsG7bPsxbuqzA.png\"><figcaption>Log Travis dan data tersebut akan di gunakan oleh LighthouseBOT sebagai komentar di Repository Github kamu.</figcaption></figure><h3>Kesimpulan</h3>\n<p>Jika kamu memiliki project open source atau private project dan tetap peduli pada performa website, kamu bisa menggunakan LigthouseBOT, agar kamu dapat dibantu dan mengurangi hal — hal manual. Selain itu, kamu akan lebih peduli terhadap code yang kamu tulis dikarenakan ada pencapaian yang sudah di tetapkan.</p>\n<p>Contoh project yang menerapkan LighthouseBOT.</p>\n<p><a href=\"https://github.com/ri7nz/Medicine\">ri7nz/Medicine</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b6058984a6c6\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/lighthousebot-untuk-auto-audit-web-b6058984a6c6\">LighthouseBOT Untuk Auto Audit Web di Github Repository</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "lighthouse",
                "javascript",
                "web-performance",
                "lighthousebot",
                "web-audit"
            ]
        },
        {
            "title": "Visualisasi Arsitektur Aplikasi Dengan Madge",
            "pubDate": "2019-02-01 01:58:04",
            "link": "https://medium.com/wwwid/visualisasi-arsitektur-applikasi-dengan-madge-ea5da2f5b9ce?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/ea5da2f5b9ce",
            "author": "R AdySurya A",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*5_YbamQTBLDq-IWUREGcmw.png",
            "description": "\n<p>Madge merupakan Aplikasi pengembang yang menghasilkan Grafik Visual mengenai struktur sebuah aplikasi, modul-modul yang digunakan (dependencies Modul), &amp; Lingkaran Dependensi atau “Keterkaitan” satu atau lebih penggunaan sebuah modul (Circular Dependency).</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Circular_dependency\">Circular dependency - Wikipedia</a></p>\n<p>Sebelumnya, saya sedang mempelajari <strong>Lighthouse</strong>, tepatnya Arsitektur dari <strong>Lighthouse</strong> kemudian mendapatkan sebuah informasi menarik “yah , tentang Madge ini” dari<strong> </strong><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\"><strong>tautan ini</strong></a>.</p>\n<p><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\">GoogleChrome/lighthouse</a></p>\n<p>Pada tautan tersebut saya menemukan gambar atau visual grafik dari arsitektur lighthouse.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5_YbamQTBLDq-IWUREGcmw.png\"><figcaption>Lighthouse Architecture: Read More -<a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\">https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md</a></figcaption></figure><p>Kemudian, menemukan perintah (command) yang digunakan lighthouse untuk menghasilkan grafik visual diatas yakni</p>\n<pre>$ madge lighthouse-core/index.js --image arch.png --layout dot --backgroundColor \"#fafafa\" --nodeColor \"#4d4afc\" --noDependencyColor \"#48ad00\"</pre>\n<pre># madge &lt;directory&gt;or&lt;file&gt; [options]</pre>\n<ul>\n<li>\n<strong>madge</strong> : bin file dari madge jika sudah di install</li>\n<li>\n<strong>lighthouse-core/index.js</strong> : file index.js dari lighthouse didalam folder lighthouse-core</li>\n<li>\n<strong>image</strong> : opsi untuk nama file gambar “output” setelah madge dijalankan</li>\n<li>\n<strong>layout</strong> : opsi untuk mengatur layout dari “output”</li>\n<li>untuk opsi lainnya bisa dilihat <a href=\"https://www.npmjs.com/package/madge\"><strong>disini.</strong></a>\n</li>\n</ul>\n<p>setelah menjalankan perintah seperti gambar diatas, silahkan buka “directory” atau “folder” tepat dimana kamu menjalankan perintah tersebut.</p>\n<blockquote>Catatan: Madge membutuhkan sebuah dependensi juga, yakni <strong>graphvis (required) </strong>dan menggunakan <a href=\"https://github.com/dependents/node-dependency-tree\"><strong>node-dependency-tree</strong></a><strong> </strong>(tak perlu install karena sudah jadi bagian utama dari madge)</blockquote>\n<p><a href=\"https://www.graphviz.org/\">Graphviz - Graph Visualization Software</a></p>\n<p>Jadi, harus menginstall <strong>graphvis</strong> agar <strong>madge</strong> dapat berjalan.</p>\n<p>contoh instalasi dan penggunaan:</p>\n<pre>// Install graphvis using brew for mac user<br>$ <strong>brew install -v graphviz</strong></pre>\n<pre>// Install graphvis using apt-port for ubuntu<br>$ <strong>sudo apt-get install graphviz</strong></pre>\n<pre>// Install madge using yarn<br>$ <strong>yarn global add madge</strong></pre>\n<pre>// goto project directory<br>$ <strong>cd your_project</strong></pre>\n<pre>// generate app architecture using madge<br>$<strong> madge index.js --image your_project_arc.png </strong></pre>\n<p>Contoh hasil generate pada project Simple Todo yang saya buat menggunakan ReactJs (create-react-app)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zqgp8USfSX5imW81pPCe3w.png\"><figcaption>MedicineTodo — <a href=\"https://github.com/ri7nz/medicine\">https://github.com/ri7nz/medicine</a></figcaption></figure><h3>Kesimpulan</h3>\n<p>Dengan menggunakan <strong>Madge</strong> atau tepatnya dengan mendapatkan informasi mengenai rancangan, arsitektur, dan dependesi yang digunakan pada sebuah project atau aplikasi kita dapat jadi lebih mudah untuk meningkatkan kualitas atau performa, Contohnya pada pengembangan <strong>web jaman now </strong>yang memiliki bundle file yang harus dijaga, dengan mengetahui apa yg tidak digunakan maka kita dapat menghapus atau tidak menggunakannya, serta untuk kebutuhan analisa.</p>\n<p>Sekian, dan terima kasih semoga bermanfaat. 😀 (Mohon maaf jika ada yang salah).</p>\n<p><a href=\"https://medium.com/u/4bafb556834e\">R AdySurya A</a></p>\n<p>Follow Me On</p>\n<ul>\n<li>Github : <a href=\"https://github.com/ri7nz\">https://github.com/ri7nz</a>\n</li>\n<li>Twitter : <a href=\"https://twitter.com/ri7nz\">https://twitter.com/ri7nz</a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea5da2f5b9ce\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/visualisasi-arsitektur-applikasi-dengan-madge-ea5da2f5b9ce\">Visualisasi Arsitektur Aplikasi Dengan Madge</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>Madge merupakan Aplikasi pengembang yang menghasilkan Grafik Visual mengenai struktur sebuah aplikasi, modul-modul yang digunakan (dependencies Modul), &amp; Lingkaran Dependensi atau “Keterkaitan” satu atau lebih penggunaan sebuah modul (Circular Dependency).</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Circular_dependency\">Circular dependency - Wikipedia</a></p>\n<p>Sebelumnya, saya sedang mempelajari <strong>Lighthouse</strong>, tepatnya Arsitektur dari <strong>Lighthouse</strong> kemudian mendapatkan sebuah informasi menarik “yah , tentang Madge ini” dari<strong> </strong><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\"><strong>tautan ini</strong></a>.</p>\n<p><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\">GoogleChrome/lighthouse</a></p>\n<p>Pada tautan tersebut saya menemukan gambar atau visual grafik dari arsitektur lighthouse.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5_YbamQTBLDq-IWUREGcmw.png\"><figcaption>Lighthouse Architecture: Read More -<a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\">https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md</a></figcaption></figure><p>Kemudian, menemukan perintah (command) yang digunakan lighthouse untuk menghasilkan grafik visual diatas yakni</p>\n<pre>$ madge lighthouse-core/index.js --image arch.png --layout dot --backgroundColor \"#fafafa\" --nodeColor \"#4d4afc\" --noDependencyColor \"#48ad00\"</pre>\n<pre># madge &lt;directory&gt;or&lt;file&gt; [options]</pre>\n<ul>\n<li>\n<strong>madge</strong> : bin file dari madge jika sudah di install</li>\n<li>\n<strong>lighthouse-core/index.js</strong> : file index.js dari lighthouse didalam folder lighthouse-core</li>\n<li>\n<strong>image</strong> : opsi untuk nama file gambar “output” setelah madge dijalankan</li>\n<li>\n<strong>layout</strong> : opsi untuk mengatur layout dari “output”</li>\n<li>untuk opsi lainnya bisa dilihat <a href=\"https://www.npmjs.com/package/madge\"><strong>disini.</strong></a>\n</li>\n</ul>\n<p>setelah menjalankan perintah seperti gambar diatas, silahkan buka “directory” atau “folder” tepat dimana kamu menjalankan perintah tersebut.</p>\n<blockquote>Catatan: Madge membutuhkan sebuah dependensi juga, yakni <strong>graphvis (required) </strong>dan menggunakan <a href=\"https://github.com/dependents/node-dependency-tree\"><strong>node-dependency-tree</strong></a><strong> </strong>(tak perlu install karena sudah jadi bagian utama dari madge)</blockquote>\n<p><a href=\"https://www.graphviz.org/\">Graphviz - Graph Visualization Software</a></p>\n<p>Jadi, harus menginstall <strong>graphvis</strong> agar <strong>madge</strong> dapat berjalan.</p>\n<p>contoh instalasi dan penggunaan:</p>\n<pre>// Install graphvis using brew for mac user<br>$ <strong>brew install -v graphviz</strong></pre>\n<pre>// Install graphvis using apt-port for ubuntu<br>$ <strong>sudo apt-get install graphviz</strong></pre>\n<pre>// Install madge using yarn<br>$ <strong>yarn global add madge</strong></pre>\n<pre>// goto project directory<br>$ <strong>cd your_project</strong></pre>\n<pre>// generate app architecture using madge<br>$<strong> madge index.js --image your_project_arc.png </strong></pre>\n<p>Contoh hasil generate pada project Simple Todo yang saya buat menggunakan ReactJs (create-react-app)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zqgp8USfSX5imW81pPCe3w.png\"><figcaption>MedicineTodo — <a href=\"https://github.com/ri7nz/medicine\">https://github.com/ri7nz/medicine</a></figcaption></figure><h3>Kesimpulan</h3>\n<p>Dengan menggunakan <strong>Madge</strong> atau tepatnya dengan mendapatkan informasi mengenai rancangan, arsitektur, dan dependesi yang digunakan pada sebuah project atau aplikasi kita dapat jadi lebih mudah untuk meningkatkan kualitas atau performa, Contohnya pada pengembangan <strong>web jaman now </strong>yang memiliki bundle file yang harus dijaga, dengan mengetahui apa yg tidak digunakan maka kita dapat menghapus atau tidak menggunakannya, serta untuk kebutuhan analisa.</p>\n<p>Sekian, dan terima kasih semoga bermanfaat. 😀 (Mohon maaf jika ada yang salah).</p>\n<p><a href=\"https://medium.com/u/4bafb556834e\">R AdySurya A</a></p>\n<p>Follow Me On</p>\n<ul>\n<li>Github : <a href=\"https://github.com/ri7nz\">https://github.com/ri7nz</a>\n</li>\n<li>Twitter : <a href=\"https://twitter.com/ri7nz\">https://twitter.com/ri7nz</a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea5da2f5b9ce\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/visualisasi-arsitektur-applikasi-dengan-madge-ea5da2f5b9ce\">Visualisasi Arsitektur Aplikasi Dengan Madge</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "architecture",
                "software-development",
                "javascript",
                "tools",
                "dependencies"
            ]
        },
        {
            "title": "Pengalaman Pertama Menghadiri Chrome Dev Summit",
            "pubDate": "2018-12-22 11:56:00",
            "link": "https://medium.com/wwwid/pengalaman-pertama-menghadiri-chrome-dev-summit-f2db2d7a17ae?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/f2db2d7a17ae",
            "author": "Riza Fahmi",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg\"></figure><p>Berikut cerita pengalaman pertama saya menghadiri <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit 2018</a> atas undangan Google untuk para <a href=\"https://developers.google.com/experts/people/riza-fahmi.html\">Google Developers Expert</a> yang fokus di <a href=\"https://developers.google.com/experts/all/technology/web-technologies\">Web Technologies</a>. Setelah sehari sebelumnya, di tanggal 10–11 November 2018 juga ada perhelatan akbar Developers Experts Summit dimana GDE atau <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> seluruh dunia berkumpul dan ber-<em>summit</em>-ria.</p>\n<p>Sebelum mengulas acara yang diselenggarakan di <a href=\"https://www.ybca.org/\">Yerba Buena Center for the Arts, San Francisco</a> pada tanggal 12–13 November 2018 saya ingin menceritakan bagaimana saya bisa menjadi <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> terlebih dahulu agar konteksnya sesuai.</p>\n<h3>Menjadi Google Developers Experts</h3>\n<p>Suatu sore, saya <em>ngobrol</em> dengan Mas <a href=\"https://twitter.com/tyohan\">Yohan Totting</a> dan dia ingin saya menjadi GDE, awalnya saya terkejut dan penasaran. Saya yakin masih banyak diluar sana orang yang lebih <em>expert</em> dibanding saya. Karena penasaran, saya kemudian menanyakan apa itu GDE dan apa tugasnya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_qVaoo5NzVm8UgujxqQfUg.png\"><figcaption>Yohan Totting — Developer Advocate, Web Developer Relations at Google</figcaption></figure><p>Saya masih ingat banget jawaban Mas Yohan saat itu: “Lo lakukan apa yang selama ini sudah lo kerjakan. Tulis artikel, <em>screencast</em>, <em>podcast</em>, dan <em>talks</em>.” Bedanya sekarang semua itu di <em>support</em> Google. Jadi kalau saya diundang menjadi pembicara diluar Jakarta dan di sekitar Asia Tenggara, Google akan memberikan dukungan dalam bentuk tiket pesawat dan penginapan.</p>\n<p>Dalam hati, seru juga ya karena memang hal tersebut yang saya lakukan beberapa tahun terakhir dalam skala kecil. Singkat cerita, saya memberanikan diri untuk apply dengan<em> mindset nothing to lose</em>. Banyak tahapan yang harus dilewati, mulai dari <em>screening</em> awal, interview dengan GDE dan terakhir, kalau lulus, akan diinterview oleh <em>Googler</em>! Lumayan kan, menambah pengalaman.</p>\n<p>Setelah melewati proses <em>screening</em>, saya akhirnya dapat kesempatan diinterview oleh GDE. Saya anggap ini sebagai kesempatan saya meyakinkan diri apakah GDE pantas saya perjuangkan, karena praktis akan banyak waktu dan juga biaya yang akan keluar. Saya berkesempatan diinterview oleh <a href=\"https://developers.google.com/experts/people/warat-wongmaneekit\">Warat Wongmaneekit</a>, GDE asal Thailand.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KGqjtipczDlZErawutzSSQ.png\"><figcaption>Warat Wongmaneekit (kanan).</figcaption></figure><p>Di interview ini saya banyak ‘menjual’ konsep <a href=\"https://randomscreencast.com/\">randomscreencast</a>, <em>video screencast</em> yang saya produksi. Saya menceritakan konsep <em>randomness</em>, topik yang <em>random</em>, dan di-<em>publish</em> di tanggal dan jam yang <em>random</em> pula. Kemudian saya juga banyak bercerita tentang beberapa komunitas yang saya inisiasi dan kelola, seperti <a href=\"https://www.meetup.com/Meteor-Jakarta/\">Meteor Jakarta</a>, <a href=\"https://www.meetup.com/reactindonesia/\">React Indonesia</a> dan <a href=\"https://www.meetup.com/JakartaJS/\">JakartaJS</a> tentunya.</p>\n<p>Dan ternyata saya lanjut! Meskipun ada beberapa pertanyaan teknis yang menurut saya jawabannya sulit dan juga pilihan spesialisasi juga cukup sulit. Saya diminta memilih spesialisasi di <a href=\"https://developers.google.com/web/progressive-web-apps/\">Progressive Web Apps</a>, <a href=\"https://angular.io/\">Angular</a> atau <a href=\"https://www.webcomponents.org/\">Web Components</a>/<a href=\"https://www.polymer-project.org/\">Polymer</a>. Dan saya akhirnya memilih <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qgBvAulWYDj_vsgONAMHYw.png\"><figcaption>Jeff Posnick — Developer Platform Engineer at Google</figcaption></figure><p>Karena memilih <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a>, maka saya akan diinterview oleh <em>Googler</em> yang berhubungan dengan PWA. Googler tersebut tak lain adalah yang bikin <em>library service worker</em>, salah satu bagian penting dari PWA, <a href=\"https://developers.google.com/web/tools/workbox/\">workbox</a> nama <em>library</em>-nya. Namanya <a href=\"https://github.com/jeffposnick\">Jeff Posnick</a>, yang adalah Developer Platform Engineer di Google.</p>\n<p>Singkat cerita, saya akhirnya menjadi <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> di Web Technologies fokusnya Progressive Web Apps. Tidak terbayang sebelumnya saya bisa berada di satu lingkaran dengan GDE lain seperti <a href=\"https://developers.google.com/experts/people/shirley-wu.html\">Shirley Wu</a> yang mengajarkan saya tentang <a href=\"https://d3js.org/\">D3js</a> melalui <em>video course</em>, <a href=\"https://developers.google.com/experts/people/kent-c-dodds.html\">Kent C. Dodds</a> yang mengajarkan saya <a href=\"https://reactjs.org/\">React</a> dan <a href=\"https://jestjs.io/\">testing</a>, <a href=\"https://developers.google.com/experts/people/ryan-chenkie.html\">Ryan Chenkie</a> yang mengajarkan saya <a href=\"https://graphql.org/\">GraphQL</a> melalui <em>video course</em> dan experts lainnya diseluruh dunia!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kq0fNkin8vBfmenP7PDMlg.png\"><figcaption>Berada satu lingkaran dengan para experts.</figcaption></figure><p>Ketika apa yang saya produksi selama ini diakui oleh seorang Web Developer Relations sekelas Mas <a href=\"https://twitter.com/tyohan\">Yohan</a> dan diapresiasi oleh Google kebahagiaan yang hakiki buat saya. Jadi buat teman-teman yang ingin mengundang saya untuk berbagi silakan kontak saya, transportasi dan akomodasi akan ditanggung oleh Google (<em>syarat dan ketentuan berlaku</em>).</p>\n<h3>Tentang Acara Chrome Dev Summit</h3>\n<p>Sehari sebelum acara Chrome Dev Summit, saya bertemu dengan Mas <a href=\"https://twitter.com/AriyaHidayat\">Ariya Hidayat</a> yang memang domisili di <a href=\"https://en.wikipedia.org/wiki/San_Jose,_California\">San Jose</a>, dekat dengan lokasi hotel dan <em>venue</em> Experts Summit. Dan saya diberi bocoran bahwa <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit</a> itu serunya adalah bagian <em>networking</em>-nya karena untuk sesi talks-nya dapat dinikmati secara live-streaming via <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF\">youtube</a>. Dan itulah yang saya lakukan!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BXXlQnFRaDaDDhW3q9lRoQ.jpeg\"><figcaption>Bersama sang Legenda, Ariya Hidayat</figcaption></figure><p>Pastinya banyak developer kelas dunia <em>berseliweran</em> disana, sebagian besar karyawan Google sih, beberapa idola saya. Jadi sekalian berburu <em>selfie</em> atau sekedar <em>say hi</em>. Setelah nonton beberapa sesi, terutama sesi yang dibawakan oleh pak <a href=\"https://twitter.com/paul_irish\">Paul Irish</a> tentang performa dan tools <a href=\"https://developers.google.com/web/tools/lighthouse/\">lighthouse</a>.. eh, ternyata pak Paul malah nongkrong jaga stand <em>lighthouse</em>. Ngga kebayang sih, orang sepenting beliau masih sempat ikutan jaga stand. Ya mumpung beliau idola saya sejak <a href=\"https://html5boilerplate.com/\">HTML5 Boilerplate</a>, <em>say hi</em> dan foto bareng tentunya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UQAwr3lgW6hg7GzcRf2E8g.png\"><figcaption><em>Paul Irish — Performance Engineer at Google</em></figcaption></figure><p>Saat dulu diminta untuk membawakan materi tentang Progressive Web Apps di TechInAsia Product Development Conference 2017 saya banyak belajar topik tersebut dari <a href=\"https://www.udacity.com/course/intro-to-progressive-web-apps--ud811\">online course ini</a>. Instrukturnya Pete LePage yang sangat, sangat lucu dan membawakan materi dengan menarik. Jauh dari kata <em>boring</em>. Saya yakin beberapa teman-teman di Indonesia pernah bertemu atau melihat bapak Pete ini karena beliau pernah datang ke Indonesia untuk mengisi materi workshop PWA. Di hari kedua CDS sekilas saya melihat sosok tersebut. Awalnya saya lupa namanya sampai harus <em>googling</em> dulu supaya ingat namanya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2w2llYk5fok7ylcU5zaUBQ.png\"><figcaption>Pete LePage — <em>Dev Advocate at google</em></figcaption></figure><p>Akhirnya saya berhasil mencegat dia, ngobrol dan foto bareng tentunya. Berterimakasih karena dia yang mengajarkan saya PWA pertama kali dan dari hal tersebut akhirnya membawa saya menjadi GDE. Tak lupa saya tanya rahasia gimana bisa <em>seluwes</em> itu didepan kamera. Saya pernah berada didepan kamera dan sumpah, susah banget membawakan materi dengan lancar dan luwes ketika berhadapan dengan kamera. Sederhananya, ngga ada rahasia karena <em>he’s a natural</em>. Memang aslinya dia lucu aja. Berikut cuplikan video Pak Pete buat yang penasaran.</p>\n<a href=\"https://medium.com/media/af97efa1f747bcbe71f32924062c79ce/href\">https://medium.com/media/af97efa1f747bcbe71f32924062c79ce/href</a><p>Kemudian tentu, saya bertemu dengan Jeff Posnick yang menginterview saya dan meloloskan saya menjadi GDE. Menariknya, saya sempat bertemu pak Jeff ini dihari pertama, tapi saya ngga <em>ngeh </em>kalo itu dia. Beda banget tampilannya di video call dengan aslinya, jadi pangling saya. Ketika ngobrol dengan Mas Yohan saya bilang pengen ketemu pak Jeff, dia kaget. “Lah, yang kemaren sebelah gue itu Jeff.”</p>\n<p>Akhirnya di hari kedua saya cari dia dan akhirnya ketemu. Pas ketemu saya nge-<em>blank</em> sampe lupa namanya: <em>“Hey man, my name is Riza. I’m totally blank right now and suddenly forgot your name.</em>” Untungnya dia dengan baik hati membalas: <em>“My name is Jeff, nice to meet you!”</em> Setelah itu percakapan berjalan cukup lancar. Tak lupa saya ucapkan terimakasih karena telah menerima saya menjadi GDE dan tak lupa <em>selfie</em>!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8dKYVqXD9qpBVHiI91e2mg.png\"><figcaption>Akhirnya bisa bertemu Pak Jeff secara langsung</figcaption></figure><p>Lalu secara tidak sengaja saya berpapasan dengan seseorang dengan tshirt yang menarik perhatian saya. Tulisannya momentum beserta logonya. Oh, saya tahu <a href=\"https://momentumdash.com/\">momentum</a>, sebuah <a href=\"https://momentumdash.com/\">chrome extension</a> yang menampilkan foto-foto indah ketika kita buka tab baru. Tentu setelah itu fiturnya bertambah sebagai salah satu <em>productivity tools</em> dengan penambahan todo list dan lain sebagainya.</p>\n<p>Ketika berpapasan, saya cuma <em>nyeletuk</em>: <em>“Nice shirt!”.</em> Gayung bersambut, dia lantas bertanya: <em>“You knew momentum?!”</em> dan pembicaraan berlanjut. Dia minta kontak linkedin saya (entah buat apa), dan menawarkan apakah saya mau stiker. Tentu saja saya terima dengan tangan terbuka 🤗</p>\n<p>Tidak lupa saya bertanya tentang strategi monetisasi dari momentum. Saya tidak bisa membayangkan bagaimana mereka bisa menemukan cara untuk monetisasi dari sebuah produk sederhana seperti momentum ini. Ternyata mereka benar-benar ingin menjadi sebuah produk yang membantu orang untuk fokus dan produktif. Mereka menyasar <em>corporate</em> untuk memberikan <em>best practic</em>e dan <em>tools berbayar</em> dalam rangkan meningkatkan produktifitas karyawannya. Keren juga ya…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-PLXV7dY7mr189OsfH2cZQ.png\"><figcaption><em>Jason Waterman — Co-founder, CTO Momentum</em></figcaption></figure><p>Lalu di hari kedua atau hari terakhir, malam harinya saya diundang oleh tim Chrome untuk penataran tambahan. Tidak semua orang diundang ternyata. Selain dapat makan malam, saya bisa bertemu developer heroes seperti pak <a href=\"https://www.linkedin.com/in/bgalbs/\">Ben Galbraith</a>, pak <a href=\"https://www.linkedin.com/in/dalmaer/\">Dion Almaer</a>, ibu <a href=\"https://www.linkedin.com/in/egsweeny/\">Elizabeth Sweeny</a>, bang <a href=\"https://addyosmani.com/\">Addy Osmani</a> dan om <a href=\"https://twitter.com/slightlylate\">Alex Russell</a>!</p>\n<p>Saya dan om Alex ngobrol cukup banyak tentang PWA dan betapa <em>bloated</em>-nya framework-framework JavaScript yang ada sekarang. Ternyata om yang satu ini cukup <em>old school</em> yang lebih memilih menulis kode dengan vanilla JavaScript saja. Saya ingat banget dia bilang gini: “Once you initialize new project with create-react-app, it’s already bloated!” Benar juga ya, <em>point taken</em>! Itu bahkan belum kita apa-apain, belum install <em>redux, routes </em>dan library lainnya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hAn3urFSLoRJGLGRGk6L3A.png\"><figcaption>Alex Russell — Senior Engineer at Google</figcaption></figure><p>Oh iya, buat yang belum kenal dengan om Alex Russell, dia adalah Senior Engineer yang mengerjakan <a href=\"http://www.chromium.org/blink\">Blink</a> engine Chrome, <a href=\"http://dojotoolkit.org/\">dojo</a>, App Cache, Service Worker, <a href=\"https://www.webcomponents.org/community/author/alex_russell\">web component</a>, anggota <a href=\"http://www.ecma-international.org/memento/TC39.htm\">ECMA TC39</a>, anggota <a href=\"http://www.w3.org/2001/tag/\">W3C Technical Architecture Group</a> dan masih banyak lagi. Sangking serunya percakapan kami, acara selesai dan saya tidak sempat <em>say hi</em> dengan Addy Osmani, <em>damn</em>! <em>Maybe next time</em>.</p>\n<h3>Tentang Sesi Chrome Dev Summit</h3>\n<p>Meskipun sesi <em>networking</em> adalah sesi yang paling seru, bukan artinya sesi talks tidak seru. Banyak sekali pelajaran penting yang saya dapatkan. Mulai dari melihat bagaimana panitia menciptakan alur cerita dan kondisi agar penonton tetap <em>engage</em> dan terhibur, topik, cara presentasi, hingga <a href=\"https://youtu.be/nKtQHxfRVAM?t=20576\">kegagalan pembicara kala membawakan sesi<em> live code</em></a> dan bagaimana mereka mengatasinya. Meskipun tidak semua sesi dapat saya tonton karena ramai dan beberapa kali tidak kebagian tempat. Dilain kesempatan saya dapat tempat dan secara spontan tertidur dan terbangun ketika sesi berakhir. Apalagi semua <a href=\"https://bit.ly/CDS18-AllSessions\">video tersedia di youtube</a>, jadi saya bisa nonton video-video menarik setelah pulang saja. Berikut beberapa hal yang menarik perhatian saya.</p>\n<h4>Keynote Hari Pertama</h4>\n<p>Tahun 2018 ternyata merupakan ulang tahun <a href=\"https://www.google.com/chrome/\">Google Chrome</a> yang ke-10. Tidak hanya itu saja, <a href=\"https://www.android.com/\">Android</a> pun berulangtahun yang ke-10 di tahun ini. Begitupula dengan <a href=\"https://v8.dev/\">V8</a>, <em>engine</em> JavaScript yang digunakan Chrome, umurnya juga 10 tahun. Lebih jauh, di tahun 2018 ini <a href=\"https://google.com/\">Google</a> sudah berumur 20 tahun saja!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/924/1*Sa4zAFsROJdtnioMJROM3Q.png\"><figcaption>Peningkatan Fitur Modern JavaScript di V8</figcaption></figure><p><a href=\"https://v8.dev/\">V8</a> sudah banyak sekali melakukan optimisasi. Teraktual, mereka berhasil meningkatkan kinerja <em>garbage collector</em> menjadi lebih cepat 100 kali lipat! Kemudian mereka juga mengoptimalkan beberapa fitur JavaScript modern seperti promise, async/await, array destructuring dan masih banyak optimisasi lainnya. Dan V8 sekarang sudah mendukung <a href=\"https://webassembly.org/\">webassembly</a>. Tentang <a href=\"https://webassembly.org/\">webassembly</a> akan kita bahas di bagian tersendiri nanti.</p>\n<p><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\">Performance bugdet</a> juga merupakan salah satu topik yang sangat sering muncul di berbagai sesi dan secara umum tema dari Summit kali ini memang didominasi oleh topik seputar performa.</p>\n<p>Kemudian hadir pembicaraan tentang <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Service Worker</a> dan juga <a href=\"https://developers.google.com/web/progressive-web-apps/\">Porgressive Web Apps</a>. Jika teman-teman tertarik untuk belajar Service Worker dengan cara yang menyenangkan, bisa main game <a href=\"https://serviceworkies.com/\">serviceworkies.com</a>.</p>\n<p>Untuk lebih detailnya, bisa cek video keynote hari pertama berikut.</p>\n<a href=\"https://medium.com/media/9dbda5bb6392335c7f8ed20a618d2d64/href\">https://medium.com/media/9dbda5bb6392335c7f8ed20a618d2d64/href</a><h4>Keynote Hari Kedua</h4>\n<p>Hari berikutnya cukup menarik terutama keynote hari kedua. Hal yang cukup menggelitik adalah ketika mbak <a href=\"https://www.linkedin.com/in/nicolesullivan\">Nicole Sullivan</a> mengatakan bahwa <em>framework</em> terkadang membuat aplikasi kita lambat. Tapi <em>framework</em> juga harapan utama kita untuk membuat aplikasi kita menjadi lebih cepat. Karena itu duet mbak <a href=\"https://www.linkedin.com/in/nicolesullivan\">Nicole</a> dan juga mas <a href=\"https://twitter.com/cramforce\">Malte Ubl</a> menggarisbawahi beberapa perubahan yang dilakukan <em>framework-framework</em> untuk membuat performa aplikasi menjadi lebih optimal.</p>\n<p>Pertama ada <a href=\"https://reactjs.org/\">React</a> yang sudah menerapkan <em>code splitting</em> dan melakukan proses render lebih optimal dengan memecahnya menjadi bagian kecil. Kemudian React juga memperkenalkan <em>lazy mode</em>, <em>suspense</em> dan juga konkurensi.</p>\n<p>Selanjutnya ada Angular yang memasukkan performance budget kedalam <a href=\"https://cli.angular.io/\">angular-cli</a>, beberapa <em>polyfill</em> dibuang dan memperkenalkan <a href=\"https://blog.angularindepth.com/inside-ivy-exploring-the-new-angular-compiler-ebf85141cee1?gi=e853685fe5a4\">Ivy</a>, sebuah kompiler baru untuk membuat Angular view menjadi lebih cepat.</p>\n<p>Framework berikutnya, <a href=\"https://vuejs.org/\">Vue</a> yang memperkenalkan <em>modern mode</em> untuk men-<em>deliver</em> aplikasi web kita ke modern browser saja. Hal ini dapat menghapus beberapa <em>polyfill</em> yang digunakan dalam rangka mengakomodasi browser <em>jadul</em>. Vue juga telah melakukan <em>preloading</em> dan <em>prefetching</em> secara default.</p>\n<p><a href=\"https://www.polymer-project.org/\">Polymer</a>, akan bertransformasi menjadi <a href=\"https://lit-element.polymer-project.org/\">lit-element</a> dalam rangka menerapkan web component yang sangat <em>slim</em>. Dan, kabar gembiranya, <em>web component</em> sekarang sudah didukung secara <em>native</em> di firefox!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YFeztoPNMcKP-Q808mgZQg.png\"><figcaption>Kompatibilitas Web Components. Dikutip dari <a href=\"https://www.webcomponents.org/\">https://www.webcomponents.org/</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*otRMcCbm0f6_rNdY.jpg\"></figure><p><a href=\"https://svelte.technology/\">Svelte</a>, sebuah <a href=\"https://svelte.technology/blog/frameworks-without-the-framework\">framework tanpa framework</a>, sebuah konsep yang sangat menarik buat saya pribadi. Disini Svelte di-<em>highlight</em> sebagai sebuah framework yang pada dasarnya sudah sangat cepat, tanpa harus ada optimisasi lebih lanjut. Sederhananya, kita men-<em>develop</em> aplikasi web dengan <em>framework</em> Svelte, mungkin ditambah beberapa <em>library</em> seperti <em>state management</em>, <em>routes</em>, dan lain sebagainya. Yang menarik, kemudian kita melakukan kompilasi dengan <em>tools</em> yang disediakan sehingga hasil akhirnya berupa html, css dan <strong>vanilla JavaScript</strong> yang bisa berjalan bahkan di browser yang tidak terlalu modern. Dan ukuran yang dihasilkan sangat kecil dan optimal!</p>\n<p>Terakhir <a href=\"https://www.emberjs.com/\">Ember</a>, yang menghapus <a href=\"https://jquery.com/\">jQuery</a> dari <em>boilerplate default-</em>nya. Meskipun bisa ditambahkan jika perlu. Dengan menghapus jQuery, Ember mampu mengurangi ukurannya sebanyak 20% saja! Selain menghapus jQuery, Ember juga melakukan optimasi di bagian <em>rendering</em>-nya.</p>\n<p>Untuk lebih lengkapnya, berikut video keynote hari kedua.</p>\n<a href=\"https://medium.com/media/bc2d421647040f2ef7ac2f0fe87bdadd/href\">https://medium.com/media/bc2d421647040f2ef7ac2f0fe87bdadd/href</a><h4>Actor Model Untuk Web</h4>\n<p>Actor model adalah sebuah konsep yang berkembang dikalangan komputasi konkurensi yang muncul pertama kali ditahun 1973. Actor model yang paling terkenal diterapkan di bahasa pemrograman <a href=\"https://www.erlang.org/\">Erlang</a>, dan kemudian dilanjutkan oleh <a href=\"https://elixir-lang.org/\">Elixir</a>. Kita juga dapat menerapkan konsep ini di bahasa seperti <a href=\"https://medium.com/pujanggateknologi/berkenalan-dengan-scala-dd6452596fa6\">scala</a> dengan memanfaatkan framework seperti <a href=\"https://akka.io/\">Akka</a>.</p>\n<p>Ternyata di web <em>actor model</em> ini juga cocok diterapkan di web. Mas <a href=\"https://twitter.com/dassurma\">Surma</a> dan mas <a href=\"https://twitter.com/aerotwist\">Paul Lewis</a> dalam sesi yang diberi judul “<em>Architecting Web Apps — lights, camera, action!” </em>mendemokan <em>actor model</em> yang diterapkan disisi web. Misalnya sebuah aplikasi web mempunyai <em>actor</em>: UI, state, storage dan juga broadcaster. Cukup familiar kan dengan konsep seperti ini? Kalau dipikir-pikir ada sedikit kemiripan dengan Redux. <em>Well</em>, teman-teman bisa cek langsung <a href=\"https://github.com/PolymerLabs/actor-boilerplate\">reponya disini</a>.</p>\n<a href=\"https://medium.com/media/e64aac9c070b2e885e7f3dd17d4a5b3f/href\">https://medium.com/media/e64aac9c070b2e885e7f3dd17d4a5b3f/href</a><h4>Houdini CSS</h4>\n<p>Sesi berikutnya yang menurut saya menarik adalah tentang <a href=\"https://wiki.mozilla.org/CSS/Houdini\">Houdini</a>. Houdini adalah sebuah inisiasi yang isinya sekelompok orang yang ditunjuk oleh konsorsium <a href=\"https://www.w3.org/\">w3c</a> untuk mengembangkan CSS berikutnya. Mereka menciptakan <em>tools</em> untuk membuat fitur-fitur CSS baru yang saat ini belum diterapkan browser.</p>\n<p>Secara sederhana, Houdini adalah <em>low-level API</em> JavaScript untuk kebutuhan rendering. Artinya kita bisa mengajari HTML untuk me-<em>render</em> sesuatu yang belum bisa dilakukan oleh CSS. Memang untuk saat ini belum semua API dan browser mendukung Houdini, tapi kita sudah bisa menggunakan paint API-nya di <a href=\"https://ishoudinireadyyet.com/\">Chrome dan Opera</a>, paling tidak.</p>\n<p>Contohnya ketika kita ingin membuat lingkaran sebagai background dari textarea, kita bisa ‘mengajari’ browser untuk melakukannya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vmHK2v4dEvQKrZG5xyJoww.png\"><figcaption>Contoh mengajari browser menggambar lingkaran di textarea.</figcaption></figure><p>Kemudian kita definisikan bagaimana cara membuat lingkaran di circle.js.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6wRx6hybqgUlgQ2EoyufvA.png\"><figcaption>Contoh menggambar lingkaran denga JavaScript</figcaption></figure><p>Nah, sekarang kita bisa menggunakan <em>circle</em> tadi di CSS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8EH9hEb7wYfjuwCrXdndxQ.png\"><figcaption>Memanggil circle di CSS</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Kav2jetOJcCnqXhsAzMAAA.png\"><figcaption>Hasilnya kita bisa menjadikan circle sebagai background dari textarea.</figcaption></figure><p>Gimana, seru ya?! Bayangkan banyak hal yang bisa kita buat dengan Houdini ini. Untuk lebih jelasnya bisa simak video-nya dibawah ini yang kembali dibawakan oleh abang <a href=\"https://twitter.com/dassurma\">Surma</a>.</p>\n<a href=\"https://medium.com/media/662fb0423dd53ad69bdd7af30d8a6b50/href\">https://medium.com/media/662fb0423dd53ad69bdd7af30d8a6b50/href</a><h4>Sesi WebAssembly</h4>\n<p>Sebenarnya sesi tentang <a href=\"https://webassembly.org/\">WebAssembly</a> ada juga di hari pertama, tapi saya gabungkan saja supaya lebih jelas juga. Saya juga tidak akan terlalu banyak membahas sesinya. Bisa nonton sendiri nanti. Tapi pembahasan saya akan banyak kepada <a href=\"https://webassembly.org/\">WebAssembly</a> itu sendiri.</p>\n<p><a href=\"https://webassembly.org/\">WebAssembly</a> adalah bahasa baru untuk web. Sekarang ini bahasa pemrograman lain dapat menargetkan untuk dikompilasi dan dieksekusi di web dengan bantuan format bahasa wasm atau WebAssembly. Otomatis banyak yang khawatir, gimana nasib JavaScript. Tenang saja, WebAssembly tidak akan menggantikan JavaScript. Justru wasm dan JavaScript akan berjalan beriringan.</p>\n<p>Dengan bantuan wasm, aplikasi berat seperti <a href=\"https://web.autocad.com/\">Autocad</a>, <a href=\"https://www.google.com/earth/\">Google Earth</a> ataupun <a href=\"https://www.figma.com/\">Figma</a> dapat berjalan di web. Ambil contoh <a href=\"https://web.autocad.com/\">Autocad</a>, sebuah aplikasi yang cukup berat yang ditulis dengan C++ sebagai aplikasi desktop. Tanpa banyak perubahan, kode lama dapat dengan mudah dikompilasi ke format wasm dan <em>viola</em>! Autocad sudah bisa digunakan di web dengan performa yang sama bagusnya dengan versi desktopnya.</p>\n<p>Beberapa bahasa yang sudah bisa dikompilasi ke wasm diantaranya ada C, C++, Rust, dan Lua. Sedangkan Golang, C#, Java, Ruby, Python dan lainnya akan segera menyusul. Dan dukungan dari browser pun sudah mumpuni jadi kita sudah bisa mulai belajar dari sekarang.</p>\n<a href=\"https://medium.com/media/f93e964aa3f7bf34e7e5a1abf11e625d/href\">https://medium.com/media/f93e964aa3f7bf34e7e5a1abf11e625d/href</a><h3>Kesimpulan</h3>\n<p>Perhelatan yang diselenggarakan oleh Google ini sangat seru. Sesi <em>networking</em>-nya dengan bertemu developer tingkat dewa yang beberapa adalah idola saya merupakan hal yang buat saya membangkitkan semangat untuk bekerja lebih giat mengerjar ketertinggalan dan lebih semangat lagi untuk berbagi ilmu dengan developer di Indonesia. Sesi <em>talks</em>-nya pun tidak kalah seru yang tentunya bisa kita nikmati bersama-sama melalui video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ldJrzjIXQ5OoJfDz1fbRgw.png\"><figcaption>Bonus: Swaaaagggg!!</figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f2db2d7a17ae\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/pengalaman-pertama-menghadiri-chrome-dev-summit-f2db2d7a17ae\">Pengalaman Pertama Menghadiri Chrome Dev Summit</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg\"></figure><p>Berikut cerita pengalaman pertama saya menghadiri <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit 2018</a> atas undangan Google untuk para <a href=\"https://developers.google.com/experts/people/riza-fahmi.html\">Google Developers Expert</a> yang fokus di <a href=\"https://developers.google.com/experts/all/technology/web-technologies\">Web Technologies</a>. Setelah sehari sebelumnya, di tanggal 10–11 November 2018 juga ada perhelatan akbar Developers Experts Summit dimana GDE atau <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> seluruh dunia berkumpul dan ber-<em>summit</em>-ria.</p>\n<p>Sebelum mengulas acara yang diselenggarakan di <a href=\"https://www.ybca.org/\">Yerba Buena Center for the Arts, San Francisco</a> pada tanggal 12–13 November 2018 saya ingin menceritakan bagaimana saya bisa menjadi <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> terlebih dahulu agar konteksnya sesuai.</p>\n<h3>Menjadi Google Developers Experts</h3>\n<p>Suatu sore, saya <em>ngobrol</em> dengan Mas <a href=\"https://twitter.com/tyohan\">Yohan Totting</a> dan dia ingin saya menjadi GDE, awalnya saya terkejut dan penasaran. Saya yakin masih banyak diluar sana orang yang lebih <em>expert</em> dibanding saya. Karena penasaran, saya kemudian menanyakan apa itu GDE dan apa tugasnya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_qVaoo5NzVm8UgujxqQfUg.png\"><figcaption>Yohan Totting — Developer Advocate, Web Developer Relations at Google</figcaption></figure><p>Saya masih ingat banget jawaban Mas Yohan saat itu: “Lo lakukan apa yang selama ini sudah lo kerjakan. Tulis artikel, <em>screencast</em>, <em>podcast</em>, dan <em>talks</em>.” Bedanya sekarang semua itu di <em>support</em> Google. Jadi kalau saya diundang menjadi pembicara diluar Jakarta dan di sekitar Asia Tenggara, Google akan memberikan dukungan dalam bentuk tiket pesawat dan penginapan.</p>\n<p>Dalam hati, seru juga ya karena memang hal tersebut yang saya lakukan beberapa tahun terakhir dalam skala kecil. Singkat cerita, saya memberanikan diri untuk apply dengan<em> mindset nothing to lose</em>. Banyak tahapan yang harus dilewati, mulai dari <em>screening</em> awal, interview dengan GDE dan terakhir, kalau lulus, akan diinterview oleh <em>Googler</em>! Lumayan kan, menambah pengalaman.</p>\n<p>Setelah melewati proses <em>screening</em>, saya akhirnya dapat kesempatan diinterview oleh GDE. Saya anggap ini sebagai kesempatan saya meyakinkan diri apakah GDE pantas saya perjuangkan, karena praktis akan banyak waktu dan juga biaya yang akan keluar. Saya berkesempatan diinterview oleh <a href=\"https://developers.google.com/experts/people/warat-wongmaneekit\">Warat Wongmaneekit</a>, GDE asal Thailand.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KGqjtipczDlZErawutzSSQ.png\"><figcaption>Warat Wongmaneekit (kanan).</figcaption></figure><p>Di interview ini saya banyak ‘menjual’ konsep <a href=\"https://randomscreencast.com/\">randomscreencast</a>, <em>video screencast</em> yang saya produksi. Saya menceritakan konsep <em>randomness</em>, topik yang <em>random</em>, dan di-<em>publish</em> di tanggal dan jam yang <em>random</em> pula. Kemudian saya juga banyak bercerita tentang beberapa komunitas yang saya inisiasi dan kelola, seperti <a href=\"https://www.meetup.com/Meteor-Jakarta/\">Meteor Jakarta</a>, <a href=\"https://www.meetup.com/reactindonesia/\">React Indonesia</a> dan <a href=\"https://www.meetup.com/JakartaJS/\">JakartaJS</a> tentunya.</p>\n<p>Dan ternyata saya lanjut! Meskipun ada beberapa pertanyaan teknis yang menurut saya jawabannya sulit dan juga pilihan spesialisasi juga cukup sulit. Saya diminta memilih spesialisasi di <a href=\"https://developers.google.com/web/progressive-web-apps/\">Progressive Web Apps</a>, <a href=\"https://angular.io/\">Angular</a> atau <a href=\"https://www.webcomponents.org/\">Web Components</a>/<a href=\"https://www.polymer-project.org/\">Polymer</a>. Dan saya akhirnya memilih <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qgBvAulWYDj_vsgONAMHYw.png\"><figcaption>Jeff Posnick — Developer Platform Engineer at Google</figcaption></figure><p>Karena memilih <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a>, maka saya akan diinterview oleh <em>Googler</em> yang berhubungan dengan PWA. Googler tersebut tak lain adalah yang bikin <em>library service worker</em>, salah satu bagian penting dari PWA, <a href=\"https://developers.google.com/web/tools/workbox/\">workbox</a> nama <em>library</em>-nya. Namanya <a href=\"https://github.com/jeffposnick\">Jeff Posnick</a>, yang adalah Developer Platform Engineer di Google.</p>\n<p>Singkat cerita, saya akhirnya menjadi <a href=\"https://developers.google.com/experts/\">Google Developers Experts</a> di Web Technologies fokusnya Progressive Web Apps. Tidak terbayang sebelumnya saya bisa berada di satu lingkaran dengan GDE lain seperti <a href=\"https://developers.google.com/experts/people/shirley-wu.html\">Shirley Wu</a> yang mengajarkan saya tentang <a href=\"https://d3js.org/\">D3js</a> melalui <em>video course</em>, <a href=\"https://developers.google.com/experts/people/kent-c-dodds.html\">Kent C. Dodds</a> yang mengajarkan saya <a href=\"https://reactjs.org/\">React</a> dan <a href=\"https://jestjs.io/\">testing</a>, <a href=\"https://developers.google.com/experts/people/ryan-chenkie.html\">Ryan Chenkie</a> yang mengajarkan saya <a href=\"https://graphql.org/\">GraphQL</a> melalui <em>video course</em> dan experts lainnya diseluruh dunia!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kq0fNkin8vBfmenP7PDMlg.png\"><figcaption>Berada satu lingkaran dengan para experts.</figcaption></figure><p>Ketika apa yang saya produksi selama ini diakui oleh seorang Web Developer Relations sekelas Mas <a href=\"https://twitter.com/tyohan\">Yohan</a> dan diapresiasi oleh Google kebahagiaan yang hakiki buat saya. Jadi buat teman-teman yang ingin mengundang saya untuk berbagi silakan kontak saya, transportasi dan akomodasi akan ditanggung oleh Google (<em>syarat dan ketentuan berlaku</em>).</p>\n<h3>Tentang Acara Chrome Dev Summit</h3>\n<p>Sehari sebelum acara Chrome Dev Summit, saya bertemu dengan Mas <a href=\"https://twitter.com/AriyaHidayat\">Ariya Hidayat</a> yang memang domisili di <a href=\"https://en.wikipedia.org/wiki/San_Jose,_California\">San Jose</a>, dekat dengan lokasi hotel dan <em>venue</em> Experts Summit. Dan saya diberi bocoran bahwa <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit</a> itu serunya adalah bagian <em>networking</em>-nya karena untuk sesi talks-nya dapat dinikmati secara live-streaming via <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF\">youtube</a>. Dan itulah yang saya lakukan!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BXXlQnFRaDaDDhW3q9lRoQ.jpeg\"><figcaption>Bersama sang Legenda, Ariya Hidayat</figcaption></figure><p>Pastinya banyak developer kelas dunia <em>berseliweran</em> disana, sebagian besar karyawan Google sih, beberapa idola saya. Jadi sekalian berburu <em>selfie</em> atau sekedar <em>say hi</em>. Setelah nonton beberapa sesi, terutama sesi yang dibawakan oleh pak <a href=\"https://twitter.com/paul_irish\">Paul Irish</a> tentang performa dan tools <a href=\"https://developers.google.com/web/tools/lighthouse/\">lighthouse</a>.. eh, ternyata pak Paul malah nongkrong jaga stand <em>lighthouse</em>. Ngga kebayang sih, orang sepenting beliau masih sempat ikutan jaga stand. Ya mumpung beliau idola saya sejak <a href=\"https://html5boilerplate.com/\">HTML5 Boilerplate</a>, <em>say hi</em> dan foto bareng tentunya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UQAwr3lgW6hg7GzcRf2E8g.png\"><figcaption><em>Paul Irish — Performance Engineer at Google</em></figcaption></figure><p>Saat dulu diminta untuk membawakan materi tentang Progressive Web Apps di TechInAsia Product Development Conference 2017 saya banyak belajar topik tersebut dari <a href=\"https://www.udacity.com/course/intro-to-progressive-web-apps--ud811\">online course ini</a>. Instrukturnya Pete LePage yang sangat, sangat lucu dan membawakan materi dengan menarik. Jauh dari kata <em>boring</em>. Saya yakin beberapa teman-teman di Indonesia pernah bertemu atau melihat bapak Pete ini karena beliau pernah datang ke Indonesia untuk mengisi materi workshop PWA. Di hari kedua CDS sekilas saya melihat sosok tersebut. Awalnya saya lupa namanya sampai harus <em>googling</em> dulu supaya ingat namanya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2w2llYk5fok7ylcU5zaUBQ.png\"><figcaption>Pete LePage — <em>Dev Advocate at google</em></figcaption></figure><p>Akhirnya saya berhasil mencegat dia, ngobrol dan foto bareng tentunya. Berterimakasih karena dia yang mengajarkan saya PWA pertama kali dan dari hal tersebut akhirnya membawa saya menjadi GDE. Tak lupa saya tanya rahasia gimana bisa <em>seluwes</em> itu didepan kamera. Saya pernah berada didepan kamera dan sumpah, susah banget membawakan materi dengan lancar dan luwes ketika berhadapan dengan kamera. Sederhananya, ngga ada rahasia karena <em>he’s a natural</em>. Memang aslinya dia lucu aja. Berikut cuplikan video Pak Pete buat yang penasaran.</p>\n<a href=\"https://medium.com/media/af97efa1f747bcbe71f32924062c79ce/href\">https://medium.com/media/af97efa1f747bcbe71f32924062c79ce/href</a><p>Kemudian tentu, saya bertemu dengan Jeff Posnick yang menginterview saya dan meloloskan saya menjadi GDE. Menariknya, saya sempat bertemu pak Jeff ini dihari pertama, tapi saya ngga <em>ngeh </em>kalo itu dia. Beda banget tampilannya di video call dengan aslinya, jadi pangling saya. Ketika ngobrol dengan Mas Yohan saya bilang pengen ketemu pak Jeff, dia kaget. “Lah, yang kemaren sebelah gue itu Jeff.”</p>\n<p>Akhirnya di hari kedua saya cari dia dan akhirnya ketemu. Pas ketemu saya nge-<em>blank</em> sampe lupa namanya: <em>“Hey man, my name is Riza. I’m totally blank right now and suddenly forgot your name.</em>” Untungnya dia dengan baik hati membalas: <em>“My name is Jeff, nice to meet you!”</em> Setelah itu percakapan berjalan cukup lancar. Tak lupa saya ucapkan terimakasih karena telah menerima saya menjadi GDE dan tak lupa <em>selfie</em>!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8dKYVqXD9qpBVHiI91e2mg.png\"><figcaption>Akhirnya bisa bertemu Pak Jeff secara langsung</figcaption></figure><p>Lalu secara tidak sengaja saya berpapasan dengan seseorang dengan tshirt yang menarik perhatian saya. Tulisannya momentum beserta logonya. Oh, saya tahu <a href=\"https://momentumdash.com/\">momentum</a>, sebuah <a href=\"https://momentumdash.com/\">chrome extension</a> yang menampilkan foto-foto indah ketika kita buka tab baru. Tentu setelah itu fiturnya bertambah sebagai salah satu <em>productivity tools</em> dengan penambahan todo list dan lain sebagainya.</p>\n<p>Ketika berpapasan, saya cuma <em>nyeletuk</em>: <em>“Nice shirt!”.</em> Gayung bersambut, dia lantas bertanya: <em>“You knew momentum?!”</em> dan pembicaraan berlanjut. Dia minta kontak linkedin saya (entah buat apa), dan menawarkan apakah saya mau stiker. Tentu saja saya terima dengan tangan terbuka 🤗</p>\n<p>Tidak lupa saya bertanya tentang strategi monetisasi dari momentum. Saya tidak bisa membayangkan bagaimana mereka bisa menemukan cara untuk monetisasi dari sebuah produk sederhana seperti momentum ini. Ternyata mereka benar-benar ingin menjadi sebuah produk yang membantu orang untuk fokus dan produktif. Mereka menyasar <em>corporate</em> untuk memberikan <em>best practic</em>e dan <em>tools berbayar</em> dalam rangkan meningkatkan produktifitas karyawannya. Keren juga ya…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-PLXV7dY7mr189OsfH2cZQ.png\"><figcaption><em>Jason Waterman — Co-founder, CTO Momentum</em></figcaption></figure><p>Lalu di hari kedua atau hari terakhir, malam harinya saya diundang oleh tim Chrome untuk penataran tambahan. Tidak semua orang diundang ternyata. Selain dapat makan malam, saya bisa bertemu developer heroes seperti pak <a href=\"https://www.linkedin.com/in/bgalbs/\">Ben Galbraith</a>, pak <a href=\"https://www.linkedin.com/in/dalmaer/\">Dion Almaer</a>, ibu <a href=\"https://www.linkedin.com/in/egsweeny/\">Elizabeth Sweeny</a>, bang <a href=\"https://addyosmani.com/\">Addy Osmani</a> dan om <a href=\"https://twitter.com/slightlylate\">Alex Russell</a>!</p>\n<p>Saya dan om Alex ngobrol cukup banyak tentang PWA dan betapa <em>bloated</em>-nya framework-framework JavaScript yang ada sekarang. Ternyata om yang satu ini cukup <em>old school</em> yang lebih memilih menulis kode dengan vanilla JavaScript saja. Saya ingat banget dia bilang gini: “Once you initialize new project with create-react-app, it’s already bloated!” Benar juga ya, <em>point taken</em>! Itu bahkan belum kita apa-apain, belum install <em>redux, routes </em>dan library lainnya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hAn3urFSLoRJGLGRGk6L3A.png\"><figcaption>Alex Russell — Senior Engineer at Google</figcaption></figure><p>Oh iya, buat yang belum kenal dengan om Alex Russell, dia adalah Senior Engineer yang mengerjakan <a href=\"http://www.chromium.org/blink\">Blink</a> engine Chrome, <a href=\"http://dojotoolkit.org/\">dojo</a>, App Cache, Service Worker, <a href=\"https://www.webcomponents.org/community/author/alex_russell\">web component</a>, anggota <a href=\"http://www.ecma-international.org/memento/TC39.htm\">ECMA TC39</a>, anggota <a href=\"http://www.w3.org/2001/tag/\">W3C Technical Architecture Group</a> dan masih banyak lagi. Sangking serunya percakapan kami, acara selesai dan saya tidak sempat <em>say hi</em> dengan Addy Osmani, <em>damn</em>! <em>Maybe next time</em>.</p>\n<h3>Tentang Sesi Chrome Dev Summit</h3>\n<p>Meskipun sesi <em>networking</em> adalah sesi yang paling seru, bukan artinya sesi talks tidak seru. Banyak sekali pelajaran penting yang saya dapatkan. Mulai dari melihat bagaimana panitia menciptakan alur cerita dan kondisi agar penonton tetap <em>engage</em> dan terhibur, topik, cara presentasi, hingga <a href=\"https://youtu.be/nKtQHxfRVAM?t=20576\">kegagalan pembicara kala membawakan sesi<em> live code</em></a> dan bagaimana mereka mengatasinya. Meskipun tidak semua sesi dapat saya tonton karena ramai dan beberapa kali tidak kebagian tempat. Dilain kesempatan saya dapat tempat dan secara spontan tertidur dan terbangun ketika sesi berakhir. Apalagi semua <a href=\"https://bit.ly/CDS18-AllSessions\">video tersedia di youtube</a>, jadi saya bisa nonton video-video menarik setelah pulang saja. Berikut beberapa hal yang menarik perhatian saya.</p>\n<h4>Keynote Hari Pertama</h4>\n<p>Tahun 2018 ternyata merupakan ulang tahun <a href=\"https://www.google.com/chrome/\">Google Chrome</a> yang ke-10. Tidak hanya itu saja, <a href=\"https://www.android.com/\">Android</a> pun berulangtahun yang ke-10 di tahun ini. Begitupula dengan <a href=\"https://v8.dev/\">V8</a>, <em>engine</em> JavaScript yang digunakan Chrome, umurnya juga 10 tahun. Lebih jauh, di tahun 2018 ini <a href=\"https://google.com/\">Google</a> sudah berumur 20 tahun saja!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/924/1*Sa4zAFsROJdtnioMJROM3Q.png\"><figcaption>Peningkatan Fitur Modern JavaScript di V8</figcaption></figure><p><a href=\"https://v8.dev/\">V8</a> sudah banyak sekali melakukan optimisasi. Teraktual, mereka berhasil meningkatkan kinerja <em>garbage collector</em> menjadi lebih cepat 100 kali lipat! Kemudian mereka juga mengoptimalkan beberapa fitur JavaScript modern seperti promise, async/await, array destructuring dan masih banyak optimisasi lainnya. Dan V8 sekarang sudah mendukung <a href=\"https://webassembly.org/\">webassembly</a>. Tentang <a href=\"https://webassembly.org/\">webassembly</a> akan kita bahas di bagian tersendiri nanti.</p>\n<p><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\">Performance bugdet</a> juga merupakan salah satu topik yang sangat sering muncul di berbagai sesi dan secara umum tema dari Summit kali ini memang didominasi oleh topik seputar performa.</p>\n<p>Kemudian hadir pembicaraan tentang <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Service Worker</a> dan juga <a href=\"https://developers.google.com/web/progressive-web-apps/\">Porgressive Web Apps</a>. Jika teman-teman tertarik untuk belajar Service Worker dengan cara yang menyenangkan, bisa main game <a href=\"https://serviceworkies.com/\">serviceworkies.com</a>.</p>\n<p>Untuk lebih detailnya, bisa cek video keynote hari pertama berikut.</p>\n<a href=\"https://medium.com/media/9dbda5bb6392335c7f8ed20a618d2d64/href\">https://medium.com/media/9dbda5bb6392335c7f8ed20a618d2d64/href</a><h4>Keynote Hari Kedua</h4>\n<p>Hari berikutnya cukup menarik terutama keynote hari kedua. Hal yang cukup menggelitik adalah ketika mbak <a href=\"https://www.linkedin.com/in/nicolesullivan\">Nicole Sullivan</a> mengatakan bahwa <em>framework</em> terkadang membuat aplikasi kita lambat. Tapi <em>framework</em> juga harapan utama kita untuk membuat aplikasi kita menjadi lebih cepat. Karena itu duet mbak <a href=\"https://www.linkedin.com/in/nicolesullivan\">Nicole</a> dan juga mas <a href=\"https://twitter.com/cramforce\">Malte Ubl</a> menggarisbawahi beberapa perubahan yang dilakukan <em>framework-framework</em> untuk membuat performa aplikasi menjadi lebih optimal.</p>\n<p>Pertama ada <a href=\"https://reactjs.org/\">React</a> yang sudah menerapkan <em>code splitting</em> dan melakukan proses render lebih optimal dengan memecahnya menjadi bagian kecil. Kemudian React juga memperkenalkan <em>lazy mode</em>, <em>suspense</em> dan juga konkurensi.</p>\n<p>Selanjutnya ada Angular yang memasukkan performance budget kedalam <a href=\"https://cli.angular.io/\">angular-cli</a>, beberapa <em>polyfill</em> dibuang dan memperkenalkan <a href=\"https://blog.angularindepth.com/inside-ivy-exploring-the-new-angular-compiler-ebf85141cee1?gi=e853685fe5a4\">Ivy</a>, sebuah kompiler baru untuk membuat Angular view menjadi lebih cepat.</p>\n<p>Framework berikutnya, <a href=\"https://vuejs.org/\">Vue</a> yang memperkenalkan <em>modern mode</em> untuk men-<em>deliver</em> aplikasi web kita ke modern browser saja. Hal ini dapat menghapus beberapa <em>polyfill</em> yang digunakan dalam rangka mengakomodasi browser <em>jadul</em>. Vue juga telah melakukan <em>preloading</em> dan <em>prefetching</em> secara default.</p>\n<p><a href=\"https://www.polymer-project.org/\">Polymer</a>, akan bertransformasi menjadi <a href=\"https://lit-element.polymer-project.org/\">lit-element</a> dalam rangka menerapkan web component yang sangat <em>slim</em>. Dan, kabar gembiranya, <em>web component</em> sekarang sudah didukung secara <em>native</em> di firefox!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YFeztoPNMcKP-Q808mgZQg.png\"><figcaption>Kompatibilitas Web Components. Dikutip dari <a href=\"https://www.webcomponents.org/\">https://www.webcomponents.org/</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*otRMcCbm0f6_rNdY.jpg\"></figure><p><a href=\"https://svelte.technology/\">Svelte</a>, sebuah <a href=\"https://svelte.technology/blog/frameworks-without-the-framework\">framework tanpa framework</a>, sebuah konsep yang sangat menarik buat saya pribadi. Disini Svelte di-<em>highlight</em> sebagai sebuah framework yang pada dasarnya sudah sangat cepat, tanpa harus ada optimisasi lebih lanjut. Sederhananya, kita men-<em>develop</em> aplikasi web dengan <em>framework</em> Svelte, mungkin ditambah beberapa <em>library</em> seperti <em>state management</em>, <em>routes</em>, dan lain sebagainya. Yang menarik, kemudian kita melakukan kompilasi dengan <em>tools</em> yang disediakan sehingga hasil akhirnya berupa html, css dan <strong>vanilla JavaScript</strong> yang bisa berjalan bahkan di browser yang tidak terlalu modern. Dan ukuran yang dihasilkan sangat kecil dan optimal!</p>\n<p>Terakhir <a href=\"https://www.emberjs.com/\">Ember</a>, yang menghapus <a href=\"https://jquery.com/\">jQuery</a> dari <em>boilerplate default-</em>nya. Meskipun bisa ditambahkan jika perlu. Dengan menghapus jQuery, Ember mampu mengurangi ukurannya sebanyak 20% saja! Selain menghapus jQuery, Ember juga melakukan optimasi di bagian <em>rendering</em>-nya.</p>\n<p>Untuk lebih lengkapnya, berikut video keynote hari kedua.</p>\n<a href=\"https://medium.com/media/bc2d421647040f2ef7ac2f0fe87bdadd/href\">https://medium.com/media/bc2d421647040f2ef7ac2f0fe87bdadd/href</a><h4>Actor Model Untuk Web</h4>\n<p>Actor model adalah sebuah konsep yang berkembang dikalangan komputasi konkurensi yang muncul pertama kali ditahun 1973. Actor model yang paling terkenal diterapkan di bahasa pemrograman <a href=\"https://www.erlang.org/\">Erlang</a>, dan kemudian dilanjutkan oleh <a href=\"https://elixir-lang.org/\">Elixir</a>. Kita juga dapat menerapkan konsep ini di bahasa seperti <a href=\"https://medium.com/pujanggateknologi/berkenalan-dengan-scala-dd6452596fa6\">scala</a> dengan memanfaatkan framework seperti <a href=\"https://akka.io/\">Akka</a>.</p>\n<p>Ternyata di web <em>actor model</em> ini juga cocok diterapkan di web. Mas <a href=\"https://twitter.com/dassurma\">Surma</a> dan mas <a href=\"https://twitter.com/aerotwist\">Paul Lewis</a> dalam sesi yang diberi judul “<em>Architecting Web Apps — lights, camera, action!” </em>mendemokan <em>actor model</em> yang diterapkan disisi web. Misalnya sebuah aplikasi web mempunyai <em>actor</em>: UI, state, storage dan juga broadcaster. Cukup familiar kan dengan konsep seperti ini? Kalau dipikir-pikir ada sedikit kemiripan dengan Redux. <em>Well</em>, teman-teman bisa cek langsung <a href=\"https://github.com/PolymerLabs/actor-boilerplate\">reponya disini</a>.</p>\n<a href=\"https://medium.com/media/e64aac9c070b2e885e7f3dd17d4a5b3f/href\">https://medium.com/media/e64aac9c070b2e885e7f3dd17d4a5b3f/href</a><h4>Houdini CSS</h4>\n<p>Sesi berikutnya yang menurut saya menarik adalah tentang <a href=\"https://wiki.mozilla.org/CSS/Houdini\">Houdini</a>. Houdini adalah sebuah inisiasi yang isinya sekelompok orang yang ditunjuk oleh konsorsium <a href=\"https://www.w3.org/\">w3c</a> untuk mengembangkan CSS berikutnya. Mereka menciptakan <em>tools</em> untuk membuat fitur-fitur CSS baru yang saat ini belum diterapkan browser.</p>\n<p>Secara sederhana, Houdini adalah <em>low-level API</em> JavaScript untuk kebutuhan rendering. Artinya kita bisa mengajari HTML untuk me-<em>render</em> sesuatu yang belum bisa dilakukan oleh CSS. Memang untuk saat ini belum semua API dan browser mendukung Houdini, tapi kita sudah bisa menggunakan paint API-nya di <a href=\"https://ishoudinireadyyet.com/\">Chrome dan Opera</a>, paling tidak.</p>\n<p>Contohnya ketika kita ingin membuat lingkaran sebagai background dari textarea, kita bisa ‘mengajari’ browser untuk melakukannya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vmHK2v4dEvQKrZG5xyJoww.png\"><figcaption>Contoh mengajari browser menggambar lingkaran di textarea.</figcaption></figure><p>Kemudian kita definisikan bagaimana cara membuat lingkaran di circle.js.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6wRx6hybqgUlgQ2EoyufvA.png\"><figcaption>Contoh menggambar lingkaran denga JavaScript</figcaption></figure><p>Nah, sekarang kita bisa menggunakan <em>circle</em> tadi di CSS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8EH9hEb7wYfjuwCrXdndxQ.png\"><figcaption>Memanggil circle di CSS</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Kav2jetOJcCnqXhsAzMAAA.png\"><figcaption>Hasilnya kita bisa menjadikan circle sebagai background dari textarea.</figcaption></figure><p>Gimana, seru ya?! Bayangkan banyak hal yang bisa kita buat dengan Houdini ini. Untuk lebih jelasnya bisa simak video-nya dibawah ini yang kembali dibawakan oleh abang <a href=\"https://twitter.com/dassurma\">Surma</a>.</p>\n<a href=\"https://medium.com/media/662fb0423dd53ad69bdd7af30d8a6b50/href\">https://medium.com/media/662fb0423dd53ad69bdd7af30d8a6b50/href</a><h4>Sesi WebAssembly</h4>\n<p>Sebenarnya sesi tentang <a href=\"https://webassembly.org/\">WebAssembly</a> ada juga di hari pertama, tapi saya gabungkan saja supaya lebih jelas juga. Saya juga tidak akan terlalu banyak membahas sesinya. Bisa nonton sendiri nanti. Tapi pembahasan saya akan banyak kepada <a href=\"https://webassembly.org/\">WebAssembly</a> itu sendiri.</p>\n<p><a href=\"https://webassembly.org/\">WebAssembly</a> adalah bahasa baru untuk web. Sekarang ini bahasa pemrograman lain dapat menargetkan untuk dikompilasi dan dieksekusi di web dengan bantuan format bahasa wasm atau WebAssembly. Otomatis banyak yang khawatir, gimana nasib JavaScript. Tenang saja, WebAssembly tidak akan menggantikan JavaScript. Justru wasm dan JavaScript akan berjalan beriringan.</p>\n<p>Dengan bantuan wasm, aplikasi berat seperti <a href=\"https://web.autocad.com/\">Autocad</a>, <a href=\"https://www.google.com/earth/\">Google Earth</a> ataupun <a href=\"https://www.figma.com/\">Figma</a> dapat berjalan di web. Ambil contoh <a href=\"https://web.autocad.com/\">Autocad</a>, sebuah aplikasi yang cukup berat yang ditulis dengan C++ sebagai aplikasi desktop. Tanpa banyak perubahan, kode lama dapat dengan mudah dikompilasi ke format wasm dan <em>viola</em>! Autocad sudah bisa digunakan di web dengan performa yang sama bagusnya dengan versi desktopnya.</p>\n<p>Beberapa bahasa yang sudah bisa dikompilasi ke wasm diantaranya ada C, C++, Rust, dan Lua. Sedangkan Golang, C#, Java, Ruby, Python dan lainnya akan segera menyusul. Dan dukungan dari browser pun sudah mumpuni jadi kita sudah bisa mulai belajar dari sekarang.</p>\n<a href=\"https://medium.com/media/f93e964aa3f7bf34e7e5a1abf11e625d/href\">https://medium.com/media/f93e964aa3f7bf34e7e5a1abf11e625d/href</a><h3>Kesimpulan</h3>\n<p>Perhelatan yang diselenggarakan oleh Google ini sangat seru. Sesi <em>networking</em>-nya dengan bertemu developer tingkat dewa yang beberapa adalah idola saya merupakan hal yang buat saya membangkitkan semangat untuk bekerja lebih giat mengerjar ketertinggalan dan lebih semangat lagi untuk berbagi ilmu dengan developer di Indonesia. Sesi <em>talks</em>-nya pun tidak kalah seru yang tentunya bisa kita nikmati bersama-sama melalui video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ldJrzjIXQ5OoJfDz1fbRgw.png\"><figcaption>Bonus: Swaaaagggg!!</figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f2db2d7a17ae\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/pengalaman-pertama-menghadiri-chrome-dev-summit-f2db2d7a17ae\">Pengalaman Pertama Menghadiri Chrome Dev Summit</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web",
                "javascript-frameworks",
                "chrome-dev-summit",
                "webassembly",
                "houdini"
            ]
        },
        {
            "title": "Chrome Dev Summit 2018, mana yang kalian harus coba implementasikan? ( 1 dari 2)",
            "pubDate": "2018-11-30 10:30:16",
            "link": "https://medium.com/wwwid/chrome-dev-summit-2018-mana-yang-kalian-harus-coba-implementasikan-1-dari-2-fdb3367f6317?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/fdb3367f6317",
            "author": "Yohan Totting",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg\"><figcaption>Google Developer Experts Web di CDS 2018</figcaption></figure><p><a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit(CDS) 2018</a> yang merupakan ajang tahunan Google Chrome untuk bertatap muka dengan para pengembang web baru saja diselenggarakan beberapa minggu lalu di mana <em>event</em> selama 2 hari tersebut memberikan <em>insights</em> seputar kondisi web saat ini, dan apa yang akan hadir di <em>web platform</em> ke depannya. Terlalu banyak konten yang kadang malah membuat bingung pengembang web, mana yang harus saya coba gunakan terlebih dahulu. CDS sendiri diselenggarakan selama 2 hari, di mana hari pertama adalah <em>update</em> seputar kondisi terkini <em>web platform</em>, dan hari kedua adalah apa yang akan hadir di <em>web platform</em>. Untuk tahu apa saja yang dibagikan selama 2 hari ini kalian bisa menonton <em>keynote</em> hari pertama dan kedua.</p>\n<a href=\"https://medium.com/media/29f1fc25f1bbb27756f11793066fa52a/href\">https://medium.com/media/29f1fc25f1bbb27756f11793066fa52a/href</a><a href=\"https://medium.com/media/02e94a345f858ddfb0743f47000f2dd6/href\">https://medium.com/media/02e94a345f858ddfb0743f47000f2dd6/href</a><p>Bila kalian masih belum merasa yakin apakah memilih web sebagai <em>platform</em> yang digunakan dalam pengembangan produk, mungkin ada baiknya kalian menonton cerita Spotify dan Starbucks kenapa <em>web platform</em> penting untuk menjangkau pengguna lebih banyak, dan memberikan pengalaman lebih baik bagi pengguna.</p>\n<a href=\"https://medium.com/media/4d4270418cbbf2a158cec2a7124c0bed/href\">https://medium.com/media/4d4270418cbbf2a158cec2a7124c0bed/href</a><h3>Mana yang harus saya tonton?</h3>\n<p>Tulisan ini mencoba mengelompokkan konten-konten yang mungkin relevan dengan apa yang kalian buat. Sehingga teman-teman pengembang web bisa mencoba mengimplementasikan konten tersebut dan siap pada saat teknologi tersebut sudah dirilis secara publik.</p>\n<p>Bila kalian belum yakin apakah perlu berinvestasi di <em>web platform</em>.</p>\n<p>Saya mencoba membuat daftar <em>playlist</em> yang harus ditonton kalau kalian membuat salah satu dari 2 jenis <em>web app</em> berikut:</p>\n<ol>\n<li>Web berbasis konten</li>\n<li>Web interaktif</li>\n</ol>\n<h3>Web berbasis konten</h3>\n<p>Pengalaman pengguna merupakan kunci utama untuk semua jenis website. Tapi sebagai penyedia konten kita harus mulai dari mana? Video dari Alberto ini bisa memberikan bagaimana kita sebagai penyedia konten bisa memberikan pengalaman baik bertahap bila kita menggunakan <em>Content Management System</em>(CMS) dalam mengatur konten kita.</p>\n<a href=\"https://medium.com/media/37a2406bcdf818a0aa7f7b92b835bad7/href\">https://medium.com/media/37a2406bcdf818a0aa7f7b92b835bad7/href</a><p>Sebagai penyedia konten, biasanya indikator yang menjadi target adalah banyaknya konten yang dikonsumsi atau biasanya di <em>analytics tool </em>dihubungkan dengan jumlah <em>page views</em>. Untuk <em>page views</em>, agar pengguna tidak pergi karena terkendala dalam mengakses konten maka ada dua hal penting yang harus diperhatikan yaitu kecepatan tampil halaman atau <em>loading performance</em>, serta transisi navigasi antar halaman.</p>\n<p><strong>Bisa ditemukan<br></strong>Sebelum berbicara kecepatan tampil dan navigasi, tentunya kita harus memastikan konten bisa ditemukan. Google search sebagai salah satu penyumbang trafik terbesar ke penyedia konten belum tentu bisa membaca dan mengindex konten sebuah website. Untuk itu bila kita mengembangkan website dengan teknologi terkini, harus dipastikan agar bisa dibaca oleh Googlebot dengan cara-cara yang dijelaskan di video berikut.</p>\n<a href=\"https://medium.com/media/7e20fa18c16c18c75b49a10d644eef55/href\">https://medium.com/media/7e20fa18c16c18c75b49a10d644eef55/href</a><p><strong>Kecepatan tampil<br></strong>Kecepatan tampil pada dasarnya adalah seberapa besar ukuran <em>file</em> yang dimuat untuk menampilkan sebuah halaman website. Namun jenis <em>file</em> yang digunakan ada banyak jenisnya dan tingkat kepentingannya juga berbeda-beda. Video tentang kecepatan website ini mencakup 3 hal penting yang perlu diperhatikan pada saat menampilkan sebuah halaman website yaitu gambar, <em>font</em>, dan JavaScript.</p>\n<a href=\"https://medium.com/media/7109943b09c51317402ad7a7fce8d55d/href\">https://medium.com/media/7109943b09c51317402ad7a7fce8d55d/href</a><p><strong>Kecepatan navigasi<br></strong>Setelah membaca sebuah konten atau masuk di <em>homepage</em>, pembaca mungkin akan berpindah ke halaman lainnya untuk membaca konten. Kecepatan navigasi atau perpindahan halaman ini juga berperan penting untuk memastikan pengguna tidak pergi karena menunggu lama. Dan salah satu cara untuk mempercepat navigasi antar halaman adalah menggunakan <em>service worker</em>. Bagaimana menggunakan <em>service worker</em> dengan <em>cache</em> dengan tepat agar <em>cache</em> justru tidak memperlambat navigasi. Ada 5 hal yang perlu diperhatikan di video ini?</p>\n<a href=\"https://medium.com/media/0c4ce66407c8f1fb76fa3fcea737977e/href\">https://medium.com/media/0c4ce66407c8f1fb76fa3fcea737977e/href</a><p><strong>Tambah cepat dengan web packaging<br></strong>Membuat website tampil cepat bukanlah perkara mudah, terkadang lebih mudah membuat website cepat dari awal ketimbang memperbaiki website yang lambat. AMP project mencoba menutupi gap ini dengan menggaransi website bisa cepat dengan 3 komponen penting AMP yang salah satunya adalah AMP Cache. AMP Cache yang melakukan <em>bundle assets</em> halaman web saat ini cuma bisa digunakan di <em>server</em> Google sehingga URL konten pada saat diakses masih menggunakan domain Google. Namun kedepannya semua website bisa bisa lebih cepat ditampilkan menggunakan <em>web packaging</em> yang bekerja sama seperti AMP Cache. <em>Web packaging</em> sudah bisa dicoba dan lebih detailnya bisa kalian tonton dari video berikut:</p>\n<a href=\"https://medium.com/media/1cbc9cb540e739390b1a3aa99940202c/href\">https://medium.com/media/1cbc9cb540e739390b1a3aa99940202c/href</a><p><strong>Konsumsi video lebih baik<br></strong>Video merupakan salah satu konten yang semakin mendominasi jaringan internet saat ini karena ukurannya yang jauh lebih besar dibandingkan konten berbasis teks atau audio. Untuk bisa lebih efisien ditransmisikan melalui internet maka dibuatlah format video baru AV1 khusus untuk web. Bukan cuma format yang ukurannya lebih kecil, tapi juga <em>picture in picture</em> API memungkinkan kita menonton video di web secara bersamaan pada saat kita melakukan <em>browsing</em> konten lainnya.</p>\n<a href=\"https://medium.com/media/42b1dc756eb23b32ec5014a9492dde5a/href\">https://medium.com/media/42b1dc756eb23b32ec5014a9492dde5a/href</a><p>Itulah beberapa konten <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF\">Chrome Dev Summit 2018</a> yang kalian wajib tonton kalau kalian membuat website modern berbasis konten. Di seri berikutnya kita akan bagikan video mana yang perlu kalian tonton bila kalian mengembangkan aplikasi website yang lebih interaktif. Interaktif di sini adalah memerlukan input dari pengguna untuk mendapatkan output yang diinginkan. Contohnya adalah <em>e-commerce</em>, <em>image converter</em>, dan <em>virtual reality</em>.</p>\n<p>Ingin mendengarkan langsung konten-konten di atas dari Google Developer Expert dan team Tokopedia? Kalian bisa gabung di Chrome Dev Summit Extended Jakarta hari Rabu, 5 Desember 2018. Daftar sekarang di <a href=\"https://events.withgoogle.com/cds-extended-jkt-tokopedia\">https://events.withgoogle.com/cds-extended-jkt-tokopedia</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fdb3367f6317\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/chrome-dev-summit-2018-mana-yang-kalian-harus-coba-implementasikan-1-dari-2-fdb3367f6317\">Chrome Dev Summit 2018, mana yang kalian harus coba implementasikan? ( 1 dari 2)</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4hfn6_8CePCeY67FH5uwjA.jpeg\"><figcaption>Google Developer Experts Web di CDS 2018</figcaption></figure><p><a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit(CDS) 2018</a> yang merupakan ajang tahunan Google Chrome untuk bertatap muka dengan para pengembang web baru saja diselenggarakan beberapa minggu lalu di mana <em>event</em> selama 2 hari tersebut memberikan <em>insights</em> seputar kondisi web saat ini, dan apa yang akan hadir di <em>web platform</em> ke depannya. Terlalu banyak konten yang kadang malah membuat bingung pengembang web, mana yang harus saya coba gunakan terlebih dahulu. CDS sendiri diselenggarakan selama 2 hari, di mana hari pertama adalah <em>update</em> seputar kondisi terkini <em>web platform</em>, dan hari kedua adalah apa yang akan hadir di <em>web platform</em>. Untuk tahu apa saja yang dibagikan selama 2 hari ini kalian bisa menonton <em>keynote</em> hari pertama dan kedua.</p>\n<a href=\"https://medium.com/media/29f1fc25f1bbb27756f11793066fa52a/href\">https://medium.com/media/29f1fc25f1bbb27756f11793066fa52a/href</a><a href=\"https://medium.com/media/02e94a345f858ddfb0743f47000f2dd6/href\">https://medium.com/media/02e94a345f858ddfb0743f47000f2dd6/href</a><p>Bila kalian masih belum merasa yakin apakah memilih web sebagai <em>platform</em> yang digunakan dalam pengembangan produk, mungkin ada baiknya kalian menonton cerita Spotify dan Starbucks kenapa <em>web platform</em> penting untuk menjangkau pengguna lebih banyak, dan memberikan pengalaman lebih baik bagi pengguna.</p>\n<a href=\"https://medium.com/media/4d4270418cbbf2a158cec2a7124c0bed/href\">https://medium.com/media/4d4270418cbbf2a158cec2a7124c0bed/href</a><h3>Mana yang harus saya tonton?</h3>\n<p>Tulisan ini mencoba mengelompokkan konten-konten yang mungkin relevan dengan apa yang kalian buat. Sehingga teman-teman pengembang web bisa mencoba mengimplementasikan konten tersebut dan siap pada saat teknologi tersebut sudah dirilis secara publik.</p>\n<p>Bila kalian belum yakin apakah perlu berinvestasi di <em>web platform</em>.</p>\n<p>Saya mencoba membuat daftar <em>playlist</em> yang harus ditonton kalau kalian membuat salah satu dari 2 jenis <em>web app</em> berikut:</p>\n<ol>\n<li>Web berbasis konten</li>\n<li>Web interaktif</li>\n</ol>\n<h3>Web berbasis konten</h3>\n<p>Pengalaman pengguna merupakan kunci utama untuk semua jenis website. Tapi sebagai penyedia konten kita harus mulai dari mana? Video dari Alberto ini bisa memberikan bagaimana kita sebagai penyedia konten bisa memberikan pengalaman baik bertahap bila kita menggunakan <em>Content Management System</em>(CMS) dalam mengatur konten kita.</p>\n<a href=\"https://medium.com/media/37a2406bcdf818a0aa7f7b92b835bad7/href\">https://medium.com/media/37a2406bcdf818a0aa7f7b92b835bad7/href</a><p>Sebagai penyedia konten, biasanya indikator yang menjadi target adalah banyaknya konten yang dikonsumsi atau biasanya di <em>analytics tool </em>dihubungkan dengan jumlah <em>page views</em>. Untuk <em>page views</em>, agar pengguna tidak pergi karena terkendala dalam mengakses konten maka ada dua hal penting yang harus diperhatikan yaitu kecepatan tampil halaman atau <em>loading performance</em>, serta transisi navigasi antar halaman.</p>\n<p><strong>Bisa ditemukan<br></strong>Sebelum berbicara kecepatan tampil dan navigasi, tentunya kita harus memastikan konten bisa ditemukan. Google search sebagai salah satu penyumbang trafik terbesar ke penyedia konten belum tentu bisa membaca dan mengindex konten sebuah website. Untuk itu bila kita mengembangkan website dengan teknologi terkini, harus dipastikan agar bisa dibaca oleh Googlebot dengan cara-cara yang dijelaskan di video berikut.</p>\n<a href=\"https://medium.com/media/7e20fa18c16c18c75b49a10d644eef55/href\">https://medium.com/media/7e20fa18c16c18c75b49a10d644eef55/href</a><p><strong>Kecepatan tampil<br></strong>Kecepatan tampil pada dasarnya adalah seberapa besar ukuran <em>file</em> yang dimuat untuk menampilkan sebuah halaman website. Namun jenis <em>file</em> yang digunakan ada banyak jenisnya dan tingkat kepentingannya juga berbeda-beda. Video tentang kecepatan website ini mencakup 3 hal penting yang perlu diperhatikan pada saat menampilkan sebuah halaman website yaitu gambar, <em>font</em>, dan JavaScript.</p>\n<a href=\"https://medium.com/media/7109943b09c51317402ad7a7fce8d55d/href\">https://medium.com/media/7109943b09c51317402ad7a7fce8d55d/href</a><p><strong>Kecepatan navigasi<br></strong>Setelah membaca sebuah konten atau masuk di <em>homepage</em>, pembaca mungkin akan berpindah ke halaman lainnya untuk membaca konten. Kecepatan navigasi atau perpindahan halaman ini juga berperan penting untuk memastikan pengguna tidak pergi karena menunggu lama. Dan salah satu cara untuk mempercepat navigasi antar halaman adalah menggunakan <em>service worker</em>. Bagaimana menggunakan <em>service worker</em> dengan <em>cache</em> dengan tepat agar <em>cache</em> justru tidak memperlambat navigasi. Ada 5 hal yang perlu diperhatikan di video ini?</p>\n<a href=\"https://medium.com/media/0c4ce66407c8f1fb76fa3fcea737977e/href\">https://medium.com/media/0c4ce66407c8f1fb76fa3fcea737977e/href</a><p><strong>Tambah cepat dengan web packaging<br></strong>Membuat website tampil cepat bukanlah perkara mudah, terkadang lebih mudah membuat website cepat dari awal ketimbang memperbaiki website yang lambat. AMP project mencoba menutupi gap ini dengan menggaransi website bisa cepat dengan 3 komponen penting AMP yang salah satunya adalah AMP Cache. AMP Cache yang melakukan <em>bundle assets</em> halaman web saat ini cuma bisa digunakan di <em>server</em> Google sehingga URL konten pada saat diakses masih menggunakan domain Google. Namun kedepannya semua website bisa bisa lebih cepat ditampilkan menggunakan <em>web packaging</em> yang bekerja sama seperti AMP Cache. <em>Web packaging</em> sudah bisa dicoba dan lebih detailnya bisa kalian tonton dari video berikut:</p>\n<a href=\"https://medium.com/media/1cbc9cb540e739390b1a3aa99940202c/href\">https://medium.com/media/1cbc9cb540e739390b1a3aa99940202c/href</a><p><strong>Konsumsi video lebih baik<br></strong>Video merupakan salah satu konten yang semakin mendominasi jaringan internet saat ini karena ukurannya yang jauh lebih besar dibandingkan konten berbasis teks atau audio. Untuk bisa lebih efisien ditransmisikan melalui internet maka dibuatlah format video baru AV1 khusus untuk web. Bukan cuma format yang ukurannya lebih kecil, tapi juga <em>picture in picture</em> API memungkinkan kita menonton video di web secara bersamaan pada saat kita melakukan <em>browsing</em> konten lainnya.</p>\n<a href=\"https://medium.com/media/42b1dc756eb23b32ec5014a9492dde5a/href\">https://medium.com/media/42b1dc756eb23b32ec5014a9492dde5a/href</a><p>Itulah beberapa konten <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF\">Chrome Dev Summit 2018</a> yang kalian wajib tonton kalau kalian membuat website modern berbasis konten. Di seri berikutnya kita akan bagikan video mana yang perlu kalian tonton bila kalian mengembangkan aplikasi website yang lebih interaktif. Interaktif di sini adalah memerlukan input dari pengguna untuk mendapatkan output yang diinginkan. Contohnya adalah <em>e-commerce</em>, <em>image converter</em>, dan <em>virtual reality</em>.</p>\n<p>Ingin mendengarkan langsung konten-konten di atas dari Google Developer Expert dan team Tokopedia? Kalian bisa gabung di Chrome Dev Summit Extended Jakarta hari Rabu, 5 Desember 2018. Daftar sekarang di <a href=\"https://events.withgoogle.com/cds-extended-jkt-tokopedia\">https://events.withgoogle.com/cds-extended-jkt-tokopedia</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fdb3367f6317\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/chrome-dev-summit-2018-mana-yang-kalian-harus-coba-implementasikan-1-dari-2-fdb3367f6317\">Chrome Dev Summit 2018, mana yang kalian harus coba implementasikan? ( 1 dari 2)</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-developer",
                "events",
                "progressive-web-app",
                "chrome-dev-summit",
                "front-end-development"
            ]
        },
        {
            "title": "Progressive Web-Application di AWS",
            "pubDate": "2018-10-19 10:10:54",
            "link": "https://medium.com/wwwid/progressive-web-application-di-aws-2c622b8ff434?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/2c622b8ff434",
            "author": "Pradita Utama",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*4G-rbS8_wxA56U7GuKQB9Q.jpeg",
            "description": "\n<p>PWA+S3+Cloudfront = ❤️</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4G-rbS8_wxA56U7GuKQB9Q.jpeg\"><figcaption>Sumber: Pexels</figcaption></figure><p>Membangun PWA sepertinya sedang tren. Kita tidak akan membahas tips membangun PWA, jika ingin update tulisan yang berkaitan dengan pengembangan website di Indonesia bisa ikuti tautan ini <a href=\"https://medium.com/wwwid\">https://medium.com/wwwid</a></p>\n<h3>Create React App</h3>\n<p>Saya akan mencontohkan menggunakan React tapi sebenarnya seluruh website statis bisa juga (VueJS, Angular, Vanilla, dsb). Statis disini maksudnya adalah hanya HTML, JavaScript, dan CSS. Bukan server-side rendering.</p>\n<p>CRA ini sudah PWA-enabled, jadi bisa kita jadikan contoh.</p>\n<p>Supaya lebih cepat, saya menggunakan Create React App (CRA), ini semacam boilerplate tanpa harus coding dari awal.</p>\n<p><a href=\"https://github.com/facebook/create-react-app\">facebook/create-react-app</a></p>\n<p>Kita hanya tinggal lakukan perintah ini saja</p>\n<pre>npm install -g create-react-app<br>create-react-app my-app<br>cd my-app<br>npm run build</pre>\n<p>Hasil build file statis akan ada di direktori build</p>\n<h3>Amazon S3</h3>\n<p>Buat akun AWS jika belum punya, biasanya AWS ada limited trial selama 12 bulan untuk akun baru. Jika sudah ada, login dan masuk ke console Amazon S3</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2o8gOInzXvCx7JYrSuACNQ.png\"></figure><h4>Buat Bucket</h4>\n<p>Klik tombol Create Bucket dan isi sesuai yang kamu inginkan. Tips: gunakan nama yang mudah dibaca, misal diisi dengan nama website kamu, misal : <strong>jsisforthe-you-name-it.com</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VvRVgqlI9auAu-5eKyyGCQ.png\"></figure><h4>Next… Next… dan Set Permissions</h4>\n<p>Karena S3 ini nantinya akan dipakai sebagai host website kamu, pilih <em>Grant public read access to this bucket</em></p>\n<p>dan lanjutkan pilih Next dan Create Bucket.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B4C2vAy-3yWFiEhMVNF6LA.png\"></figure><h4>Jadikan S3 Bucket Menjadi Web Hosting</h4>\n<p>Masuk ke bucket kamu buat tadi, pilih Properties dan klik Static website hosting. Isi sesuai gambar dibawah dan klik save.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E-mbKP9gSX-RIW-3Jz_WNQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QrVg5Jn-bx6Dx1nN-Q_M8w.png\"></figure><p>Perhatikan teks Endpoint <a href=\"http://test-langsung-hapus.s3-website-ap-southeast-1.amazonaws.com/\">http://test-langsung-hapus.s3-website-ap-southeast-1.amazonaws.com</a></p>\n<p>Itu adalah alamat website statis kamu, selanjutnya kamu tinggal upload ke bucket tadi dan kunjungi URL Endpoint di atas. Selamat! sampai sini kamu sudah punya website statis di S3.</p>\n<p>Tapi, URL yang kamu dapatkan panjang sekali dan susah diingat. Termasuk bagaimana jika kamu ingin menggunakan HTTPS? atau bahkan domain sendiri? atau kamu ingin memanfaatkan CDN AWS supaya cepat?</p>\n<p>Kita lanjutkan di bagian bawah.</p>\n<h3>Amazon Cloudfront</h3>\n<p>Apa itu Cloudfront? Silakan klik tautan berikut.</p>\n<p><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html\">What Is Amazon CloudFront? - Amazon CloudFront</a></p>\n<p>Masuk ke console Cloudfront dan buat distribusi baru dengan delivery method adalah web dan isi bagian Origin Domain Name dengan nama Bucket S3 di atas dan Viewer Protocol Policy pilih Redirect HTTP to HTTPS</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BGMVEPnSvU1cV7xWhH9t6w.png\"></figure><p>Selanjutnya klik Create Distribution dan tunggu hingga selesai.</p>\n<p>Kamu akan mendapatkan URL Cloudfront kamu dengan format <strong>adfadf123adf.cloudfront.net</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y-YsMYCN-6qFxYx0mm6FaQ.png\"></figure><p>Sampai disini, website kamu sudah siap diakses menggunakan URL <strong>https://adfadf123adf.cloudfront.net</strong></p>\n<h4>Optional: Menggunakan Domain Sendiri</h4>\n<p>Jika kamu menggunakan domain sendiri atau subdomain sendiri, masukkan domain atau subdomain kamu di bagian Alternate Domain Names.</p>\n<p>Setelah itu kamu harus membuat CNAME dari Domain Control Panel kamu sendiri (tempat dimana kamu beli domain). Buat CNAME yang mengarah ke alamat distribusi Cloudfront yang nanti kamu dapatkan setelah kamu Click Distribution. Contoh di atas adalah <strong>adfadf123adf.cloudfront.net</strong></p>\n<p>Termasuk jika ingin menggunakan HTTPS, kamu harus memasukkan SSL certificate di ACM. Klik <strong><em>Request or Import a Certificate with ACM</em></strong> jika ingin memasukkan SSL certificate.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cwvbtg7egavjyQb2RH3BTA.png\"></figure><h3>Cache Control?</h3>\n<p>Menurut Google, file service-worker.js jangan diberikan cache. Gunakan Cache-Control: max-age=0</p>\n<p><a href=\"https://developers.google.com/web/updates/2018/06/fresher-sw\">Fresher service workers, by default | Web | Google Developers</a></p>\n<p>Kembali ke Bucket S3 kamu, klik kanan di file service-worker.js dan pilih Change Metadata dan masukkan Cache-Control: max-age=0</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*J-noi_k7vAtBUBtOts2pJg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VQWroUs2gmQpEXGdONRsGw.png\"></figure><p>PWA kamu sudah siap di <a href=\"https://adfadf123adf.cloudfront.net/\"><strong>https://adfadf123adf.cloudfront.net</strong></a><strong>!</strong></p>\n<h3>Bonus: Deployment Pakai AWS CLI</h3>\n<p>Harus manual melakukan upload setiap selesai coding? gunakan AWS CLI, cara install bisa dibaca di link ini</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface - AWS Command Line Interface</a></p>\n<p>Sebelum menggunakan AWS CLI kamu harus punya AWS_ACCESS_KEY dan AWS_SECRET_KEY yang bisa kamu dapatkan di bagian IAM.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/846/1*S4b_fQ9GFX9yW0O_irtoQQ.png\"></figure><p>Tulisan ini tidak membahas cara mendapatkan KEY tersebut, tapi saya menemukan artikel yang membahas ini</p>\n<p><a href=\"https://aws.amazon.com/blogs/security/wheres-my-secret-access-key/\">Where's My Secret Access Key? | Amazon Web Services</a></p>\n<p>Jika sudah mendapat KEYs dan install AWS CLI, lakukan perintah di bawah dan masukkan KEY yang kamu dapatkan.</p>\n<pre>aws configure</pre>\n<p>Sudah semua? mari kita lakukan upload menggunakan AWS CLI. Masuk ke dalam root project website kamu dan lakukan perintah berikut.</p>\n<pre>aws s3 sync build/ s3://NAMA_BUCKET --delete --cache-control max-age=604800,public</pre>\n<pre>aws s3 cp s3://NAMA_BUCKET/service-worker.js s3://NAMA_BUCKET/service-worker.js --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type application/javascript --acl public-read</pre>\n<pre>aws s3 cp s3://NAMA_BUCKET/index.html s3://NAMA_BUCKET/index.html --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --acl public-read</pre>\n<p>Kenapa harus 3 perintah? perintah yang pertama melakukan upload ke Bucket S3 kamu dari folder build dan membuat metadata Cache-Control: max-age:604800 untuk semua file yang diupload. Oh iya, 604800 ini adalah dalam detik, yang sama dengan 7 hari. Jadi file yang diupload akan punya header yang memerintahkan browser untuk cache filenya selama 7 hari.</p>\n<p>Tapi tadi katanya Google service-worker.js tidak boleh cache? itulah gunanya perintah ke-dua. Mirip dengan perintah pertama tapi ini hanya menyalin dari Bucket yang sama tapi membuat metadataCache-Control: max-age:0 dan beberapa metadata lainnya yang berguna untuk browser</p>\n<p>Perintah ke-tiga sama dengan perintah ke-dua, tapi untuk file index.html</p>\n<p>Secara general akan seperti ini:</p>\n<ul>\n<li>index.html → tidak akan di-cache (karena setiap build bisa saja berubah)</li>\n<li>service-worker.js → tidak akan di-cache</li>\n<li>lainnya → cache</li>\n</ul>\n<p>Selesai!</p>\n<h3>Bonus: Gitlab CI Configuration</h3>\n<p>Jika kamu menggunakan Gitlab runner, kamu bisa menambahkan file gitlab-ci.yml agar semua proses deployment kamu dilakukan otomatis. Tapi sebelumnya kamu harus sudah setup runner yang akan kamu pakai dan tambahkan AWS KEYS sebagai VARIABLES di repository kamu. Masuk ke Repository → Settings → CI/CD dan bagian variables</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/1*T1HwDco5273k31w0Xf_MCw.png\"></figure><p>Tambahkan file gitlab-ci.yml seperti ini</p>\n<a href=\"https://medium.com/media/c34fb3b28cd23982fe9f99ddcd471248/href\">https://medium.com/media/c34fb3b28cd23982fe9f99ddcd471248/href</a><p>Setiap kamu push ke Gitlab, maka hasil perubahan code kamu akan otomatis terdeploy di <a href=\"https://adfadf123adf.cloudfront.net/\"><strong>https://adfadf123adf.cloudfront.net</strong></a></p>\n<p>Happy coding!</p>\n<h3><strong>Troubleshoot #1: 403 (Forbidden) Ketika akses asset (CSS, JS) padahal sudah set public di S3</strong></h3>\n<p>Ini biasanya terjadi bila menggunakan routing di web SPA kamu, karena jika user masuk ke url <a href=\"https://domain/product/123\">https://domain/product/123</a> itu sebenarnya semua route dilempar ke /index.html.</p>\n<p>Masuk ke CloudFront, edit Distribution kamu dan pilih Error Pages. Create Custom Responses dan masukkan seperti gambar di bawah ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8EMxJXnje4AgartPx4Mwbg.png\"></figure><h3>Troubleshoot #2: 404 (Not Found) Ketika akses route / URL secara langsung tanpa lewat halaman depan</h3>\n<p>Ini biasanya terjadi bila menggunakan routing di web SPA kamu, karena jika user masuk ke url <a href=\"https://domain/product/123\">https://domain/product/123</a> itu sebenarnya semua route dilempar ke /index.html.</p>\n<p>Masuk ke CloudFront, edit Distribution kamu dan pilih Error Pages. Create Custom Responses dan masukkan seperti gambar di bawah ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*919Pr2XkjzmufR-HVrP1Mg.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2c622b8ff434\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/progressive-web-application-di-aws-2c622b8ff434\">Progressive Web-Application di AWS</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>PWA+S3+Cloudfront = ❤️</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4G-rbS8_wxA56U7GuKQB9Q.jpeg\"><figcaption>Sumber: Pexels</figcaption></figure><p>Membangun PWA sepertinya sedang tren. Kita tidak akan membahas tips membangun PWA, jika ingin update tulisan yang berkaitan dengan pengembangan website di Indonesia bisa ikuti tautan ini <a href=\"https://medium.com/wwwid\">https://medium.com/wwwid</a></p>\n<h3>Create React App</h3>\n<p>Saya akan mencontohkan menggunakan React tapi sebenarnya seluruh website statis bisa juga (VueJS, Angular, Vanilla, dsb). Statis disini maksudnya adalah hanya HTML, JavaScript, dan CSS. Bukan server-side rendering.</p>\n<p>CRA ini sudah PWA-enabled, jadi bisa kita jadikan contoh.</p>\n<p>Supaya lebih cepat, saya menggunakan Create React App (CRA), ini semacam boilerplate tanpa harus coding dari awal.</p>\n<p><a href=\"https://github.com/facebook/create-react-app\">facebook/create-react-app</a></p>\n<p>Kita hanya tinggal lakukan perintah ini saja</p>\n<pre>npm install -g create-react-app<br>create-react-app my-app<br>cd my-app<br>npm run build</pre>\n<p>Hasil build file statis akan ada di direktori build</p>\n<h3>Amazon S3</h3>\n<p>Buat akun AWS jika belum punya, biasanya AWS ada limited trial selama 12 bulan untuk akun baru. Jika sudah ada, login dan masuk ke console Amazon S3</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2o8gOInzXvCx7JYrSuACNQ.png\"></figure><h4>Buat Bucket</h4>\n<p>Klik tombol Create Bucket dan isi sesuai yang kamu inginkan. Tips: gunakan nama yang mudah dibaca, misal diisi dengan nama website kamu, misal : <strong>jsisforthe-you-name-it.com</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VvRVgqlI9auAu-5eKyyGCQ.png\"></figure><h4>Next… Next… dan Set Permissions</h4>\n<p>Karena S3 ini nantinya akan dipakai sebagai host website kamu, pilih <em>Grant public read access to this bucket</em></p>\n<p>dan lanjutkan pilih Next dan Create Bucket.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B4C2vAy-3yWFiEhMVNF6LA.png\"></figure><h4>Jadikan S3 Bucket Menjadi Web Hosting</h4>\n<p>Masuk ke bucket kamu buat tadi, pilih Properties dan klik Static website hosting. Isi sesuai gambar dibawah dan klik save.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E-mbKP9gSX-RIW-3Jz_WNQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QrVg5Jn-bx6Dx1nN-Q_M8w.png\"></figure><p>Perhatikan teks Endpoint <a href=\"http://test-langsung-hapus.s3-website-ap-southeast-1.amazonaws.com/\">http://test-langsung-hapus.s3-website-ap-southeast-1.amazonaws.com</a></p>\n<p>Itu adalah alamat website statis kamu, selanjutnya kamu tinggal upload ke bucket tadi dan kunjungi URL Endpoint di atas. Selamat! sampai sini kamu sudah punya website statis di S3.</p>\n<p>Tapi, URL yang kamu dapatkan panjang sekali dan susah diingat. Termasuk bagaimana jika kamu ingin menggunakan HTTPS? atau bahkan domain sendiri? atau kamu ingin memanfaatkan CDN AWS supaya cepat?</p>\n<p>Kita lanjutkan di bagian bawah.</p>\n<h3>Amazon Cloudfront</h3>\n<p>Apa itu Cloudfront? Silakan klik tautan berikut.</p>\n<p><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html\">What Is Amazon CloudFront? - Amazon CloudFront</a></p>\n<p>Masuk ke console Cloudfront dan buat distribusi baru dengan delivery method adalah web dan isi bagian Origin Domain Name dengan nama Bucket S3 di atas dan Viewer Protocol Policy pilih Redirect HTTP to HTTPS</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BGMVEPnSvU1cV7xWhH9t6w.png\"></figure><p>Selanjutnya klik Create Distribution dan tunggu hingga selesai.</p>\n<p>Kamu akan mendapatkan URL Cloudfront kamu dengan format <strong>adfadf123adf.cloudfront.net</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y-YsMYCN-6qFxYx0mm6FaQ.png\"></figure><p>Sampai disini, website kamu sudah siap diakses menggunakan URL <strong>https://adfadf123adf.cloudfront.net</strong></p>\n<h4>Optional: Menggunakan Domain Sendiri</h4>\n<p>Jika kamu menggunakan domain sendiri atau subdomain sendiri, masukkan domain atau subdomain kamu di bagian Alternate Domain Names.</p>\n<p>Setelah itu kamu harus membuat CNAME dari Domain Control Panel kamu sendiri (tempat dimana kamu beli domain). Buat CNAME yang mengarah ke alamat distribusi Cloudfront yang nanti kamu dapatkan setelah kamu Click Distribution. Contoh di atas adalah <strong>adfadf123adf.cloudfront.net</strong></p>\n<p>Termasuk jika ingin menggunakan HTTPS, kamu harus memasukkan SSL certificate di ACM. Klik <strong><em>Request or Import a Certificate with ACM</em></strong> jika ingin memasukkan SSL certificate.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cwvbtg7egavjyQb2RH3BTA.png\"></figure><h3>Cache Control?</h3>\n<p>Menurut Google, file service-worker.js jangan diberikan cache. Gunakan Cache-Control: max-age=0</p>\n<p><a href=\"https://developers.google.com/web/updates/2018/06/fresher-sw\">Fresher service workers, by default | Web | Google Developers</a></p>\n<p>Kembali ke Bucket S3 kamu, klik kanan di file service-worker.js dan pilih Change Metadata dan masukkan Cache-Control: max-age=0</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*J-noi_k7vAtBUBtOts2pJg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VQWroUs2gmQpEXGdONRsGw.png\"></figure><p>PWA kamu sudah siap di <a href=\"https://adfadf123adf.cloudfront.net/\"><strong>https://adfadf123adf.cloudfront.net</strong></a><strong>!</strong></p>\n<h3>Bonus: Deployment Pakai AWS CLI</h3>\n<p>Harus manual melakukan upload setiap selesai coding? gunakan AWS CLI, cara install bisa dibaca di link ini</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface - AWS Command Line Interface</a></p>\n<p>Sebelum menggunakan AWS CLI kamu harus punya AWS_ACCESS_KEY dan AWS_SECRET_KEY yang bisa kamu dapatkan di bagian IAM.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/846/1*S4b_fQ9GFX9yW0O_irtoQQ.png\"></figure><p>Tulisan ini tidak membahas cara mendapatkan KEY tersebut, tapi saya menemukan artikel yang membahas ini</p>\n<p><a href=\"https://aws.amazon.com/blogs/security/wheres-my-secret-access-key/\">Where's My Secret Access Key? | Amazon Web Services</a></p>\n<p>Jika sudah mendapat KEYs dan install AWS CLI, lakukan perintah di bawah dan masukkan KEY yang kamu dapatkan.</p>\n<pre>aws configure</pre>\n<p>Sudah semua? mari kita lakukan upload menggunakan AWS CLI. Masuk ke dalam root project website kamu dan lakukan perintah berikut.</p>\n<pre>aws s3 sync build/ s3://NAMA_BUCKET --delete --cache-control max-age=604800,public</pre>\n<pre>aws s3 cp s3://NAMA_BUCKET/service-worker.js s3://NAMA_BUCKET/service-worker.js --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type application/javascript --acl public-read</pre>\n<pre>aws s3 cp s3://NAMA_BUCKET/index.html s3://NAMA_BUCKET/index.html --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --acl public-read</pre>\n<p>Kenapa harus 3 perintah? perintah yang pertama melakukan upload ke Bucket S3 kamu dari folder build dan membuat metadata Cache-Control: max-age:604800 untuk semua file yang diupload. Oh iya, 604800 ini adalah dalam detik, yang sama dengan 7 hari. Jadi file yang diupload akan punya header yang memerintahkan browser untuk cache filenya selama 7 hari.</p>\n<p>Tapi tadi katanya Google service-worker.js tidak boleh cache? itulah gunanya perintah ke-dua. Mirip dengan perintah pertama tapi ini hanya menyalin dari Bucket yang sama tapi membuat metadataCache-Control: max-age:0 dan beberapa metadata lainnya yang berguna untuk browser</p>\n<p>Perintah ke-tiga sama dengan perintah ke-dua, tapi untuk file index.html</p>\n<p>Secara general akan seperti ini:</p>\n<ul>\n<li>index.html → tidak akan di-cache (karena setiap build bisa saja berubah)</li>\n<li>service-worker.js → tidak akan di-cache</li>\n<li>lainnya → cache</li>\n</ul>\n<p>Selesai!</p>\n<h3>Bonus: Gitlab CI Configuration</h3>\n<p>Jika kamu menggunakan Gitlab runner, kamu bisa menambahkan file gitlab-ci.yml agar semua proses deployment kamu dilakukan otomatis. Tapi sebelumnya kamu harus sudah setup runner yang akan kamu pakai dan tambahkan AWS KEYS sebagai VARIABLES di repository kamu. Masuk ke Repository → Settings → CI/CD dan bagian variables</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/1*T1HwDco5273k31w0Xf_MCw.png\"></figure><p>Tambahkan file gitlab-ci.yml seperti ini</p>\n<a href=\"https://medium.com/media/c34fb3b28cd23982fe9f99ddcd471248/href\">https://medium.com/media/c34fb3b28cd23982fe9f99ddcd471248/href</a><p>Setiap kamu push ke Gitlab, maka hasil perubahan code kamu akan otomatis terdeploy di <a href=\"https://adfadf123adf.cloudfront.net/\"><strong>https://adfadf123adf.cloudfront.net</strong></a></p>\n<p>Happy coding!</p>\n<h3><strong>Troubleshoot #1: 403 (Forbidden) Ketika akses asset (CSS, JS) padahal sudah set public di S3</strong></h3>\n<p>Ini biasanya terjadi bila menggunakan routing di web SPA kamu, karena jika user masuk ke url <a href=\"https://domain/product/123\">https://domain/product/123</a> itu sebenarnya semua route dilempar ke /index.html.</p>\n<p>Masuk ke CloudFront, edit Distribution kamu dan pilih Error Pages. Create Custom Responses dan masukkan seperti gambar di bawah ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8EMxJXnje4AgartPx4Mwbg.png\"></figure><h3>Troubleshoot #2: 404 (Not Found) Ketika akses route / URL secara langsung tanpa lewat halaman depan</h3>\n<p>Ini biasanya terjadi bila menggunakan routing di web SPA kamu, karena jika user masuk ke url <a href=\"https://domain/product/123\">https://domain/product/123</a> itu sebenarnya semua route dilempar ke /index.html.</p>\n<p>Masuk ke CloudFront, edit Distribution kamu dan pilih Error Pages. Create Custom Responses dan masukkan seperti gambar di bawah ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*919Pr2XkjzmufR-HVrP1Mg.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2c622b8ff434\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/progressive-web-application-di-aws-2c622b8ff434\">Progressive Web-Application di AWS</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "deployment",
                "cloudfront",
                "pwa",
                "react",
                "s3"
            ]
        },
        {
            "title": "5 kelemahan web apps yang sering hacker abuse",
            "pubDate": "2018-09-23 16:03:34",
            "link": "https://medium.com/wwwid/5-kelemahan-web-apps-yang-sering-hacker-abuse-34dd9e66546d?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/34dd9e66546d",
            "author": "Yahya Fadhlulloh Al-Fatih",
            "thumbnail": "https://cdn-images-1.medium.com/max/662/0*sadHMdVESMNVtNg9.jpg",
            "description": "\n<p>Sering kali web developer baru menyadari betapa pentingnya keamanan setelah web atau aplikasinya sudah diretas atau mendapat ancaman dari hacker berupa email. Kesulitan dari pengembangan pun mulai meningkat karena yang harus di tangkis adalah lubang keamanan, dua hal yang berbeda antara <strong>lubang </strong>yang biasa disebut bug<strong> </strong>dimana sebuah kesalahan teknikal ataupun bisnis yang menyebabkan munculnya error pada aplikasi yang biasanya muncul dengan ukuran seperti High, Medium, Low dan <strong>keamanan </strong>yang diukur dari tingkat resiko yang muncul dibagi seperti Confidential (kerahasiaan), Integrity(keutuhan) dan Availability (ketersediaan).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/662/0*sadHMdVESMNVtNg9.jpg\"><figcaption>hacker sexually attracted to your vulnerable app</figcaption></figure><p>Penulis ingin membagikan beberapa pro tips untuk para web developer dalam mengamankan web aplikasi kalian supaya kelemahan kelemahan yang biasa hacker manfaatkan bisa terlebih dahulu ditemukan, dan di atasi lebih awal. Terdapat 5 kelemahan umum yang biasa hacker manfaatkan diantaranya :</p>\n<h3>Vulnerable Packages</h3>\n<blockquote>npm packages over 375000, 70000 publisher, ~14% carry known vulnerabilities — snyk.io</blockquote>\n<p>Kelemahan paling umum yang biasa hacker manfaatkan, <em>outdated</em>, <em>unsupported, vulnerable </em>libraries/packages/dependencies…..</p>\n<p>Jangan pernah menganggap remeh vulnerable packages ini karena komunitas hacker sendiri mereka mereka pasti akan merilis jika menemukan kelemahan, dan akan di sebar lewat komunitas.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KcuGEG6-oJOwIMHm42fn8w.png\"></figure><p>Bahkan terdapat komunitas hacker sendiri yang menjual exclusive bug seperti bug nya twitter, facebook maupun instagram.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1009/1*864t9svsp0ULCEg9BLJ1iA.png\"></figure><p>yang harus dilakukan web developer untuk mencegah ini adalah :</p>\n<p>Gunakan package scanner untuk mengetahui kelemahan dari package, banyak sekali pilihan untuk package scanner salah satunya :</p>\n<h4><a href=\"https://docs.npmjs.com/getting-started/running-a-security-audit\">npm audit</a></h4>\n<p>Tools ini sangat membantu developer untuk mengetahui lebih awal jika ada library yang vulnerable, cukup dengan perintah biasa <strong>npm install</strong> nanti muncul peringatan kalau library tersebut terdapat kelemahan dan menyarankan menjalankan <strong>npm audit </strong>(jangan lupa ini menggunakan npm latest bisa langsung update menggunakan <strong>npm install npm@latest -g</strong> )</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/489/1*hBDqSa0h7JpjceDqUKjyWQ.png\"></figure><p>setelah menjalankan npm install, pasti disaraankan untuk menjalankan npm audit, nanti hasilnya seperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZEJvNnl4hHdscJSG.png\"></figure><p>untuk fixing bisa update aja versi library nya atau menggunakan perintah <strong>npm audit fix</strong> buat auto fixing yang vulnerable, mungkin ada beberapa library yang ga bisa di fixing biasnaya dikarenakan library nya sudah tidak di kembangkan lagi, atau harus update manual library nya.</p>\n<h4><a href=\"https://snyk.io/\">snyk.io</a></h4>\n<p>Ini bukan tools melainkan Website yang menyediakan jasa untuk melakukan scanning library, menggunakan website ini dia cukup general karena dia bisa scanning untuk multi language. Cukup dengan menambahkan project yang ada di berbagai repository (github, gitlab, dll) nanti dia bakal scanning library sekarang yang dipakai. Kelebihannya untuk menggunakan snyk.io ini kita bisa melakukan daily scanning, bisa liat detail permasalahan dan rekomendasinya terutama gratis, penulis sangat menyarankan menggunakan ini 👍</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/781/1*jvUP95hcIgVFE2VeHbAO4Q.png\"></figure><h4><a href=\"https://blog.github.com/2017-11-16-introducing-security-alerts-on-github/\">github security alert</a></h4>\n<p>Buat developer github mungkin ini sudah tidak asing lagi, untuk enable fitur ini bisa cek pada tab Insight, lalu bagian menu dependency graph ada fitur untuk memulai cek dependencies security. Biasanya setiap minggu jika ditemukan vulnerability pada dependencies langsung di peringatkan lewat email.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/574/1*JQaUKWhVSwTX6_YOaT2cpg.png\"><figcaption>Github memberikan peringatan tentang dependencies yang lema</figcaption></figure><p>Banyak sekali tools tools pendukung untuk cek dependencies dari lubang keamanan, contoh lainnya untuk composer libraries bisa di lakukan menggunakan tools <a href=\"https://security.sensiolabs.org/check\">sensiolabs</a> (<a href=\"https://security.sensiolabs.org/check\">web </a>/ <a href=\"https://github.com/sensiolabs/security-checker\">github </a>).</p>\n<h3>Injeksi</h3>\n<p>OWASP Top 10 Vulnerability menyebutkan injeksi adalah serangan yang paling sering hacker manfaatkan, dalam arti lain serangan yang paling di favoritkan oleh hacker, disisi mudah di gunakan, tipe serangannya juga sangat banyak bahkan <a href=\"https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/\">varian </a>untuk setiap masing masing sql server (mysql, postgres, oracle). Penulis akan berbagi tips untuk handle jenis serangan Injection yang umum, salah satunya :</p>\n<h4>SQL Injection</h4>\n<p>Arti sederhananya adalah query dari data yang terstruktur dan dimanfaatkan hacker untuk mendapatkan informasi lebih, contohnya seperti pada query berikut</p>\n<pre>select judul, highlight, deskripsi, tag from tbl_artikel where id = 1;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/553/1*PQlBIz9RzK0JBYKYUoD6Sw.png\"><figcaption>hasilnya</figcaption></figure><p>sederhana ko, anggap saja 1 adalah variabel input, jadi kalau angka tersebut di ganti ganti artinya akan menampilkan data berita dengan spesifik id, simple kan. Nah jika “ 1 “ adalah inputan dari user, artinya user bisa menambahkan query kan, anggap lah jika user tersebut memasukkan query berikut setelah inputan.</p>\n<pre><strong>union select 1,concat(table_name),3,4 from information_schema.tables where table_schema<br>=\"CRACKING\";</strong></pre>\n<p>jika di gabungkan menjadi begini</p>\n<pre>select <br> judul, highlight, deskripsi, tag <br>from tbl_artikel <br>where id = 1 <strong>union select 1,concat(table_name),3,4 from information_schema.tables where table_schema<br>=\"CRACKING\";</strong></pre>\n<p>maka hasilnya akan memberitahukan semua list tabel yang tersedia pada database “CRACKING” (contoh database yang dicoba)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/540/1*7wGv8Eq2DT7Nk2jfUwL0BQ.png\"><figcaption>hasilnya</figcaption></figure><p>artinya memungkinkan hacker melakukan ekstrak data lainnya pada query tersebut contoh lainnya pada query ini untuk menampilkan username dan password pada tabel</p>\n<pre>select judul, highlight, deskripsi, tag from tbl_artikel where id = 1 union select 1,concat(username,0x3a,<br>password),3,4 from tbl_user;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/542/1*BULmzjJzS-yrvASQxTBCRw.png\"></figure><p>Mungkin ribet ya, simple nya gini, kalo nyatanya bisa seperti ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/915/1*KimkYKKuir6u4G1sFWQf_Q.png\"></figure><p>Serangan SQL Injection ini paling umum, paling banyak varian nya, paling random banget muncul nya, bahkan banyak tools tools hacking yang sesimple masukkan URL dan langsung ekstrak database salah satunya Havij (one click hack, paling sering dipake noob hacker buat merasa lebih powerfull), BFSQL, paling the best itu <a href=\"http://sqlmap.org/\">SQLMap</a>. Buat kawan kawan yang penasaran dan pengen coba sendiri, saya saranin menggunakan SQLMap</p>\n<p>#<em>Attention disini penulis share tentang SQLMap khusus untuk testing aplikasi kalian sendiri buat kepentingan keamanan, kalo yang lain tanggung jawab masing masing</em></p>\n<h4>Test kelemahan aplikasi menggunakan SQL Map</h4>\n<p>Bahan :</p>\n<p>&gt; python 2.6.x atau 2.7.x</p>\n<p>&gt; install library python <a href=\"http://docs.python-requests.org/en/master/\">requests</a></p>\n<p>&gt; clone dari project <a href=\"https://github.com/sqlmapproject/sqlmap\">https://github.com/sqlmapproject/sqlmap</a></p>\n<p>Kalau udah siap semua coba jalankan perintah <strong>python sqlmap.py</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/422/1*nVJDn2mwzrH29ifFmwqnZA.png\"></figure><p>lalu ada beberapa cara untuk mendefinisikan fungsi/ URL yang lemah :</p>\n<ol>\n<li>berupa inputan dari user</li>\n<li>untuk method GET jika menggunakan petik satu ( ‘ ) akan muncul error mysql seperti <strong>localhost/?parent_id=91&amp;v=portal&amp;page=&amp;id=93'` </strong>artinya fungsi ini ada potensi lemah</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/993/1*O7zH7gSSzmdayn4UBs08XA.png\"><figcaption>contoh jika menggunakan petik satu</figcaption></figure><p>3. untuk method POST masukkan variabel yang tidak sesuai dengan tipe data contoh memasukkan huruf pada nomor telepon</p>\n<p>4. Jika muncul Error SQL Syntax artinya fungsi/ URL ini berpotensi lemah, save URL nya.</p>\n<p>Jika sudah mempunyai URL lemah tersebut, selanjutnya adalah memasukkan URL lemah tersebut ke sqlmap tanpa petik dengan perintah</p>\n<pre>python sqlmap.py -u \"<strong>localhost/?parent_id=91&amp;v=portal&amp;page=&amp;id=93\"</strong></pre>\n<p>Selanjutnya tools ini akan melakukan pengecekan tipe DBMS dan melakukan serangan serangan dari semua jenis sql injection, SQLMap akan melakukan beberapa pertanyaan simple dan selanjutnya jika berhasil maka akan muncul seperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/847/1*Sg2M2qomvv7rUG6kM51Lrg.png\"><figcaption>Hasil jika berhasil terdapat informasi “injectable”</figcaption></figure><p>Kotak merah artinya fungsi/ URL tersebut jelas jelas lemah, dan kotak hijau adalah query yang digunakan untuk menemukan kelemahan. Simple ko!! silahkan dicoba,</p>\n<h4>Pencegahan SQL Injection</h4>\n<p>Paling efektif di antara pencegahan SQL Injection adalah menggunakan <strong>prepared statement</strong> untuk di setiap query yang akan di execute, karena setiap prepared statement query tidak akan langsung di eksekusi oleh database server dipisah antara variabel yang di input dan query yang akan di eksekute, menggunakan prepared statement akan mengecilkan kemungkinan hacker melakukan serangan sql injection.</p>\n<pre>$stmt = $dbConnection-&gt;prepare('SELECT * FROM employees WHERE name = ?');<br>$stmt-&gt;bind_param('s', $name); // 's' specifies the variable type =&gt; 'string'<br><br>$stmt-&gt;execute();<br><br>$result = $stmt-&gt;get_result();<br>while ($row = $result-&gt;fetch_assoc()) {<br>    // do something with $row<br>}</pre>\n<p>Untungnya banyak framework developement semacam laravel, express dan sebagainya yang sudah menangkal basic SQL Injection, tapi masih banyak cara untuk pencegahan sql injection, ini hanyalah salah satu dari pencegahan, karena serangan belum tentu itu itu saja.</p>\n<h3>Tidak menggunakan HTTPS</h3>\n<p>Sudah menjadi hal umum update terbesar chrome di tahun ini adalah menandakan website yang <a href=\"https://www.theregister.co.uk/2018/07/03/google_chrome_http/\">tidak menggunakan HTTPS akan di anggap tidak aman</a>, hal ini menjelaskan bahwa HTTP bukanlah protokol yang aman lagi untuk melakukan transport data karena dengan menggunakan http data yang dikirimkan dapat di ekstrak dan di manipulasi oleh orang lain dalam satu jaringan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/723/1*Hf0cohVzMqNe6HVyXV94vA.png\"><figcaption>HTTP ibarat website telanjang, dalam satu jaringan masih bisa di ambil datanya</figcaption></figure><p>HTTPS menyediakan user melakukan transportasi data melewati jalur yang aman, secara teknikal data yang dikirimkan ke HTTPS akan di encrypt supaya data tidak bisa di baca secara mentah mentah. Biarpun HTTPS itu banyak yang mahal, jangan minder bahkan masih banyak website pemerintah yang tidak menggunakan HTTPS, wajar website pemerintah lebih sering dijadikan bahan eksperimen hacker. Tidak telat buat kalian web developer untuk segera pasang HTTPS karena sudah banyak HTTPS gratis seperti letsencrypt ataupun cloudflare.</p>\n<h3>Password</h3>\n<p>Paling sering hacker memanfaatkan password umum untuk meretas akun orang lain, karena password adalah hal sederhana yang pada dasarnya manusia sulit untuk diingat,</p>\n<p>Kadang juga web developer lupa dengan menyimpan password sensitif ke dalam aplikasi, yang seharusnya tidak boleh contoh seperti di github jika mencari commit dengan keyword “hapus password” akan muncul banyak commit berupa credential database ataupun server</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/752/1*bg_qmqChjnZtWI8Ym9ayDw.png\"><figcaption>silly commit</figcaption></figure><blockquote>Cara paling aman menyimpan secret key ke dalam aplikasi adalah dengan tidak menyimpan secret key ke dalam aplikasi</blockquote>\n<p>Sebenarnya mudah, cukup jangan menyimpan secret key ke dalam aplikasi, bisa dipisahkan menggunakan variable enviroment atau di encrypt supaya membuat bingung orang usil.</p>\n<h3>File Upload</h3>\n<p>Serangan terakhir yang biasanya hacker paling cari kalau sudah menemukan akses dari aplikasinya adalah file upload supaya hacker bisa menanam backdoor dan akses aplikasi/ server secara mudah. Nah sebelumnya kita cari tau dulu cara hacker hack file upload ini</p>\n<p><strong>Manipulasi File Signature File Type</strong></p>\n<p>Sudah umum buat di bagian file upload untuk mengkhususkan file yang akan diupload secara spesifik, khusus dokumen (pdf, doc,dll), khusus gambar (png, jpeg, svg) biasanya hacker akan melakukan manipulasi tipe data juga pada bagian header atau<a href=\"https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format\"> file format structure</a> . Setiap file terdapat format yang dibaca secara binary dan file format ini</p>\n<p>Contohnya salah satunya file JPG dia pada header biasanya terdapat header ÿØÿà..JFIF.. dengan alamat FF D8 FF E0 00 10 4A 46 49 46 00 01</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/618/1*cL2avBrZA4OPhy17NRx7_w.png\"></figure><p>Untuk png dengan binary .PNG... dengan alamat89 50 4E 47 0D 1A 0Aseperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/553/1*Y-T5JEcY7W6Op4g61ia0WQ.png\"></figure><p>Dengan cukup menambahkan header ke file php tersebut hacker secara mudah memanipulasi dan file tersebut akan terdeteksi sebagai JPG/ PNG</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/514/1*QLqn9p6LIkU4xjs-OPNfbw.png\"></figure><p>Oke dalam kasus ini biasanya hacker menggunakan File upload jenis Whitelist, artinya biasanya developer PHP menggunakan fungsi get_mime_type($filename) dengan mime yang dibutuhkan image/jpeg dengan fungsi tersebut file yang di manipulasi akan tetap muncul image/jpeg</p>\n<h4>Manipulasi EXIF key</h4>\n<p>Pada file gambar terdapat EXIF ( Exchangeable Image File Format ) untuk mendefinisikan file format pada gambar biasanya berupa lokasi file diambil, resolusi file dan sebagainya. Pada PHP disaat upload file dan filenya dibaca akan dibaca pada bagian EXIF nya juga, dan ada cara hacker menyisipkan php execution pada EXIF nya seperti berikut</p>\n<pre>exiftool -Comment='&lt;?php echo \"&lt;pre&gt;\"; system($_GET['cmd']); ?&gt;' lo.jpg</pre>\n<p>Dengan EXIF ini code php tersebut akan dieksekusi</p>\n<p><strong>Solusi File Upload</strong></p>\n<p>Semua tujuan dari file upload itu semua adalah shell execution atau dalam artian lain melakukan eksekusi perintah pada operating sistem tersebut, sebenernya sesederhana disable eksekusi shell pada PHP atau engine web lainnya pada php bisa menggunakan <a href=\"https://www.cyberciti.biz/faq/linux-unix-apache-lighttpd-phpini-disable-functions/\">https://www.cyberciti.biz/faq/linux-unix-apache-lighttpd-phpini-disable-functions/</a></p>\n<blockquote>Saya merasa kurang dan masih kena hacking :(</blockquote>\n<p>Banyak alternatif nya di internet, kalo saran saya sendiri bisa menggunakan web security checklist untuk developer, bisa cek disini</p>\n<p><a href=\"https://medium.com/@yahya.kimochi/web-developer-security-checklist-920ac4421589\">Web developer security checklist</a></p>\n<h3>Referensi</h3>\n<p><a href=\"https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/\">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\">List of file signatures - Wikipedia</a></p>\n<p><a href=\"http://exif.regex.info/exif.cgi\">http://exif.regex.info/exif.cgi</a></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">Why HTTPS Matters | Web Fundamentals | Google Developers</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=34dd9e66546d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/5-kelemahan-web-apps-yang-sering-hacker-abuse-34dd9e66546d\">5 kelemahan web apps yang sering hacker abuse</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>Sering kali web developer baru menyadari betapa pentingnya keamanan setelah web atau aplikasinya sudah diretas atau mendapat ancaman dari hacker berupa email. Kesulitan dari pengembangan pun mulai meningkat karena yang harus di tangkis adalah lubang keamanan, dua hal yang berbeda antara <strong>lubang </strong>yang biasa disebut bug<strong> </strong>dimana sebuah kesalahan teknikal ataupun bisnis yang menyebabkan munculnya error pada aplikasi yang biasanya muncul dengan ukuran seperti High, Medium, Low dan <strong>keamanan </strong>yang diukur dari tingkat resiko yang muncul dibagi seperti Confidential (kerahasiaan), Integrity(keutuhan) dan Availability (ketersediaan).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/662/0*sadHMdVESMNVtNg9.jpg\"><figcaption>hacker sexually attracted to your vulnerable app</figcaption></figure><p>Penulis ingin membagikan beberapa pro tips untuk para web developer dalam mengamankan web aplikasi kalian supaya kelemahan kelemahan yang biasa hacker manfaatkan bisa terlebih dahulu ditemukan, dan di atasi lebih awal. Terdapat 5 kelemahan umum yang biasa hacker manfaatkan diantaranya :</p>\n<h3>Vulnerable Packages</h3>\n<blockquote>npm packages over 375000, 70000 publisher, ~14% carry known vulnerabilities — snyk.io</blockquote>\n<p>Kelemahan paling umum yang biasa hacker manfaatkan, <em>outdated</em>, <em>unsupported, vulnerable </em>libraries/packages/dependencies…..</p>\n<p>Jangan pernah menganggap remeh vulnerable packages ini karena komunitas hacker sendiri mereka mereka pasti akan merilis jika menemukan kelemahan, dan akan di sebar lewat komunitas.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KcuGEG6-oJOwIMHm42fn8w.png\"></figure><p>Bahkan terdapat komunitas hacker sendiri yang menjual exclusive bug seperti bug nya twitter, facebook maupun instagram.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1009/1*864t9svsp0ULCEg9BLJ1iA.png\"></figure><p>yang harus dilakukan web developer untuk mencegah ini adalah :</p>\n<p>Gunakan package scanner untuk mengetahui kelemahan dari package, banyak sekali pilihan untuk package scanner salah satunya :</p>\n<h4><a href=\"https://docs.npmjs.com/getting-started/running-a-security-audit\">npm audit</a></h4>\n<p>Tools ini sangat membantu developer untuk mengetahui lebih awal jika ada library yang vulnerable, cukup dengan perintah biasa <strong>npm install</strong> nanti muncul peringatan kalau library tersebut terdapat kelemahan dan menyarankan menjalankan <strong>npm audit </strong>(jangan lupa ini menggunakan npm latest bisa langsung update menggunakan <strong>npm install npm@latest -g</strong> )</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/489/1*hBDqSa0h7JpjceDqUKjyWQ.png\"></figure><p>setelah menjalankan npm install, pasti disaraankan untuk menjalankan npm audit, nanti hasilnya seperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZEJvNnl4hHdscJSG.png\"></figure><p>untuk fixing bisa update aja versi library nya atau menggunakan perintah <strong>npm audit fix</strong> buat auto fixing yang vulnerable, mungkin ada beberapa library yang ga bisa di fixing biasnaya dikarenakan library nya sudah tidak di kembangkan lagi, atau harus update manual library nya.</p>\n<h4><a href=\"https://snyk.io/\">snyk.io</a></h4>\n<p>Ini bukan tools melainkan Website yang menyediakan jasa untuk melakukan scanning library, menggunakan website ini dia cukup general karena dia bisa scanning untuk multi language. Cukup dengan menambahkan project yang ada di berbagai repository (github, gitlab, dll) nanti dia bakal scanning library sekarang yang dipakai. Kelebihannya untuk menggunakan snyk.io ini kita bisa melakukan daily scanning, bisa liat detail permasalahan dan rekomendasinya terutama gratis, penulis sangat menyarankan menggunakan ini 👍</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/781/1*jvUP95hcIgVFE2VeHbAO4Q.png\"></figure><h4><a href=\"https://blog.github.com/2017-11-16-introducing-security-alerts-on-github/\">github security alert</a></h4>\n<p>Buat developer github mungkin ini sudah tidak asing lagi, untuk enable fitur ini bisa cek pada tab Insight, lalu bagian menu dependency graph ada fitur untuk memulai cek dependencies security. Biasanya setiap minggu jika ditemukan vulnerability pada dependencies langsung di peringatkan lewat email.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/574/1*JQaUKWhVSwTX6_YOaT2cpg.png\"><figcaption>Github memberikan peringatan tentang dependencies yang lema</figcaption></figure><p>Banyak sekali tools tools pendukung untuk cek dependencies dari lubang keamanan, contoh lainnya untuk composer libraries bisa di lakukan menggunakan tools <a href=\"https://security.sensiolabs.org/check\">sensiolabs</a> (<a href=\"https://security.sensiolabs.org/check\">web </a>/ <a href=\"https://github.com/sensiolabs/security-checker\">github </a>).</p>\n<h3>Injeksi</h3>\n<p>OWASP Top 10 Vulnerability menyebutkan injeksi adalah serangan yang paling sering hacker manfaatkan, dalam arti lain serangan yang paling di favoritkan oleh hacker, disisi mudah di gunakan, tipe serangannya juga sangat banyak bahkan <a href=\"https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/\">varian </a>untuk setiap masing masing sql server (mysql, postgres, oracle). Penulis akan berbagi tips untuk handle jenis serangan Injection yang umum, salah satunya :</p>\n<h4>SQL Injection</h4>\n<p>Arti sederhananya adalah query dari data yang terstruktur dan dimanfaatkan hacker untuk mendapatkan informasi lebih, contohnya seperti pada query berikut</p>\n<pre>select judul, highlight, deskripsi, tag from tbl_artikel where id = 1;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/553/1*PQlBIz9RzK0JBYKYUoD6Sw.png\"><figcaption>hasilnya</figcaption></figure><p>sederhana ko, anggap saja 1 adalah variabel input, jadi kalau angka tersebut di ganti ganti artinya akan menampilkan data berita dengan spesifik id, simple kan. Nah jika “ 1 “ adalah inputan dari user, artinya user bisa menambahkan query kan, anggap lah jika user tersebut memasukkan query berikut setelah inputan.</p>\n<pre><strong>union select 1,concat(table_name),3,4 from information_schema.tables where table_schema<br>=\"CRACKING\";</strong></pre>\n<p>jika di gabungkan menjadi begini</p>\n<pre>select <br> judul, highlight, deskripsi, tag <br>from tbl_artikel <br>where id = 1 <strong>union select 1,concat(table_name),3,4 from information_schema.tables where table_schema<br>=\"CRACKING\";</strong></pre>\n<p>maka hasilnya akan memberitahukan semua list tabel yang tersedia pada database “CRACKING” (contoh database yang dicoba)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/540/1*7wGv8Eq2DT7Nk2jfUwL0BQ.png\"><figcaption>hasilnya</figcaption></figure><p>artinya memungkinkan hacker melakukan ekstrak data lainnya pada query tersebut contoh lainnya pada query ini untuk menampilkan username dan password pada tabel</p>\n<pre>select judul, highlight, deskripsi, tag from tbl_artikel where id = 1 union select 1,concat(username,0x3a,<br>password),3,4 from tbl_user;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/542/1*BULmzjJzS-yrvASQxTBCRw.png\"></figure><p>Mungkin ribet ya, simple nya gini, kalo nyatanya bisa seperti ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/915/1*KimkYKKuir6u4G1sFWQf_Q.png\"></figure><p>Serangan SQL Injection ini paling umum, paling banyak varian nya, paling random banget muncul nya, bahkan banyak tools tools hacking yang sesimple masukkan URL dan langsung ekstrak database salah satunya Havij (one click hack, paling sering dipake noob hacker buat merasa lebih powerfull), BFSQL, paling the best itu <a href=\"http://sqlmap.org/\">SQLMap</a>. Buat kawan kawan yang penasaran dan pengen coba sendiri, saya saranin menggunakan SQLMap</p>\n<p>#<em>Attention disini penulis share tentang SQLMap khusus untuk testing aplikasi kalian sendiri buat kepentingan keamanan, kalo yang lain tanggung jawab masing masing</em></p>\n<h4>Test kelemahan aplikasi menggunakan SQL Map</h4>\n<p>Bahan :</p>\n<p>&gt; python 2.6.x atau 2.7.x</p>\n<p>&gt; install library python <a href=\"http://docs.python-requests.org/en/master/\">requests</a></p>\n<p>&gt; clone dari project <a href=\"https://github.com/sqlmapproject/sqlmap\">https://github.com/sqlmapproject/sqlmap</a></p>\n<p>Kalau udah siap semua coba jalankan perintah <strong>python sqlmap.py</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/422/1*nVJDn2mwzrH29ifFmwqnZA.png\"></figure><p>lalu ada beberapa cara untuk mendefinisikan fungsi/ URL yang lemah :</p>\n<ol>\n<li>berupa inputan dari user</li>\n<li>untuk method GET jika menggunakan petik satu ( ‘ ) akan muncul error mysql seperti <strong>localhost/?parent_id=91&amp;v=portal&amp;page=&amp;id=93'` </strong>artinya fungsi ini ada potensi lemah</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/993/1*O7zH7gSSzmdayn4UBs08XA.png\"><figcaption>contoh jika menggunakan petik satu</figcaption></figure><p>3. untuk method POST masukkan variabel yang tidak sesuai dengan tipe data contoh memasukkan huruf pada nomor telepon</p>\n<p>4. Jika muncul Error SQL Syntax artinya fungsi/ URL ini berpotensi lemah, save URL nya.</p>\n<p>Jika sudah mempunyai URL lemah tersebut, selanjutnya adalah memasukkan URL lemah tersebut ke sqlmap tanpa petik dengan perintah</p>\n<pre>python sqlmap.py -u \"<strong>localhost/?parent_id=91&amp;v=portal&amp;page=&amp;id=93\"</strong></pre>\n<p>Selanjutnya tools ini akan melakukan pengecekan tipe DBMS dan melakukan serangan serangan dari semua jenis sql injection, SQLMap akan melakukan beberapa pertanyaan simple dan selanjutnya jika berhasil maka akan muncul seperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/847/1*Sg2M2qomvv7rUG6kM51Lrg.png\"><figcaption>Hasil jika berhasil terdapat informasi “injectable”</figcaption></figure><p>Kotak merah artinya fungsi/ URL tersebut jelas jelas lemah, dan kotak hijau adalah query yang digunakan untuk menemukan kelemahan. Simple ko!! silahkan dicoba,</p>\n<h4>Pencegahan SQL Injection</h4>\n<p>Paling efektif di antara pencegahan SQL Injection adalah menggunakan <strong>prepared statement</strong> untuk di setiap query yang akan di execute, karena setiap prepared statement query tidak akan langsung di eksekusi oleh database server dipisah antara variabel yang di input dan query yang akan di eksekute, menggunakan prepared statement akan mengecilkan kemungkinan hacker melakukan serangan sql injection.</p>\n<pre>$stmt = $dbConnection-&gt;prepare('SELECT * FROM employees WHERE name = ?');<br>$stmt-&gt;bind_param('s', $name); // 's' specifies the variable type =&gt; 'string'<br><br>$stmt-&gt;execute();<br><br>$result = $stmt-&gt;get_result();<br>while ($row = $result-&gt;fetch_assoc()) {<br>    // do something with $row<br>}</pre>\n<p>Untungnya banyak framework developement semacam laravel, express dan sebagainya yang sudah menangkal basic SQL Injection, tapi masih banyak cara untuk pencegahan sql injection, ini hanyalah salah satu dari pencegahan, karena serangan belum tentu itu itu saja.</p>\n<h3>Tidak menggunakan HTTPS</h3>\n<p>Sudah menjadi hal umum update terbesar chrome di tahun ini adalah menandakan website yang <a href=\"https://www.theregister.co.uk/2018/07/03/google_chrome_http/\">tidak menggunakan HTTPS akan di anggap tidak aman</a>, hal ini menjelaskan bahwa HTTP bukanlah protokol yang aman lagi untuk melakukan transport data karena dengan menggunakan http data yang dikirimkan dapat di ekstrak dan di manipulasi oleh orang lain dalam satu jaringan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/723/1*Hf0cohVzMqNe6HVyXV94vA.png\"><figcaption>HTTP ibarat website telanjang, dalam satu jaringan masih bisa di ambil datanya</figcaption></figure><p>HTTPS menyediakan user melakukan transportasi data melewati jalur yang aman, secara teknikal data yang dikirimkan ke HTTPS akan di encrypt supaya data tidak bisa di baca secara mentah mentah. Biarpun HTTPS itu banyak yang mahal, jangan minder bahkan masih banyak website pemerintah yang tidak menggunakan HTTPS, wajar website pemerintah lebih sering dijadikan bahan eksperimen hacker. Tidak telat buat kalian web developer untuk segera pasang HTTPS karena sudah banyak HTTPS gratis seperti letsencrypt ataupun cloudflare.</p>\n<h3>Password</h3>\n<p>Paling sering hacker memanfaatkan password umum untuk meretas akun orang lain, karena password adalah hal sederhana yang pada dasarnya manusia sulit untuk diingat,</p>\n<p>Kadang juga web developer lupa dengan menyimpan password sensitif ke dalam aplikasi, yang seharusnya tidak boleh contoh seperti di github jika mencari commit dengan keyword “hapus password” akan muncul banyak commit berupa credential database ataupun server</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/752/1*bg_qmqChjnZtWI8Ym9ayDw.png\"><figcaption>silly commit</figcaption></figure><blockquote>Cara paling aman menyimpan secret key ke dalam aplikasi adalah dengan tidak menyimpan secret key ke dalam aplikasi</blockquote>\n<p>Sebenarnya mudah, cukup jangan menyimpan secret key ke dalam aplikasi, bisa dipisahkan menggunakan variable enviroment atau di encrypt supaya membuat bingung orang usil.</p>\n<h3>File Upload</h3>\n<p>Serangan terakhir yang biasanya hacker paling cari kalau sudah menemukan akses dari aplikasinya adalah file upload supaya hacker bisa menanam backdoor dan akses aplikasi/ server secara mudah. Nah sebelumnya kita cari tau dulu cara hacker hack file upload ini</p>\n<p><strong>Manipulasi File Signature File Type</strong></p>\n<p>Sudah umum buat di bagian file upload untuk mengkhususkan file yang akan diupload secara spesifik, khusus dokumen (pdf, doc,dll), khusus gambar (png, jpeg, svg) biasanya hacker akan melakukan manipulasi tipe data juga pada bagian header atau<a href=\"https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format\"> file format structure</a> . Setiap file terdapat format yang dibaca secara binary dan file format ini</p>\n<p>Contohnya salah satunya file JPG dia pada header biasanya terdapat header ÿØÿà..JFIF.. dengan alamat FF D8 FF E0 00 10 4A 46 49 46 00 01</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/618/1*cL2avBrZA4OPhy17NRx7_w.png\"></figure><p>Untuk png dengan binary .PNG... dengan alamat89 50 4E 47 0D 1A 0Aseperti berikut</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/553/1*Y-T5JEcY7W6Op4g61ia0WQ.png\"></figure><p>Dengan cukup menambahkan header ke file php tersebut hacker secara mudah memanipulasi dan file tersebut akan terdeteksi sebagai JPG/ PNG</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/514/1*QLqn9p6LIkU4xjs-OPNfbw.png\"></figure><p>Oke dalam kasus ini biasanya hacker menggunakan File upload jenis Whitelist, artinya biasanya developer PHP menggunakan fungsi get_mime_type($filename) dengan mime yang dibutuhkan image/jpeg dengan fungsi tersebut file yang di manipulasi akan tetap muncul image/jpeg</p>\n<h4>Manipulasi EXIF key</h4>\n<p>Pada file gambar terdapat EXIF ( Exchangeable Image File Format ) untuk mendefinisikan file format pada gambar biasanya berupa lokasi file diambil, resolusi file dan sebagainya. Pada PHP disaat upload file dan filenya dibaca akan dibaca pada bagian EXIF nya juga, dan ada cara hacker menyisipkan php execution pada EXIF nya seperti berikut</p>\n<pre>exiftool -Comment='&lt;?php echo \"&lt;pre&gt;\"; system($_GET['cmd']); ?&gt;' lo.jpg</pre>\n<p>Dengan EXIF ini code php tersebut akan dieksekusi</p>\n<p><strong>Solusi File Upload</strong></p>\n<p>Semua tujuan dari file upload itu semua adalah shell execution atau dalam artian lain melakukan eksekusi perintah pada operating sistem tersebut, sebenernya sesederhana disable eksekusi shell pada PHP atau engine web lainnya pada php bisa menggunakan <a href=\"https://www.cyberciti.biz/faq/linux-unix-apache-lighttpd-phpini-disable-functions/\">https://www.cyberciti.biz/faq/linux-unix-apache-lighttpd-phpini-disable-functions/</a></p>\n<blockquote>Saya merasa kurang dan masih kena hacking :(</blockquote>\n<p>Banyak alternatif nya di internet, kalo saran saya sendiri bisa menggunakan web security checklist untuk developer, bisa cek disini</p>\n<p><a href=\"https://medium.com/@yahya.kimochi/web-developer-security-checklist-920ac4421589\">Web developer security checklist</a></p>\n<h3>Referensi</h3>\n<p><a href=\"https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/\">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\">List of file signatures - Wikipedia</a></p>\n<p><a href=\"http://exif.regex.info/exif.cgi\">http://exif.regex.info/exif.cgi</a></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">Why HTTPS Matters | Web Fundamentals | Google Developers</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=34dd9e66546d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/5-kelemahan-web-apps-yang-sering-hacker-abuse-34dd9e66546d\">5 kelemahan web apps yang sering hacker abuse</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Panduan Memulai Pengembangan Web Modern (PWA)",
            "pubDate": "2018-08-27 08:29:02",
            "link": "https://medium.com/wwwid/panduan-memulai-pengembangan-web-modern-pwa-1e9d334fad14?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/1e9d334fad14",
            "author": "Yohan Totting",
            "thumbnail": "https://cdn-images-1.medium.com/max/743/0*uMo-mX9NlmrxyvSx.png",
            "description": "\n<p>Panduan ini akan menjadi dasar bagaimana sebuah <em>web modern</em> atau biasa disebut <a href=\"https://developers.google.com/web/progressive-web-apps/\"><em>Progressive Web App</em>(PWA)</a> dikembangkan. Karena sebagian besar permasalahan web pada saat sudah berjalan adalah arsitektur yang kurang baik serta perancangan awal yang tidak disesuaikan dengan kebutuhan pengguna. Panduan ini akan memberikan gambaran bagaimana arsitektur dan perancangan sebuah aplikasi modern web tanpa menggunakan framework apapun, namun tetap bisa diterapkan di framework apapun.</p>\n<h3><strong>Kriteria Modern Web</strong></h3>\n<p>Untuk kebutuhan website modern yang fokus pada kebutuhan pengguna, makan kita mendefinisikan modern web sebagai berikut:</p>\n<p><strong>Aman</strong></p>\n<p>Menggunakan protokol HTTPS sehingga menjamin konten tidak diubah di jaringan (biasanya terinjeksi iklan oleh operator, atau script berbahaya oleh virus atau hacker). Serta proses transmisi data dari pengguna ke <em>server</em> tidak dipindai oleh pihak yang tidak diinginkan. Misalnya proses input data kartu kredit di <em>website e-commerce</em>.</p>\n<p><strong>Cepat</strong></p>\n<p>Dapat dimuat dan digunakan dalam waktu 5 detik di jaringan 3G dengan spesifikasi perangkat mobile menengah.</p>\n<p><strong>Stabil</strong></p>\n<ul>\n<li>Dapat diakses walaupun kondisi jaringan sedang <em>offline</em> atau sangat lambat.</li>\n<li>Bisa beradaptasi dengan spesifikasi dan kondisi perangkat serta jaringan sehingga tetap nyaman digunakan walaupun diperangkat dengan spesifikasi rendah dan jaringan yang lambat.</li>\n</ul>\n<p><strong>Membuat betah dan nyaman</strong></p>\n<ul>\n<li>Tampilan yang nyaman diakses dari ukuran layar perangkat <em>mobile</em>, <em>tablet</em>, atau <em>desktop</em>.</li>\n<li>Mampu memberikan respon terhadap interaksi (klik mouse atau tap) secara instant (kurang dari 200ms)<br>Tidak melakukan sesuatu yang menganggu kenyamanan pengguna dalam mengakses konten atau layanan.</li>\n</ul>\n<p><strong>Terintegrasi</strong></p>\n<ul>\n<li>Memberikan fungsi yang dibutuhkan layaknya sebuah aplikasi seperti notifikasi, login dengan sidik jari, dan lainnya.</li>\n<li>Bisa diakses dengan mudah lewat layar utama hanya dengan menekan <em>icon</em>, tanpa harus mengetik alamat pada <em>browser</em>.</li>\n<li>Memudahkan pengguna dalam membagikan konten tanpa harus <em>copy paste </em>alamat URL konten.</li>\n</ul>\n<p>Daftar lebih detail bisa dilihat di <a href=\"https://developers.google.com/web/progressive-web-apps/checklist\">checklist PWA ini</a>.</p>\n<h3><strong>Menentukan Arsitektur</strong></h3>\n<p>Berdasarkan kriteria modern web di atas, maka arsitektur akan berperan penting untuk mencapai hal di atas. Karena ada beberapa yang tidak mungkin dicapai tanpa penerapan arsitektur yang tepat. Dan arsitektur yang mendukung semua hal di atas adalah arsitektur <em>Application Shell</em> atau biasa disebut <em>Single Page Application</em>(SPA). SPA adalah arsitektur yang memungkinkan kita berpindah halaman di web tanpa harus melakukan proses loading halaman secara keseluruhan. Pada saat pengguna berpindah halaman, maka hanya konten di tengah halaman saja yang akan diperbaharui. Sedangkan bagian <em>header</em> yang biasa memuat <em>logo, menu</em>, dan <em>search bar</em> biasanya tidak berubah. Terkadang elemen navigasi lainnya yang tidak berubah juga adalah <em>footer</em>(bagian bawah halaman), dan <em>sidebar/drawer</em> (bagian samping yang biasa menjadi navigasi di perangkat <em>mobile</em>).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/743/0*uMo-mX9NlmrxyvSx.png\"><figcaption>Single Page Application dengan aristektur application shell (sumber: <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">https://developers.google.com/web/fundamentals/architecture/app-shell</a>)</figcaption></figure><p>Pilihan arsitektur SPA ini biasanya kurang familiar dengan pengembang PHP, Python, Ruby atau server side scripting lainnya karena biasanya pengembang biasanya secara <em>default</em> akan menggunakan arsitektur <em>Multi Page Application</em>(MPA). MPA adalah arsitektur di mana aplikasi web berpindah halaman dengan melakukan loading halaman keseluruhan termasuk <em>header</em>, <em>footer</em>, dan <em>sidebar</em> halaman <em>web</em> walaupun bagian tersebut masih sama. Kekurangan arsitektur ini adalah pengguna akan melihat jeda perpindahan halaman, karena <em>browser</em> akan menimpa keseluruhan halaman yang tampil dengan halaman baru. Berbeda dengan arsitektur SPA yang hanya mengganti bagian konten tengah saja.</p>\n<p>Karena itu, bagi pengembang yang menggunakan bahasa pemrograman <em>server side scripting</em>, pertimbangkan untuk memisahkan arsitektur aplikasi di mana aplikasi <em>server side script</em> berfungsi untuk mengirimkan data atau hanya untuk untuk proses <em>rendering</em> pertama. Namun selanjutnya untuk navigasi atau perpindahan antar halaman akan ditangani oleh<em> client side</em>, atau JavaScript di halaman <em>web</em>.</p>\n<p>Untuk memudahkan, beberapa <em>library/framework</em> populer sebenarnya sudah menggabungkan konsep SPA dengan <em>server side rendering</em> beberapa contohnya adalah:</p>\n<ul>\n<li>\n<a href=\"https://nuxtjs.org/\">Nuxt</a> untuk pengguna <a href=\"https://vuejs.org/\">VueJS</a>\n</li>\n<li>\n<a href=\"https://reactjs.org/docs/react-dom-server.html\">React DOM</a> untuk pengguna <a href=\"https://reactjs.org/\">ReactJS</a>\n</li>\n<li>Kombinasi antara <a href=\"https://laravel.com/\">Laravel</a> + <a href=\"https://laravel.com/docs/5.6/mix\">Laravel Mix </a>+ <a href=\"https://vuejs.org/\">VueJS</a>\n</li>\n</ul>\n<p>Terkait bagaimana penggunaan setiap framework, silakan mengecek dokumentasi masing-masing.</p>\n<h3><strong>Persiapan</strong></h3>\n<p>Sebelum memulai pengembangan ada baiknya menyiapkan beberapa hal penting yang akan memudahkan pengembang.</p>\n<p><strong>Tools Pengembangan</strong></p>\n<p>Tool pengembangan tentu menjadi pilihan yang akan memudahkan dalam proses pengembangan. Di panduan ini tidak akan membahas terlalu jauh, karena biasanya setiap pilihan framework sudah memiliki <em>tool</em> pengembangan sendiri. Dan setiap pengembang juga sudah memiliki <em>code editor</em> favorit. Tapi beberapa hal yang mungkin bisa membantu dalam pengembangan web modern adalah:</p>\n<ul>\n<li>\n<em>Web server</em> yang mendukung SPA, dapat membuka aplikasi SPA tanpa harus mengakses <em>root</em>. Biasanya ini sama dengan penyetelan <em>friendly</em> URL di MPA, dimana semua URL di <em>website</em> tersebut disetel untuk mengarah ke <em>file index </em>bila file tidak ditemukan.</li>\n<li>\n<em>Browser debugging tool </em>yang mendukung <em>responsive layout</em>, <em>debugging service worker</em>, <em>cache storage</em>, <em>performance</em>, <em>network</em>, dan lainnya. <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">Chrome Dev Tools</a> bisa menjadi pilihan awal bila belum memiliki preferensi.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SaB-VYfPPz_LUm89kAFIDQ.png\"><figcaption>Tampilan proses debugging yang secara default selalu menampilkan mobile layout di Chrome Dev Tools.</figcaption></figure><ul><li>\n<em>Build tools</em> yang digunakan untuk mem-<em>bundle</em> semua aset aplikasi web untuk siap di-<em>deploy</em> ke server. <em>Build tools</em> yang popular saat ini adalah Webpack dan Parcel. Lebih jauh terkait<em> build tools</em> akan dibahas terpisah.</li></ul>\n<p><strong>Target Dasar Pengguna</strong></p>\n<p>Tentukan kira-kira target dasar pengguna <em>website</em> yang akan dibuat seperti apa. Dalam menentukan kita bisa melakukan pengecekan pada beberapa referensi dan yang perlu diperhatikan dari sisi pengguna adalah:</p>\n<ul>\n<li>Jenis perangkat yang digunakan (<em>mobile, tablet,</em> atau <em>desktop</em>).</li>\n<li>Spesifikasi perangkat (spesifikasi rendah, menengah, atau tinggi).</li>\n<li>Kondisi jaringan (Wifi, 4G, 3G, atau 2G) termasuk apakah kemungkinan <em>offline</em> cukup tinggi, misalnya akan digunakan di gunung atau di hutan.</li>\n<li>Jenis atau versi <em>browser</em> yang digunakan oleh pengguna, apakah pengguna menggunakan <em>modern browsers</em>(Chrome, Firefox, Safari, Edge,Opera, dan lain-lain) yang selalu diperbaharui, atau tidak.</li>\n</ul>\n<p>Terkadang kita bisa mengasumsikan faktor-faktor di atas berdasarkan jenis websitenya. Sebagai contoh, bila sifatnya adalah profil perusahaan maka kita berasumsi perangkat <em>mobile, tablet</em>, dan <em>desktop</em> spesifikasi menengah dengan jaringan 3G. Yang sering jadi kesalahan adalah beberapa pengembang fokus pada desktop pada saat mengembangkan website profil perusahaan karena pada saat presentasi ke klien, memang menggunakan laptop dan wifi. Tapi pada saat klien ingin menunjukkan ke partner pada saat ketemu di <em>event</em>, mereka menggunakan perangkat <em>mobile</em> di jaringan 3G yang padat pengguna, dan klien tidak bisa menunjukkan profil perusahaannya karena <em>layout</em> berantakan di <em>mobile</em>, atau terlalu berat karena di <em>mobile</em>, atau bahkan tidak tampil karena di jaringan 3G padat dan lambat. Jadi pastikan kita memahami kapan aplikasi web akan digunakan, perangkat apa, dan di jaringan apa.</p>\n<p><strong>Tentukan Sumber Daya Kritis</strong></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\">Sumber daya kritis</a> di aplikasi web adalah file yang dibutuhkan oleh sebuah web untuk dapat menampilkan sesuatu di layar dengan baik. Bila file ini tidak terunduh semua, maka browser tidak akan dapat menampilkan sesuatu di layar. File ini biasanya terdiri dari:</p>\n<ul>\n<li>HTML dokumen halaman yang akan ditampilkan</li>\n<li>CSS file yang digunakan untuk layout halaman</li>\n<li>JavaScript file yang digunakan untuk menampilkan halaman. Ini biasanya merupakan library UI yang menggunakan JavaScript. Misalnya jQuery UI,</li>\n<li>Fonts, bila tidak diatur dengan benar bisa jadi font membuat konten teks tidak ditampilkan sampai font selesai diunduh.</li>\n</ul>\n<p>Biasanya bila kita menggunakan arsitektur Single Page App(SPA), hal ini biasanya diatur oleh build tool yang kita gunakan misalkan Webpack, atau Parcel. Bila kita tidak menggunakan arsitektur SPA dan memasukkan manual file JavaScript, CSS, dan fonts ke halaman HTML kita maka akan diperlukan proses optimasi yang sebaiknya:</p>\n<ul>\n<li>Ukuran file sekecil mungkin. Ini bisa dicapai dengan membuang spasi, komentar, kode tidak terpakai, dan kompresi <em>file</em>.</li>\n<li>Jumlah file sesedikit mungkin karena ini berhubungan dengan jumlah request. Ini biasanya dibantu build tool untuk mengabungkan aset statis kita ke dalam satu file yang sama.</li>\n<li>\n<em>Round trip</em> atau proses bolak balik meminta ke <em>server</em> seminimal mungkin, ini biasanya terjadi bila ada CSS atau JavaScript yang memanggil atau memasukkan <em>file</em> lain. Contohnya hindari penggunaan import di file CSS. Usahakan hanya terjadi satu round trip dimana file HTML yang menjadi referensi file mana saja yang dibutuhkan untuk menampilkan sesuatu di layar.</li>\n</ul>\n<p>Jadi di awal pengembangan, silakan tentukan berapa file kritis maksimal dan berapa total ukuran dari file kritis ini. Dan ini bisa dimasukkan dalam anggaran kecepatan yang menjadi topik berikutnya.</p>\n<p><strong>Tentukan Anggaran Kecepatan</strong></p>\n<p>Kecepatan tampil sebuah <em>website</em> sangat bergantung terhadap seberapa besar ukuran <em>file</em> yang dimuat oleh <em>browser</em>, spesifikasi perangkat, dan kecepatan jaringan. Karena itu sebelum kita bisa menentukan anggaran kecepatan website, kita harus menentukan target dasar pengguna seperti yang dijelaskan di atas.</p>\n<p>Kalau kita menetapkan target kecepatan tampil dan bisa digunakan aplikasi <em>web</em> kita pada 5 detik, maka untuk perangkat Android harga 2 jutaan, dan jaringan 3G yang berkisar 400 Kbps perhitungannya akan sebagai berikut:</p>\n<p>1,6 detik akan digunakan untuk <em>DNS lookup</em> dan <em>TLS handshaking</em>.</p>\n<p>Sisa 3,4 detik untuk melakukan <em>download</em> dan pemrosesan keseluruhan file. Dan kalau kita kalkulasi maka di jaringan 400Kbps</p>\n<p>400 Kbps = 50KB/s</p>\n<p>50KB/s * 3,4 = <strong>170KB</strong></p>\n<p>Dengan perhitungan di atas, kita hanya punya anggaran kecepatan sebesar <strong>170KB ukuran <em>file</em> yang bisa dikirim</strong>. Ini belum termasuk waktu pemrosesan, karena setiap <em>file</em> seperti HTML, CSS, JS tentunya setelah di-<em>download</em> perlu di-<em>parsing</em> dan di-<em>compile</em>. Untungnya <em>file</em> seperti HTML, CSS, dan JS bisa dikompres. <strong>Sehingga ukuran 170KB kalau tidak dikompres akan berkisar 0,7 MB atau sekitar 700KB.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*U8PJVNrA_tYADQ6_S4HUYw.png\"><figcaption>Gambaran anggaran kecepatan untuk 170KB menggunakan framework (sumber: <a href=\"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e\">https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e</a>)</figcaption></figure><p>Jadi usahakan dalam membuat aplikasi web yang cepat bila ingin ditampilkan dalam 5 detik, maka hasil build untuk di-<em>deploy</em> ke <em>server</em> maksimal total ukurannya adalah 700KB. Coba kita lihat beberapa perbandingan ukuran file <em>default</em> bila kita menggunakan <em>library</em> atau <em>framework</em>. Di Indonesia, <em>library</em> <a href=\"https://getbootstrap.com/\">Bootstrap</a> adalah salah satu <em>library</em> populer terutama di pengembang PHP. Bila kita menggunakan Bootstrap dalam website kita maka kurang lebih anggaran kecepatan kita menjadi:</p>\n<p><strong>Bootstrap CSS dan JavaScript</strong></p>\n<p>CSS 21KB tanpa dikompres menjadi 138KB</p>\n<p>JS 20KB tanpa dikompres menjadi 69KB</p>\n<p>Total 41KB tanpa dikompres menjadi <strong>207KB</strong></p>\n<p>Kalau cuma menggunakan CSS dan JS files dari Bootstrap kita sudah menghabiskan 200KB dari total 700KB. Sehingga sisa yang bisa kita gunakan adalah sekitar 500KB.</p>\n<p>Lalu kita butuh jQuery karena beberapa plugin atau themes Bootstrap bergantung pada jQuery.</p>\n<p>jQuery v3 30KB tanpa dikompres menjadi 84KB</p>\n<p>Sisa anggaran kecepatan 500–84 = <strong>416KB</strong>.</p>\n<p>Nah dengan demikian bila kita menggunakan library Bootstrap dan jQuery maka sisa ukuran file yang bisa kita gunakan pada load awal aplikasi kita pada saat pertama kali dibuka adalah 416KB saja. Dan ini mungkin akan kombinasi antara HTML, fonts, gambar, serta library lainnya yang mungkin kita gunakan seperti corousel, dialog window, dan lainnya.</p>\n<p><strong>Dengan atau Tanpa <em>Build Tools</em></strong></p>\n<p>Untuk bisa membuat kode yang kita bikin bisa teroptimasi seperti kode yang lebih kecil, dan hanya memuat kode yang dipakai saja di dalam aplikasi bila kita menggunakan <em>library</em> maka kita memerlukan <em>tool</em> untuk membantu kita. Pertanyaannya apakah kita ingin menggunakan <em>build tools</em> atau hanya ingin membuat ukuran <em>file</em> lebih kecil?</p>\n<p>Bila kita tidak ingin terlalu kompleks, pilihannya bisa hanya sekedar melakukan <em>minify</em> pada <em>file</em> kita. Atau bahkan kalau kita tidak ingin melakukan <em>minify</em>, pastikan kita memasang <em>gzip compression</em> di<em> web server </em>kita agar <em>response web server</em> akan selalu terkompresi.</p>\n<p>Namun bila ingin lebih optimal, maka kita memerlukan <em>build tools</em> seperti <a href=\"https://webpack.js.org/\">Webpack</a> atau <a href=\"https://parceljs.org/\">Parcel</a>. <em>Build tools</em> bisa membantu kita untuk melakukan optimasi kode kita seperti:</p>\n<ul>\n<li>\n<em>minify</em> kode dengan membuang kode yang tidak perlu seperti space dan komentar.</li>\n<li>\n<em>tree shaking</em>, atau membuang kode yang tidak terpakai dalam aplikasi kita. Ini berguna bila kita menggunakan library dalam aplikasi kita.</li>\n<li>\n<em>code spliting</em>, atau memisahkan kode kita berdasarkan halaman web sehingga kode yang dimuat di halaman tersebut hanyalah kode yang terpakai di halaman tersebut.</li>\n<li>\n<em>code transform</em>, melakukan transformasi kode kita agar bisa berjalan di versi browser yang kita targetkan.</li>\n</ul>\n<p>Webpack adalah <em>build tool</em> paling populer karena muncul sebelum Parcel. Parcel sendiri mulai populer karena kemudahan penggunaannya yang mengusung <em>zero configuratio</em>n, dalam artian bisa langsung digunakan tanpa konfigurasi. Beberapa hal yang perlu disiapkan pada saat kita memasang <em>build tools</em> sebelum memulai pengembangan adalah:</p>\n<ul><li>Atur <em>build tools</em> agar sesuai dengan anggaran kecepatan yang sudah kita set sebelumnya. Sebagai contoh adalah total ukuran aplikasi kita setelah di-build adalah 170KB sesuai yang kita jabarkan di anggaran kecepatan kita sebelumnya. Kalau kalian menggunakan Webpack, kalian bisa melakukan konfigurasi anggaran kecepatan kalian seperti dijelaskan di <a href=\"https://webpack.js.org/configuration/performance/\">dokumentasi Webpack</a> ini. Untuk <em>tool</em> lain, bila tidak memiliki pengaturan untuk anggaran kecepatan, bisa mengecek dengan <em>manual</em> setiap <em>build</em> pastikan agar hasil <em>build</em> tidak melebihi ukuran maksimal yang sudah diset di anggaran kecepatan.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*lMDGk6-3WT_aF8zl5Z5vXw.jpeg\"><figcaption>Warning bila hasil build melebihi maksimal anggaran kecepatan pada Webpack (sumber: <a href=\"https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d\">https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d</a>)</figcaption></figure><ul><li>Tentukan <a href=\"https://webpack.js.org/concepts/targets/\">target build</a> kita untuk JavaScript versi berapa, apakah ES5 atau ES6. Atau mungkin sesuai versi browser, misalnya 2 versi terakhir dari browser modern. Saya biasanya membuat 2 target build. Satu untuk versi yang bisa jalan di search engine crawler(Googlebot menggunakan Chrome versi 41), dan satu untuk 2 versi terakhir browser.</li></ul>\n<h3><strong>Kesimpulan</strong></h3>\n<p>Dalam mempersiapkan pengembangan web, tentunya kita harus sesuai dengan target pengguna kita. Sehingga kita bisa merancang aplikasi web kita sesuai dengan kondisi pengguna. Sehingga pengguna bisa mengakses dan menggunakan aplikasi web kita dalam kondisi apapun. Dan untuk memudahkan kita dalam proses pengembangan kedepannya maka sangat penting untuk memperhatikan pemilihan arsitektur, dan anggaran kecepatan dalam aplikasi web kita. Karena mengubah 2 hal ini di dalam aplikasi web kita bisa dibilang akan sangat rumit dan terkadang memaksa pengembang untuk memulai pengembangan web dari awal lagi karena tidak dapat memenuhi kebutuhan penggunaannya.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1e9d334fad14\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/panduan-memulai-pengembangan-web-modern-pwa-1e9d334fad14\">Panduan Memulai Pengembangan Web Modern (PWA)</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>Panduan ini akan menjadi dasar bagaimana sebuah <em>web modern</em> atau biasa disebut <a href=\"https://developers.google.com/web/progressive-web-apps/\"><em>Progressive Web App</em>(PWA)</a> dikembangkan. Karena sebagian besar permasalahan web pada saat sudah berjalan adalah arsitektur yang kurang baik serta perancangan awal yang tidak disesuaikan dengan kebutuhan pengguna. Panduan ini akan memberikan gambaran bagaimana arsitektur dan perancangan sebuah aplikasi modern web tanpa menggunakan framework apapun, namun tetap bisa diterapkan di framework apapun.</p>\n<h3><strong>Kriteria Modern Web</strong></h3>\n<p>Untuk kebutuhan website modern yang fokus pada kebutuhan pengguna, makan kita mendefinisikan modern web sebagai berikut:</p>\n<p><strong>Aman</strong></p>\n<p>Menggunakan protokol HTTPS sehingga menjamin konten tidak diubah di jaringan (biasanya terinjeksi iklan oleh operator, atau script berbahaya oleh virus atau hacker). Serta proses transmisi data dari pengguna ke <em>server</em> tidak dipindai oleh pihak yang tidak diinginkan. Misalnya proses input data kartu kredit di <em>website e-commerce</em>.</p>\n<p><strong>Cepat</strong></p>\n<p>Dapat dimuat dan digunakan dalam waktu 5 detik di jaringan 3G dengan spesifikasi perangkat mobile menengah.</p>\n<p><strong>Stabil</strong></p>\n<ul>\n<li>Dapat diakses walaupun kondisi jaringan sedang <em>offline</em> atau sangat lambat.</li>\n<li>Bisa beradaptasi dengan spesifikasi dan kondisi perangkat serta jaringan sehingga tetap nyaman digunakan walaupun diperangkat dengan spesifikasi rendah dan jaringan yang lambat.</li>\n</ul>\n<p><strong>Membuat betah dan nyaman</strong></p>\n<ul>\n<li>Tampilan yang nyaman diakses dari ukuran layar perangkat <em>mobile</em>, <em>tablet</em>, atau <em>desktop</em>.</li>\n<li>Mampu memberikan respon terhadap interaksi (klik mouse atau tap) secara instant (kurang dari 200ms)<br>Tidak melakukan sesuatu yang menganggu kenyamanan pengguna dalam mengakses konten atau layanan.</li>\n</ul>\n<p><strong>Terintegrasi</strong></p>\n<ul>\n<li>Memberikan fungsi yang dibutuhkan layaknya sebuah aplikasi seperti notifikasi, login dengan sidik jari, dan lainnya.</li>\n<li>Bisa diakses dengan mudah lewat layar utama hanya dengan menekan <em>icon</em>, tanpa harus mengetik alamat pada <em>browser</em>.</li>\n<li>Memudahkan pengguna dalam membagikan konten tanpa harus <em>copy paste </em>alamat URL konten.</li>\n</ul>\n<p>Daftar lebih detail bisa dilihat di <a href=\"https://developers.google.com/web/progressive-web-apps/checklist\">checklist PWA ini</a>.</p>\n<h3><strong>Menentukan Arsitektur</strong></h3>\n<p>Berdasarkan kriteria modern web di atas, maka arsitektur akan berperan penting untuk mencapai hal di atas. Karena ada beberapa yang tidak mungkin dicapai tanpa penerapan arsitektur yang tepat. Dan arsitektur yang mendukung semua hal di atas adalah arsitektur <em>Application Shell</em> atau biasa disebut <em>Single Page Application</em>(SPA). SPA adalah arsitektur yang memungkinkan kita berpindah halaman di web tanpa harus melakukan proses loading halaman secara keseluruhan. Pada saat pengguna berpindah halaman, maka hanya konten di tengah halaman saja yang akan diperbaharui. Sedangkan bagian <em>header</em> yang biasa memuat <em>logo, menu</em>, dan <em>search bar</em> biasanya tidak berubah. Terkadang elemen navigasi lainnya yang tidak berubah juga adalah <em>footer</em>(bagian bawah halaman), dan <em>sidebar/drawer</em> (bagian samping yang biasa menjadi navigasi di perangkat <em>mobile</em>).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/743/0*uMo-mX9NlmrxyvSx.png\"><figcaption>Single Page Application dengan aristektur application shell (sumber: <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">https://developers.google.com/web/fundamentals/architecture/app-shell</a>)</figcaption></figure><p>Pilihan arsitektur SPA ini biasanya kurang familiar dengan pengembang PHP, Python, Ruby atau server side scripting lainnya karena biasanya pengembang biasanya secara <em>default</em> akan menggunakan arsitektur <em>Multi Page Application</em>(MPA). MPA adalah arsitektur di mana aplikasi web berpindah halaman dengan melakukan loading halaman keseluruhan termasuk <em>header</em>, <em>footer</em>, dan <em>sidebar</em> halaman <em>web</em> walaupun bagian tersebut masih sama. Kekurangan arsitektur ini adalah pengguna akan melihat jeda perpindahan halaman, karena <em>browser</em> akan menimpa keseluruhan halaman yang tampil dengan halaman baru. Berbeda dengan arsitektur SPA yang hanya mengganti bagian konten tengah saja.</p>\n<p>Karena itu, bagi pengembang yang menggunakan bahasa pemrograman <em>server side scripting</em>, pertimbangkan untuk memisahkan arsitektur aplikasi di mana aplikasi <em>server side script</em> berfungsi untuk mengirimkan data atau hanya untuk untuk proses <em>rendering</em> pertama. Namun selanjutnya untuk navigasi atau perpindahan antar halaman akan ditangani oleh<em> client side</em>, atau JavaScript di halaman <em>web</em>.</p>\n<p>Untuk memudahkan, beberapa <em>library/framework</em> populer sebenarnya sudah menggabungkan konsep SPA dengan <em>server side rendering</em> beberapa contohnya adalah:</p>\n<ul>\n<li>\n<a href=\"https://nuxtjs.org/\">Nuxt</a> untuk pengguna <a href=\"https://vuejs.org/\">VueJS</a>\n</li>\n<li>\n<a href=\"https://reactjs.org/docs/react-dom-server.html\">React DOM</a> untuk pengguna <a href=\"https://reactjs.org/\">ReactJS</a>\n</li>\n<li>Kombinasi antara <a href=\"https://laravel.com/\">Laravel</a> + <a href=\"https://laravel.com/docs/5.6/mix\">Laravel Mix </a>+ <a href=\"https://vuejs.org/\">VueJS</a>\n</li>\n</ul>\n<p>Terkait bagaimana penggunaan setiap framework, silakan mengecek dokumentasi masing-masing.</p>\n<h3><strong>Persiapan</strong></h3>\n<p>Sebelum memulai pengembangan ada baiknya menyiapkan beberapa hal penting yang akan memudahkan pengembang.</p>\n<p><strong>Tools Pengembangan</strong></p>\n<p>Tool pengembangan tentu menjadi pilihan yang akan memudahkan dalam proses pengembangan. Di panduan ini tidak akan membahas terlalu jauh, karena biasanya setiap pilihan framework sudah memiliki <em>tool</em> pengembangan sendiri. Dan setiap pengembang juga sudah memiliki <em>code editor</em> favorit. Tapi beberapa hal yang mungkin bisa membantu dalam pengembangan web modern adalah:</p>\n<ul>\n<li>\n<em>Web server</em> yang mendukung SPA, dapat membuka aplikasi SPA tanpa harus mengakses <em>root</em>. Biasanya ini sama dengan penyetelan <em>friendly</em> URL di MPA, dimana semua URL di <em>website</em> tersebut disetel untuk mengarah ke <em>file index </em>bila file tidak ditemukan.</li>\n<li>\n<em>Browser debugging tool </em>yang mendukung <em>responsive layout</em>, <em>debugging service worker</em>, <em>cache storage</em>, <em>performance</em>, <em>network</em>, dan lainnya. <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">Chrome Dev Tools</a> bisa menjadi pilihan awal bila belum memiliki preferensi.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SaB-VYfPPz_LUm89kAFIDQ.png\"><figcaption>Tampilan proses debugging yang secara default selalu menampilkan mobile layout di Chrome Dev Tools.</figcaption></figure><ul><li>\n<em>Build tools</em> yang digunakan untuk mem-<em>bundle</em> semua aset aplikasi web untuk siap di-<em>deploy</em> ke server. <em>Build tools</em> yang popular saat ini adalah Webpack dan Parcel. Lebih jauh terkait<em> build tools</em> akan dibahas terpisah.</li></ul>\n<p><strong>Target Dasar Pengguna</strong></p>\n<p>Tentukan kira-kira target dasar pengguna <em>website</em> yang akan dibuat seperti apa. Dalam menentukan kita bisa melakukan pengecekan pada beberapa referensi dan yang perlu diperhatikan dari sisi pengguna adalah:</p>\n<ul>\n<li>Jenis perangkat yang digunakan (<em>mobile, tablet,</em> atau <em>desktop</em>).</li>\n<li>Spesifikasi perangkat (spesifikasi rendah, menengah, atau tinggi).</li>\n<li>Kondisi jaringan (Wifi, 4G, 3G, atau 2G) termasuk apakah kemungkinan <em>offline</em> cukup tinggi, misalnya akan digunakan di gunung atau di hutan.</li>\n<li>Jenis atau versi <em>browser</em> yang digunakan oleh pengguna, apakah pengguna menggunakan <em>modern browsers</em>(Chrome, Firefox, Safari, Edge,Opera, dan lain-lain) yang selalu diperbaharui, atau tidak.</li>\n</ul>\n<p>Terkadang kita bisa mengasumsikan faktor-faktor di atas berdasarkan jenis websitenya. Sebagai contoh, bila sifatnya adalah profil perusahaan maka kita berasumsi perangkat <em>mobile, tablet</em>, dan <em>desktop</em> spesifikasi menengah dengan jaringan 3G. Yang sering jadi kesalahan adalah beberapa pengembang fokus pada desktop pada saat mengembangkan website profil perusahaan karena pada saat presentasi ke klien, memang menggunakan laptop dan wifi. Tapi pada saat klien ingin menunjukkan ke partner pada saat ketemu di <em>event</em>, mereka menggunakan perangkat <em>mobile</em> di jaringan 3G yang padat pengguna, dan klien tidak bisa menunjukkan profil perusahaannya karena <em>layout</em> berantakan di <em>mobile</em>, atau terlalu berat karena di <em>mobile</em>, atau bahkan tidak tampil karena di jaringan 3G padat dan lambat. Jadi pastikan kita memahami kapan aplikasi web akan digunakan, perangkat apa, dan di jaringan apa.</p>\n<p><strong>Tentukan Sumber Daya Kritis</strong></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\">Sumber daya kritis</a> di aplikasi web adalah file yang dibutuhkan oleh sebuah web untuk dapat menampilkan sesuatu di layar dengan baik. Bila file ini tidak terunduh semua, maka browser tidak akan dapat menampilkan sesuatu di layar. File ini biasanya terdiri dari:</p>\n<ul>\n<li>HTML dokumen halaman yang akan ditampilkan</li>\n<li>CSS file yang digunakan untuk layout halaman</li>\n<li>JavaScript file yang digunakan untuk menampilkan halaman. Ini biasanya merupakan library UI yang menggunakan JavaScript. Misalnya jQuery UI,</li>\n<li>Fonts, bila tidak diatur dengan benar bisa jadi font membuat konten teks tidak ditampilkan sampai font selesai diunduh.</li>\n</ul>\n<p>Biasanya bila kita menggunakan arsitektur Single Page App(SPA), hal ini biasanya diatur oleh build tool yang kita gunakan misalkan Webpack, atau Parcel. Bila kita tidak menggunakan arsitektur SPA dan memasukkan manual file JavaScript, CSS, dan fonts ke halaman HTML kita maka akan diperlukan proses optimasi yang sebaiknya:</p>\n<ul>\n<li>Ukuran file sekecil mungkin. Ini bisa dicapai dengan membuang spasi, komentar, kode tidak terpakai, dan kompresi <em>file</em>.</li>\n<li>Jumlah file sesedikit mungkin karena ini berhubungan dengan jumlah request. Ini biasanya dibantu build tool untuk mengabungkan aset statis kita ke dalam satu file yang sama.</li>\n<li>\n<em>Round trip</em> atau proses bolak balik meminta ke <em>server</em> seminimal mungkin, ini biasanya terjadi bila ada CSS atau JavaScript yang memanggil atau memasukkan <em>file</em> lain. Contohnya hindari penggunaan import di file CSS. Usahakan hanya terjadi satu round trip dimana file HTML yang menjadi referensi file mana saja yang dibutuhkan untuk menampilkan sesuatu di layar.</li>\n</ul>\n<p>Jadi di awal pengembangan, silakan tentukan berapa file kritis maksimal dan berapa total ukuran dari file kritis ini. Dan ini bisa dimasukkan dalam anggaran kecepatan yang menjadi topik berikutnya.</p>\n<p><strong>Tentukan Anggaran Kecepatan</strong></p>\n<p>Kecepatan tampil sebuah <em>website</em> sangat bergantung terhadap seberapa besar ukuran <em>file</em> yang dimuat oleh <em>browser</em>, spesifikasi perangkat, dan kecepatan jaringan. Karena itu sebelum kita bisa menentukan anggaran kecepatan website, kita harus menentukan target dasar pengguna seperti yang dijelaskan di atas.</p>\n<p>Kalau kita menetapkan target kecepatan tampil dan bisa digunakan aplikasi <em>web</em> kita pada 5 detik, maka untuk perangkat Android harga 2 jutaan, dan jaringan 3G yang berkisar 400 Kbps perhitungannya akan sebagai berikut:</p>\n<p>1,6 detik akan digunakan untuk <em>DNS lookup</em> dan <em>TLS handshaking</em>.</p>\n<p>Sisa 3,4 detik untuk melakukan <em>download</em> dan pemrosesan keseluruhan file. Dan kalau kita kalkulasi maka di jaringan 400Kbps</p>\n<p>400 Kbps = 50KB/s</p>\n<p>50KB/s * 3,4 = <strong>170KB</strong></p>\n<p>Dengan perhitungan di atas, kita hanya punya anggaran kecepatan sebesar <strong>170KB ukuran <em>file</em> yang bisa dikirim</strong>. Ini belum termasuk waktu pemrosesan, karena setiap <em>file</em> seperti HTML, CSS, JS tentunya setelah di-<em>download</em> perlu di-<em>parsing</em> dan di-<em>compile</em>. Untungnya <em>file</em> seperti HTML, CSS, dan JS bisa dikompres. <strong>Sehingga ukuran 170KB kalau tidak dikompres akan berkisar 0,7 MB atau sekitar 700KB.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*U8PJVNrA_tYADQ6_S4HUYw.png\"><figcaption>Gambaran anggaran kecepatan untuk 170KB menggunakan framework (sumber: <a href=\"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e\">https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e</a>)</figcaption></figure><p>Jadi usahakan dalam membuat aplikasi web yang cepat bila ingin ditampilkan dalam 5 detik, maka hasil build untuk di-<em>deploy</em> ke <em>server</em> maksimal total ukurannya adalah 700KB. Coba kita lihat beberapa perbandingan ukuran file <em>default</em> bila kita menggunakan <em>library</em> atau <em>framework</em>. Di Indonesia, <em>library</em> <a href=\"https://getbootstrap.com/\">Bootstrap</a> adalah salah satu <em>library</em> populer terutama di pengembang PHP. Bila kita menggunakan Bootstrap dalam website kita maka kurang lebih anggaran kecepatan kita menjadi:</p>\n<p><strong>Bootstrap CSS dan JavaScript</strong></p>\n<p>CSS 21KB tanpa dikompres menjadi 138KB</p>\n<p>JS 20KB tanpa dikompres menjadi 69KB</p>\n<p>Total 41KB tanpa dikompres menjadi <strong>207KB</strong></p>\n<p>Kalau cuma menggunakan CSS dan JS files dari Bootstrap kita sudah menghabiskan 200KB dari total 700KB. Sehingga sisa yang bisa kita gunakan adalah sekitar 500KB.</p>\n<p>Lalu kita butuh jQuery karena beberapa plugin atau themes Bootstrap bergantung pada jQuery.</p>\n<p>jQuery v3 30KB tanpa dikompres menjadi 84KB</p>\n<p>Sisa anggaran kecepatan 500–84 = <strong>416KB</strong>.</p>\n<p>Nah dengan demikian bila kita menggunakan library Bootstrap dan jQuery maka sisa ukuran file yang bisa kita gunakan pada load awal aplikasi kita pada saat pertama kali dibuka adalah 416KB saja. Dan ini mungkin akan kombinasi antara HTML, fonts, gambar, serta library lainnya yang mungkin kita gunakan seperti corousel, dialog window, dan lainnya.</p>\n<p><strong>Dengan atau Tanpa <em>Build Tools</em></strong></p>\n<p>Untuk bisa membuat kode yang kita bikin bisa teroptimasi seperti kode yang lebih kecil, dan hanya memuat kode yang dipakai saja di dalam aplikasi bila kita menggunakan <em>library</em> maka kita memerlukan <em>tool</em> untuk membantu kita. Pertanyaannya apakah kita ingin menggunakan <em>build tools</em> atau hanya ingin membuat ukuran <em>file</em> lebih kecil?</p>\n<p>Bila kita tidak ingin terlalu kompleks, pilihannya bisa hanya sekedar melakukan <em>minify</em> pada <em>file</em> kita. Atau bahkan kalau kita tidak ingin melakukan <em>minify</em>, pastikan kita memasang <em>gzip compression</em> di<em> web server </em>kita agar <em>response web server</em> akan selalu terkompresi.</p>\n<p>Namun bila ingin lebih optimal, maka kita memerlukan <em>build tools</em> seperti <a href=\"https://webpack.js.org/\">Webpack</a> atau <a href=\"https://parceljs.org/\">Parcel</a>. <em>Build tools</em> bisa membantu kita untuk melakukan optimasi kode kita seperti:</p>\n<ul>\n<li>\n<em>minify</em> kode dengan membuang kode yang tidak perlu seperti space dan komentar.</li>\n<li>\n<em>tree shaking</em>, atau membuang kode yang tidak terpakai dalam aplikasi kita. Ini berguna bila kita menggunakan library dalam aplikasi kita.</li>\n<li>\n<em>code spliting</em>, atau memisahkan kode kita berdasarkan halaman web sehingga kode yang dimuat di halaman tersebut hanyalah kode yang terpakai di halaman tersebut.</li>\n<li>\n<em>code transform</em>, melakukan transformasi kode kita agar bisa berjalan di versi browser yang kita targetkan.</li>\n</ul>\n<p>Webpack adalah <em>build tool</em> paling populer karena muncul sebelum Parcel. Parcel sendiri mulai populer karena kemudahan penggunaannya yang mengusung <em>zero configuratio</em>n, dalam artian bisa langsung digunakan tanpa konfigurasi. Beberapa hal yang perlu disiapkan pada saat kita memasang <em>build tools</em> sebelum memulai pengembangan adalah:</p>\n<ul><li>Atur <em>build tools</em> agar sesuai dengan anggaran kecepatan yang sudah kita set sebelumnya. Sebagai contoh adalah total ukuran aplikasi kita setelah di-build adalah 170KB sesuai yang kita jabarkan di anggaran kecepatan kita sebelumnya. Kalau kalian menggunakan Webpack, kalian bisa melakukan konfigurasi anggaran kecepatan kalian seperti dijelaskan di <a href=\"https://webpack.js.org/configuration/performance/\">dokumentasi Webpack</a> ini. Untuk <em>tool</em> lain, bila tidak memiliki pengaturan untuk anggaran kecepatan, bisa mengecek dengan <em>manual</em> setiap <em>build</em> pastikan agar hasil <em>build</em> tidak melebihi ukuran maksimal yang sudah diset di anggaran kecepatan.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*lMDGk6-3WT_aF8zl5Z5vXw.jpeg\"><figcaption>Warning bila hasil build melebihi maksimal anggaran kecepatan pada Webpack (sumber: <a href=\"https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d\">https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d</a>)</figcaption></figure><ul><li>Tentukan <a href=\"https://webpack.js.org/concepts/targets/\">target build</a> kita untuk JavaScript versi berapa, apakah ES5 atau ES6. Atau mungkin sesuai versi browser, misalnya 2 versi terakhir dari browser modern. Saya biasanya membuat 2 target build. Satu untuk versi yang bisa jalan di search engine crawler(Googlebot menggunakan Chrome versi 41), dan satu untuk 2 versi terakhir browser.</li></ul>\n<h3><strong>Kesimpulan</strong></h3>\n<p>Dalam mempersiapkan pengembangan web, tentunya kita harus sesuai dengan target pengguna kita. Sehingga kita bisa merancang aplikasi web kita sesuai dengan kondisi pengguna. Sehingga pengguna bisa mengakses dan menggunakan aplikasi web kita dalam kondisi apapun. Dan untuk memudahkan kita dalam proses pengembangan kedepannya maka sangat penting untuk memperhatikan pemilihan arsitektur, dan anggaran kecepatan dalam aplikasi web kita. Karena mengubah 2 hal ini di dalam aplikasi web kita bisa dibilang akan sangat rumit dan terkadang memaksa pengembang untuk memulai pengembangan web dari awal lagi karena tidak dapat memenuhi kebutuhan penggunaannya.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1e9d334fad14\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/panduan-memulai-pengembangan-web-modern-pwa-1e9d334fad14\">Panduan Memulai Pengembangan Web Modern (PWA)</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-development",
                "guides-and-tutorials",
                "front-end-development",
                "progressive-web-app"
            ]
        },
        {
            "title": "Yang sering developer lupakan soal PWA",
            "pubDate": "2018-08-23 07:03:41",
            "link": "https://medium.com/wwwid/yang-sering-developer-lupakan-soal-pwa-d26d3ee6a7ba?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/d26d3ee6a7ba",
            "author": "Irfan Maulana",
            "thumbnail": "https://cdn-images-1.medium.com/max/640/1*8Qe_2KV7gLQ6_ZU0cJulAw.jpeg",
            "description": "\n<p>PWA (<em>Progressive Web Apps</em>) memang sepertinya menjadi satu hal yang sering terjadi simpang siur antar satu developer dengan developer lain pun antar satu perusahaan dengan perusahaan lain baik dalam hal implementasi maupun dalam hal pemahamannya sendiri.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*8Qe_2KV7gLQ6_ZU0cJulAw.jpeg\"><figcaption>Gambar dari motivasinews.com</figcaption></figure><blockquote>Disclaimer: saya pribadi menulis ini bukan berarti apa yang saya pahami adalah mutlak yang terbenar dan yang lain salah, melainkan mencoba menyampaikan apa yang saya pahami agar sama-sama berpikir ulang untuk memahami kembali apa yang selama ini sudah kita yakini benarnya.</blockquote>\n<p>Untuk mem-<em>break down</em> lebih dalam, mari kita sama-sama mundur ke belakang dengan memahami kenapa PWA itu ada atau dibutuhkan.</p>\n<p>Pada mulanya kita mesti tau bahwa pengguna internet semakin kesini memang semakin <em>mobile</em>, ini ditunjukkan dengan data bahwa pengguna yang menggunakan <em>mobile device</em> semakin mendominasi diantara keseluruhan pengguna. Sayangnya pertumbuhan pengguna ini tidak dibarengi dengan baiknya kualitas yang harus pengguna dapatkan ketika mengakses internet lewat mobile, hal ini tentu berbanding lurus dengan <em>device</em> yang digunakan dimana menjadi salah satu penentu baik tidaknya juga pengalaman yang akan mereka rasakan ketika mengakses internet. Keberagaman dan keterbatasan <em>mobile device</em> diperparah dengan kondisi jaringan yang memang belum merata di beberapa negara termasuk di Indonesia. Sebagian pengguna <em>mobile device</em> terutama di negara berkembang seperti Indonesia masih berkutat di jaringan <em>slow 3G</em> yang tentunya masih terbatas soal kecepatan akses data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LSQwXf9OufLwIStbNKC3Aw.png\"><figcaption>Statistik dari <a href=\"https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/\">https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/</a></figcaption></figure><p>Teknologi web dibandingkan apps dalam hal menangani pengguna <em>mobile</em> ini tentu berbeda jauh, bila pengguna tidak membutuhkan internet hanya untuk membuka apps maka untuk membuka web pengguna diharuskan mendownload setiap kepingan <em>byte</em> dari file yang dibutuhkan oleh web tersebut. Apps jelas lebih <em>engage</em> terhadap pengguna <em>mobile</em> dibandingkan web apalagi dengan kemampuannya mengakses sistem dan hardware dari <em>device</em> pengguna itu sendiri. Sayangnya untuk meng-<em>install</em> suatu apps didalam <em>device</em> masih dibutuhkan <em>effort</em> yang lumayan karena mereka harus menyiapkan <em>storage</em> yang mana jumlahnya juga seringkali terbatas.</p>\n<p>Maka PWA hadir mencoba menjembatani dan mengurangi <em>gap</em> antara teknologi web dengan teknologi apps. Tujuannya jelas memberikan pengalaman yang lebih baik terhadap pengguna <em>mobile device</em> ketika mengakses web.</p>\n<p>Setelah memahami kenapa harus ada PWA, maka berikutnya akan saya rangkumkan beberapa hal yang seringkali terjadi salah persepsi dan adopsi mengenai PWA:</p>\n<h4>Tidak melihat kebutuhan dan kondisi pengguna</h4>\n<p>Ya, PWA dibuat dengan fokus utama untuk menyajikan pengalaman yang <em>progressive</em> kepada pengguna ketika mengakses sebuah website. Masalahnya ada banyak developer (termasuk saya) yang seringkali mencoba mengimplementasikan sesuatu tanpa melihat pada kebutuhan pengguna serta data yang kita miliki mengenai pengguna kita. Sebetulnya sebelum memutuskan untuk menggunakan PWA, terlebih dahulu sebaiknya kita memahami berbagai hal mengenai pengguna kita seperti menjawab beberapa pertanyaan seperti siapa mereka? <em>device</em> apa yang mereka gunakan? bagaimana persebaran wilayah mereka? jaringan apa yang mereka gunakan? seberapa penting menghemat penggunaan <em>bandwidth data</em> buat mereka? berapa besar persentase <em>bounce rate</em> dari keseluruhan pengguna? konten apa yang benar-benar dibutuhkan oleh pengguna kita? serta banyak lagi pertanyaan yang akan membuat kita lebih paham dengan kondisi pengguna kita.</p>\n<p>Setelah memahami kebutuhan dan kondisi pengguna, barulah kita bisa memutuskan PWA yang seperti apa yang ingin dan harus kita buat untuk membantu menyelesaikan masalah yang dihadapi pengguna. Cerita mengenai memahami kebutuhan pengguna sebelum membuat PWA bisa dibaca di artikel “<a href=\"https://medium.com/wwwid/bagaimana-kulina-bisa-mendapatkan-41-000-lebih-pelanggan-melalui-web-d00af6165880\">Bagaimana Kulina Bisa Mendapatkan 41.000 Lebih Pelanggan Melalui Web</a>” oleh <a href=\"https://medium.com/u/19ca0cae7023\">Yohan Totting</a>.</p>\n<h4>Terlalu fokus pada fitur</h4>\n<p>PWA punya segudang fitur dan kemampuan, sayangnya banyak kita (developer) yang sering terkecoh dengan fitur-fitur ini. Seolah ingin agar semua fitur yang dimiliki PWA diadopsi kedalam website kita padahal sebenarnya sama sekali tidak dibutuhkan oleh pengguna. Masing-masing fitur memiliki fungsi dan konteks yang berbeda-beda. Lebih baik bagi kita jika mengadopsi sedikit fitur namun sesuai dengan kebutuhan daripada berusaha menumpuk semua fitur namun tidak tepat guna, tidak tepat konteks dan tidak pernah digunakan oleh pengguna.</p>\n<p>Contoh dari beberapa kesalahan ini bisa ditemui dari tulisan <a href=\"https://medium.com/u/2645da69fbda\">Satya Kresna Adi Pratama</a> di “<a href=\"https://medium.com/wwwid/berbagi-pengalaman-menggunakan-web-yang-progresif-3d8682001343\">Berbagi Pengalaman menggunakan Web yang Progresif</a>”, dimana banyak website yang mencoba mengimplementasi <em>push notification </em>dengan cara yang liar tanpa melihat konteks kapan waktu yang tepat bagi pengguna mendapatkan tawaran untuk berlangganan <em>push notification, </em>kapan waktu yang pas untuk mengirimkan pesan notifikasi tersebut kepada pengguna, serta konten seperti apa yang cocok untuk pengguna dapatkan di <em>push notification</em> itu.</p>\n<h4>Berpikir bahwa PWA hanya soal Service Worker</h4>\n<p>Salah satu <em>core</em> PWA memang <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\"><em>service worker</em></a>, tapi bila ingin memberikan pengalaman yang <em>progressive</em> untuk pengguna kita maka saya jamin <em>service worker</em> saja tidak akan cukup untuk memberikan perbedaan yang signifikan dari sebelumnya. PWA akan lebih optimal bila didukung dengan berbagai hal seperti diantaranya UX/UI yang mudah dan bersahabat, performa website yang baik (baca: “<a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">Berbagai best practice dalam memuat halaman website</a>”), mendukung <em>accessibility</em> yang baik, kemampuan diakses <em>offline</em>, <em>caching</em> yang tepat, beradaptasi sesuai kondisi jaringan (baca: “<a href=\"https://medium.com/wwwid/web-pintar-yang-beradaptasi-sesuai-perangkat-dan-jaringan-78f4496915a4\">Web Pintar Yang Beradaptasi Sesuai Perangkat dan Jaringan</a>”) dan banyak hal lainnya yang mendukung.</p>\n<h4>Berpikir bahwa PWA merupakan one hit and run task</h4>\n<p>PWA seringkali dikerjakan oleh para developer (termasuk saya) dengan <em>one-hit and run task</em>, yang artinya dikerjakan dalam satu waktu kemudian di <em>ship</em> ke <em>production</em> dan pekerjaan selesai, tanpa pernah dilihat lagi dan dikaji ulang setelahnya.</p>\n<p>PWA sebenarnya membutuhkan perhatian lebih, setelah mengirimkan PWA ke <em>production</em> sebaiknya kita juga memantau data yang bisa kita dapatkan seperti seberapa banyak pengguna yang terbantu dengan fitur PWA kita, berapa pengguna yang melakukan A2HS di <em>device</em> mereka, seberapa besar <em>cache</em> yang dilakukan s<em>ervice worker</em> memakan memori pengguna, seberapa membantu <em>cache</em> yang dilakukan s<em>ervice worker</em> dan hal lainnya.</p>\n<p>Setelah memantau berbagai data kita bisa memperbaiki PWA kita agar lebih sesuai dengan kondisi pengguna kita. Intinya membangun PWA adalah proses yang harus dilakukan secara berulang dari <em>analyze</em>, <em>build</em>, <em>ship</em>, <em>measure</em>, <em>fix</em>, <em>ship again</em>, and <em>repeat again</em>.</p>\n<p>Kita sebagai developer seringkali terjebak dengan banyak hal teknis dan lupa bahwa ada banyak hal yang mesti diperhatikan ketika membuat sebuah fitur untuk pengguna. Mari sama-sama belajar memahami pengguna kita dan <em>let’s be a better developer!!!</em></p>\n<p>Bila kamu suka dengan tulisan ini, silahkan tekan tombol 👏 sebanyak-banyaknya dan mohon bantuannya untuk share 📲 di sosial media kalian bila kalian rasa artikel ini akan bermanfaat bagi orang lain.</p>\n<p>Saya <a href=\"https://medium.com/u/d09eac079a9c\">Irfan Maulana</a>, kalian bisa ikuti tulisan-tulisan saya di berbagai publikasi Medium seperti <a href=\"https://medium.com/vuejs-id\">Vuejs-ID</a>, <a href=\"https://medium.com/angularid\">AngularID</a>, <a href=\"https://medium.com/wwwid/\">WWWID</a>, dan <a href=\"https://medium.com/mazipan-mind\">mazipan-mind</a>. Saya menulis berbagai hal teknikal maupun non-teknikal terkait dengan dunia programming terutama yang berkaitan dengan web programming dan sebagian besar saya tulis dalam bahasa Indonesia. Saya juga senang bereksplorasi dan membuat berbagai percobaan mengenai apa yang saya sudah atau sedang saya pelajari. Anda bisa ikuti dan lihat semuanya di Github saya di <a href=\"https://github.com/mazipan\">🐙 mazipan</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d26d3ee6a7ba\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/yang-sering-developer-lupakan-soal-pwa-d26d3ee6a7ba\">Yang sering developer lupakan soal PWA</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>PWA (<em>Progressive Web Apps</em>) memang sepertinya menjadi satu hal yang sering terjadi simpang siur antar satu developer dengan developer lain pun antar satu perusahaan dengan perusahaan lain baik dalam hal implementasi maupun dalam hal pemahamannya sendiri.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*8Qe_2KV7gLQ6_ZU0cJulAw.jpeg\"><figcaption>Gambar dari motivasinews.com</figcaption></figure><blockquote>Disclaimer: saya pribadi menulis ini bukan berarti apa yang saya pahami adalah mutlak yang terbenar dan yang lain salah, melainkan mencoba menyampaikan apa yang saya pahami agar sama-sama berpikir ulang untuk memahami kembali apa yang selama ini sudah kita yakini benarnya.</blockquote>\n<p>Untuk mem-<em>break down</em> lebih dalam, mari kita sama-sama mundur ke belakang dengan memahami kenapa PWA itu ada atau dibutuhkan.</p>\n<p>Pada mulanya kita mesti tau bahwa pengguna internet semakin kesini memang semakin <em>mobile</em>, ini ditunjukkan dengan data bahwa pengguna yang menggunakan <em>mobile device</em> semakin mendominasi diantara keseluruhan pengguna. Sayangnya pertumbuhan pengguna ini tidak dibarengi dengan baiknya kualitas yang harus pengguna dapatkan ketika mengakses internet lewat mobile, hal ini tentu berbanding lurus dengan <em>device</em> yang digunakan dimana menjadi salah satu penentu baik tidaknya juga pengalaman yang akan mereka rasakan ketika mengakses internet. Keberagaman dan keterbatasan <em>mobile device</em> diperparah dengan kondisi jaringan yang memang belum merata di beberapa negara termasuk di Indonesia. Sebagian pengguna <em>mobile device</em> terutama di negara berkembang seperti Indonesia masih berkutat di jaringan <em>slow 3G</em> yang tentunya masih terbatas soal kecepatan akses data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LSQwXf9OufLwIStbNKC3Aw.png\"><figcaption>Statistik dari <a href=\"https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/\">https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/</a></figcaption></figure><p>Teknologi web dibandingkan apps dalam hal menangani pengguna <em>mobile</em> ini tentu berbeda jauh, bila pengguna tidak membutuhkan internet hanya untuk membuka apps maka untuk membuka web pengguna diharuskan mendownload setiap kepingan <em>byte</em> dari file yang dibutuhkan oleh web tersebut. Apps jelas lebih <em>engage</em> terhadap pengguna <em>mobile</em> dibandingkan web apalagi dengan kemampuannya mengakses sistem dan hardware dari <em>device</em> pengguna itu sendiri. Sayangnya untuk meng-<em>install</em> suatu apps didalam <em>device</em> masih dibutuhkan <em>effort</em> yang lumayan karena mereka harus menyiapkan <em>storage</em> yang mana jumlahnya juga seringkali terbatas.</p>\n<p>Maka PWA hadir mencoba menjembatani dan mengurangi <em>gap</em> antara teknologi web dengan teknologi apps. Tujuannya jelas memberikan pengalaman yang lebih baik terhadap pengguna <em>mobile device</em> ketika mengakses web.</p>\n<p>Setelah memahami kenapa harus ada PWA, maka berikutnya akan saya rangkumkan beberapa hal yang seringkali terjadi salah persepsi dan adopsi mengenai PWA:</p>\n<h4>Tidak melihat kebutuhan dan kondisi pengguna</h4>\n<p>Ya, PWA dibuat dengan fokus utama untuk menyajikan pengalaman yang <em>progressive</em> kepada pengguna ketika mengakses sebuah website. Masalahnya ada banyak developer (termasuk saya) yang seringkali mencoba mengimplementasikan sesuatu tanpa melihat pada kebutuhan pengguna serta data yang kita miliki mengenai pengguna kita. Sebetulnya sebelum memutuskan untuk menggunakan PWA, terlebih dahulu sebaiknya kita memahami berbagai hal mengenai pengguna kita seperti menjawab beberapa pertanyaan seperti siapa mereka? <em>device</em> apa yang mereka gunakan? bagaimana persebaran wilayah mereka? jaringan apa yang mereka gunakan? seberapa penting menghemat penggunaan <em>bandwidth data</em> buat mereka? berapa besar persentase <em>bounce rate</em> dari keseluruhan pengguna? konten apa yang benar-benar dibutuhkan oleh pengguna kita? serta banyak lagi pertanyaan yang akan membuat kita lebih paham dengan kondisi pengguna kita.</p>\n<p>Setelah memahami kebutuhan dan kondisi pengguna, barulah kita bisa memutuskan PWA yang seperti apa yang ingin dan harus kita buat untuk membantu menyelesaikan masalah yang dihadapi pengguna. Cerita mengenai memahami kebutuhan pengguna sebelum membuat PWA bisa dibaca di artikel “<a href=\"https://medium.com/wwwid/bagaimana-kulina-bisa-mendapatkan-41-000-lebih-pelanggan-melalui-web-d00af6165880\">Bagaimana Kulina Bisa Mendapatkan 41.000 Lebih Pelanggan Melalui Web</a>” oleh <a href=\"https://medium.com/u/19ca0cae7023\">Yohan Totting</a>.</p>\n<h4>Terlalu fokus pada fitur</h4>\n<p>PWA punya segudang fitur dan kemampuan, sayangnya banyak kita (developer) yang sering terkecoh dengan fitur-fitur ini. Seolah ingin agar semua fitur yang dimiliki PWA diadopsi kedalam website kita padahal sebenarnya sama sekali tidak dibutuhkan oleh pengguna. Masing-masing fitur memiliki fungsi dan konteks yang berbeda-beda. Lebih baik bagi kita jika mengadopsi sedikit fitur namun sesuai dengan kebutuhan daripada berusaha menumpuk semua fitur namun tidak tepat guna, tidak tepat konteks dan tidak pernah digunakan oleh pengguna.</p>\n<p>Contoh dari beberapa kesalahan ini bisa ditemui dari tulisan <a href=\"https://medium.com/u/2645da69fbda\">Satya Kresna Adi Pratama</a> di “<a href=\"https://medium.com/wwwid/berbagi-pengalaman-menggunakan-web-yang-progresif-3d8682001343\">Berbagi Pengalaman menggunakan Web yang Progresif</a>”, dimana banyak website yang mencoba mengimplementasi <em>push notification </em>dengan cara yang liar tanpa melihat konteks kapan waktu yang tepat bagi pengguna mendapatkan tawaran untuk berlangganan <em>push notification, </em>kapan waktu yang pas untuk mengirimkan pesan notifikasi tersebut kepada pengguna, serta konten seperti apa yang cocok untuk pengguna dapatkan di <em>push notification</em> itu.</p>\n<h4>Berpikir bahwa PWA hanya soal Service Worker</h4>\n<p>Salah satu <em>core</em> PWA memang <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\"><em>service worker</em></a>, tapi bila ingin memberikan pengalaman yang <em>progressive</em> untuk pengguna kita maka saya jamin <em>service worker</em> saja tidak akan cukup untuk memberikan perbedaan yang signifikan dari sebelumnya. PWA akan lebih optimal bila didukung dengan berbagai hal seperti diantaranya UX/UI yang mudah dan bersahabat, performa website yang baik (baca: “<a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">Berbagai best practice dalam memuat halaman website</a>”), mendukung <em>accessibility</em> yang baik, kemampuan diakses <em>offline</em>, <em>caching</em> yang tepat, beradaptasi sesuai kondisi jaringan (baca: “<a href=\"https://medium.com/wwwid/web-pintar-yang-beradaptasi-sesuai-perangkat-dan-jaringan-78f4496915a4\">Web Pintar Yang Beradaptasi Sesuai Perangkat dan Jaringan</a>”) dan banyak hal lainnya yang mendukung.</p>\n<h4>Berpikir bahwa PWA merupakan one hit and run task</h4>\n<p>PWA seringkali dikerjakan oleh para developer (termasuk saya) dengan <em>one-hit and run task</em>, yang artinya dikerjakan dalam satu waktu kemudian di <em>ship</em> ke <em>production</em> dan pekerjaan selesai, tanpa pernah dilihat lagi dan dikaji ulang setelahnya.</p>\n<p>PWA sebenarnya membutuhkan perhatian lebih, setelah mengirimkan PWA ke <em>production</em> sebaiknya kita juga memantau data yang bisa kita dapatkan seperti seberapa banyak pengguna yang terbantu dengan fitur PWA kita, berapa pengguna yang melakukan A2HS di <em>device</em> mereka, seberapa besar <em>cache</em> yang dilakukan s<em>ervice worker</em> memakan memori pengguna, seberapa membantu <em>cache</em> yang dilakukan s<em>ervice worker</em> dan hal lainnya.</p>\n<p>Setelah memantau berbagai data kita bisa memperbaiki PWA kita agar lebih sesuai dengan kondisi pengguna kita. Intinya membangun PWA adalah proses yang harus dilakukan secara berulang dari <em>analyze</em>, <em>build</em>, <em>ship</em>, <em>measure</em>, <em>fix</em>, <em>ship again</em>, and <em>repeat again</em>.</p>\n<p>Kita sebagai developer seringkali terjebak dengan banyak hal teknis dan lupa bahwa ada banyak hal yang mesti diperhatikan ketika membuat sebuah fitur untuk pengguna. Mari sama-sama belajar memahami pengguna kita dan <em>let’s be a better developer!!!</em></p>\n<p>Bila kamu suka dengan tulisan ini, silahkan tekan tombol 👏 sebanyak-banyaknya dan mohon bantuannya untuk share 📲 di sosial media kalian bila kalian rasa artikel ini akan bermanfaat bagi orang lain.</p>\n<p>Saya <a href=\"https://medium.com/u/d09eac079a9c\">Irfan Maulana</a>, kalian bisa ikuti tulisan-tulisan saya di berbagai publikasi Medium seperti <a href=\"https://medium.com/vuejs-id\">Vuejs-ID</a>, <a href=\"https://medium.com/angularid\">AngularID</a>, <a href=\"https://medium.com/wwwid/\">WWWID</a>, dan <a href=\"https://medium.com/mazipan-mind\">mazipan-mind</a>. Saya menulis berbagai hal teknikal maupun non-teknikal terkait dengan dunia programming terutama yang berkaitan dengan web programming dan sebagian besar saya tulis dalam bahasa Indonesia. Saya juga senang bereksplorasi dan membuat berbagai percobaan mengenai apa yang saya sudah atau sedang saya pelajari. Anda bisa ikuti dan lihat semuanya di Github saya di <a href=\"https://github.com/mazipan\">🐙 mazipan</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d26d3ee6a7ba\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/yang-sering-developer-lupakan-soal-pwa-d26d3ee6a7ba\">Yang sering developer lupakan soal PWA</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-development",
                "software-development",
                "progressive-web-app"
            ]
        },
        {
            "title": "5 Nilai Dasar Pancasila Web Performance",
            "pubDate": "2018-07-19 08:03:23",
            "link": "https://medium.com/wwwid/5-nilai-dasar-pancasila-web-performance-1f5ef575c3d5?source=rss----c432d91819e0---4",
            "guid": "https://medium.com/p/1f5ef575c3d5",
            "author": "Yahya Fadhlulloh Al-Fatih",
            "thumbnail": "https://cdn-images-1.medium.com/max/312/0*3tl79QaAckxXGz4A.png",
            "description": "\n<p>Salah satu alasan utama munculnya user bounce adalah turunnya performance dari web, terdapat dua faktor penyebab web performance menurun, penurunan web performance atau jaringan usernya memang lambat, tapi hal yang paling mudah untuk di tingkatkan adalah websitenya, tapi ada masalah lain jika kita berbicara tentang websitenya, disaat developer atau sys engineer sudah melakukan segala hal untuk meningkatkan web performance kadang masih saja kebingungan “what else to do” supaya performance ini naik.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/312/0*3tl79QaAckxXGz4A.png\"><figcaption>comic by xkcd</figcaption></figure><p>Pada dasarnya kadang kita suka melewati hal hal mendasar yang sebenarnya harus dipahami dulu sebelum mengeluarkan keputusan dalam meningkatkan performance. Penulis membuat <strong>Pancasila Web Performance</strong> yang dimaksudkan agar kita sebagai developer web mempunyai landasan landasan dalam meningkatkan web performance. <strong>Pancasila Web Performance</strong> ini dibuat dari kumpulan kesalahan para <a href=\"https://www.keycdn.com/blog/web-performance-advice/\">expert</a> dalam meningkatkan web performance, pengalaman ini penulis olah menjadi landasan landasan utama dalam membangun web performance.</p>\n<p>Tujuan utama penulis membuat istilah Pancasila adalah, supaya hal ini yang selalu diingat oleh kita, pada saat ada pertanyaan “apa lagi yang kurang buat meningkatkan performance?” semoga jawabannya bisa ditemukan pada <strong>Pancasila Web Performance</strong> ini, berikut nilai dasar pancasila Web Performance yang penulis buat :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*RYC1ytbW0rRj94TN.gif\"></figure><h3><strong>1. Image Optimization adalah segalanya</strong></h3>\n<p>Kadang kita sebagai developer terlalu fokus pada scripting performance padahal disisi lain banyak media konten yang membebani web, pelaku utamanya adalah gambar! rata rata halaman di <a href=\"https://httparchive.org/reports/state-of-the-web?start=latest\">load sekitar 2200 KB dan sekitar 1440 KB nya adalah gambar</a>, artinya 60% halaman itu dibebankan oleh gambar!</p>\n<p>Banyak beberapa cara untuk mengoptimalkan gambar :</p>\n<ul>\n<li>compressing</li>\n<li>jangan menjalankan GZIP</li>\n<li>cache image</li>\n<li>File Type (PNG, Webp, JPG)</li>\n</ul>\n<h3>2. Menggunakan 3rd party script atau framework seminim mungkin</h3>\n<p>Bagian ini sudah jelas dan semua orang paham kalau 3rd party scripting atau framework mampu menurunkan performance web, alasan utamanya adalah dari dependency hell dalam arti lain synchronous load script dimana script tersebut memungkinkan men-load script lain lagi yang membuat load makin lama, Chat bot, analytic, retargeting, ads, social widget, external CSS script yang di load di head secara synchronous, dll.</p>\n<p>Terkadang divisi marketing atau divisi non-dev-ops yang punya hak mengontrol 3rd party script atau framework ini sering kali gagal dalam memanage 3rd party dependecies, yang benar adalah mempunyai strategi dalam pemasangan 3rd party yang diselaraskan dengan User Experience.</p>\n<p>Beberapa tools yang dapat menghapus 3rd party yang tidak digunakan :</p>\n<ul>\n<li><a href=\"https://github.com/uncss/uncss\">https://github.com/uncss/uncss</a></li>\n<li><a href=\"https://github.com/geuis/helium-css\">https://github.com/geuis/helium-css</a></li>\n<li><a href=\"https://github.com/webpack-contrib/purifycss-webpack\">https://github.com/webpack-contrib/purifycss-webpack</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/cdfmaaeapjmacolkojefhfollmphonoh\">CSS Remove and combine chrome plugin</a></li>\n<li>snyk.io (package scanner buat check availability plugin dan vulnerability plugin)</li>\n</ul>\n<h3>3. Mengurangi beban “setiap halaman”</h3>\n<p>Kadang kita sebagai developer beranggapan tolak ukur web performance kita lebih baik dengan melakukan web performance test pada halaman index , padahal belum tentu hal tersebut menentukan web performance lebih baik atau tidak, karena masih banyak dia yang halamannya penuh dengan gambar, dia yang halamannya penuh dengan chart, dan dia yang halamannya penuh dengan <a href=\"https://en.wikipedia.org/wiki/Dependency_hell\">dependecy hell</a>.</p>\n<p>Kita tidak bisa menyalahkan dia yang halamannya penuh dengan chart karena mungkin dia dibuat untuk menampilkan data chart. Ada beberapa cara efektif untuk meningkatkan performance dari spesifik halaman, contoh dengan implementasi lazyload pada halaman yang berat, karena lazy load sendiri berfungsi utama di load pada saat media/ content tersebut dibutuhkan.</p>\n<blockquote>“Menggunakan lazyload untuk setiap penggunaan spesifik halaman, supaya setiap halaman di load seminim mungkin” — Galih pratama</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*FlyqhWp86PrMs0Py\"></figure><p>kalau membicarakan lazy load artinya ga jauh dengan asynchronous, yes, the almighty <strong>asynchronous, </strong>kapan dan dimana saja tempat yang cocok untuk penggunaan lazy load ini tergantung dengan kebutuhan, contohnya halaman listing item, comment section pada artikel.</p>\n<h3>4. Mengurangi segala “render blocking”</h3>\n<p>Salah satu kelemahan developer kalau menggunakan library JS atau CSS kadang tidak menggunakan minification atau defer untuk optimalisasi web</p>\n<p>ada beberapa poin yang bisa dijalankan untuk mengurangi render blocking :</p>\n<ul>\n<li>Jangan berketergantungan terhadap Javascript untuk load page</li>\n<li>try server-side-rendering atau service worker</li>\n<li>bundling all important JS in one file</li>\n<li>Optimisasi file CSS dan JS</li>\n</ul>\n<p>Ada beberapa artikel dari medium yang cukup membantu dalam mengurangi masalah render blocking ini</p>\n<ul>\n<li><a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">Berbagai best practice dalam memuat halaman website</a></li>\n<li><a href=\"https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b\">Service Worker Tanpa Application Shell Untuk Mempercepat Navigasi Antar Halaman Web</a></li>\n</ul>\n<h3><strong>5. Menggunakan perceived performance sebagai tolak ukur</strong></h3>\n<p>Pada umumnya kalau berbicara tentang web performance biasanya kecepatan adalah segalanya, kadang tolak ukur ini muncul dari berbagai banyak hal dari segi metric seperti, berapa detik user akses halaman, keefektifan penggunaan CDN, Time to First Byte, Compress Transfer (kadang compress transfer ini malah bisa menjadi masalah), Penggunaan keep alive, atau penggunaan cache static content. Kadang hasil dari metrik tersebut membuat kita over-analyze data, yang perlu kita lakukan adalah kita lirik dalam bentuk user perspektif.</p>\n<p>Dengan menganalisa user perspektif, perceived performance bisa menjadi tolak ukur yang cocok untuk performance web, karena perceived performance ini menggunakan skala seberapa cepat user berfikir tanpa perlu bertanya untuk menggunakan website, hal ini bisa menjadi hal lebih penting daripada “kecepatan” itu sendiri.</p>\n<p>Untuk mengukur perceived performance dapat menggunakan best practice atau checklist, beberapa contoh tolak ukur perceived performance :</p>\n<ul><li>Response Time, berikut waktu reaksi user pada saat buka website</li></ul>\n<blockquote>\n<strong>0–100ms</strong> — Instant</blockquote>\n<blockquote>\n<strong>100–300ms</strong> — Small perceptible delay</blockquote>\n<blockquote>\n<strong>300–1000ms</strong> — Machine is working</blockquote>\n<blockquote>\n<strong>1000+ms</strong> — Likely mental context switch</blockquote>\n<blockquote>\n<strong>10,000+ms</strong> — Task is abandoned</blockquote>\n<ul><li>Asynchronous Loading, hal yang bisa membuat user merasa wajar pada saat menunggu content yang halamannya berat.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/756/0*IxpeLKt4dZzEBnSa.gif\"><figcaption>loading</figcaption></figure><p><a href=\"https://medium.com/ben-and-dion/let-people-do-asynchronous-loading-is-for-users-not-just-computers-40987de0e221\">Let people do; Asynchronous loading is for users not just computers</a></p>\n<p>Thanks buat nyempetin baca tulisan gabut gw ini, pada dasarnya penulis membuat tulisan ini sangat panjang dan bahkan sempat membuat checklist web performance, penulis membayangkan apakah akan cukup membantu jika penulis merelease checklist web performance dan long version dari tulisan ini🤔 ?</p>\n<p>Let me know menarik untuk dibuat atau ada masukan lain thanks 🐣~</p>\n<p>Referensi</p>\n<p><a href=\"http://blog.teamtreehouse.com/perceived-performance\">http://blog.teamtreehouse.com/perceived-performance</a><br><a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf</a><br><a href=\"https://www.keycdn.com/blog/blocking-the-dom/\">https://www.keycdn.com/blog/blocking-the-dom/</a><br><a href=\"https://www.keycdn.com/blog/web-performance-advice-2018/\">https://www.keycdn.com/blog/web-performance-advice-2018/</a><br><a href=\"https://www.keycdn.com/blog/web-performance-advice/\">https://www.keycdn.com/blog/web-performance-advice/</a><br><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css</a><br><a href=\"https://developers.google.com/speed/pagespeed/insights\">https://developers.google.com/speed/pagespeed/insights</a><br><a href=\"https://www.wpbeginner.com/wp-tutorials/how-to-fix-render-blocking-javascript-and-css-in-wordpress/\">https://www.wpbeginner.com/wp-tutorials/how-to-fix-render-blocking-javascript-and-css-in-wordpress/</a><br><a href=\"https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b\">https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b</a><br><a href=\"https://medium.com/wwwid/yang-web-developer-harus-tau-1-5259c953881f\">https://medium.com/wwwid/yang-web-developer-harus-tau-1-5259c953881f</a><br><a href=\"https://medium.com/wwwid/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">https://medium.com/wwwid/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d</a></p>\n<p><a href=\"https://www.keycdn.com/blog/perceived-performance/\">https://www.keycdn.com/blog/perceived-performance/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f5ef575c3d5\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/5-nilai-dasar-pancasila-web-performance-1f5ef575c3d5\">5 Nilai Dasar Pancasila Web Performance</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>Salah satu alasan utama munculnya user bounce adalah turunnya performance dari web, terdapat dua faktor penyebab web performance menurun, penurunan web performance atau jaringan usernya memang lambat, tapi hal yang paling mudah untuk di tingkatkan adalah websitenya, tapi ada masalah lain jika kita berbicara tentang websitenya, disaat developer atau sys engineer sudah melakukan segala hal untuk meningkatkan web performance kadang masih saja kebingungan “what else to do” supaya performance ini naik.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/312/0*3tl79QaAckxXGz4A.png\"><figcaption>comic by xkcd</figcaption></figure><p>Pada dasarnya kadang kita suka melewati hal hal mendasar yang sebenarnya harus dipahami dulu sebelum mengeluarkan keputusan dalam meningkatkan performance. Penulis membuat <strong>Pancasila Web Performance</strong> yang dimaksudkan agar kita sebagai developer web mempunyai landasan landasan dalam meningkatkan web performance. <strong>Pancasila Web Performance</strong> ini dibuat dari kumpulan kesalahan para <a href=\"https://www.keycdn.com/blog/web-performance-advice/\">expert</a> dalam meningkatkan web performance, pengalaman ini penulis olah menjadi landasan landasan utama dalam membangun web performance.</p>\n<p>Tujuan utama penulis membuat istilah Pancasila adalah, supaya hal ini yang selalu diingat oleh kita, pada saat ada pertanyaan “apa lagi yang kurang buat meningkatkan performance?” semoga jawabannya bisa ditemukan pada <strong>Pancasila Web Performance</strong> ini, berikut nilai dasar pancasila Web Performance yang penulis buat :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*RYC1ytbW0rRj94TN.gif\"></figure><h3><strong>1. Image Optimization adalah segalanya</strong></h3>\n<p>Kadang kita sebagai developer terlalu fokus pada scripting performance padahal disisi lain banyak media konten yang membebani web, pelaku utamanya adalah gambar! rata rata halaman di <a href=\"https://httparchive.org/reports/state-of-the-web?start=latest\">load sekitar 2200 KB dan sekitar 1440 KB nya adalah gambar</a>, artinya 60% halaman itu dibebankan oleh gambar!</p>\n<p>Banyak beberapa cara untuk mengoptimalkan gambar :</p>\n<ul>\n<li>compressing</li>\n<li>jangan menjalankan GZIP</li>\n<li>cache image</li>\n<li>File Type (PNG, Webp, JPG)</li>\n</ul>\n<h3>2. Menggunakan 3rd party script atau framework seminim mungkin</h3>\n<p>Bagian ini sudah jelas dan semua orang paham kalau 3rd party scripting atau framework mampu menurunkan performance web, alasan utamanya adalah dari dependency hell dalam arti lain synchronous load script dimana script tersebut memungkinkan men-load script lain lagi yang membuat load makin lama, Chat bot, analytic, retargeting, ads, social widget, external CSS script yang di load di head secara synchronous, dll.</p>\n<p>Terkadang divisi marketing atau divisi non-dev-ops yang punya hak mengontrol 3rd party script atau framework ini sering kali gagal dalam memanage 3rd party dependecies, yang benar adalah mempunyai strategi dalam pemasangan 3rd party yang diselaraskan dengan User Experience.</p>\n<p>Beberapa tools yang dapat menghapus 3rd party yang tidak digunakan :</p>\n<ul>\n<li><a href=\"https://github.com/uncss/uncss\">https://github.com/uncss/uncss</a></li>\n<li><a href=\"https://github.com/geuis/helium-css\">https://github.com/geuis/helium-css</a></li>\n<li><a href=\"https://github.com/webpack-contrib/purifycss-webpack\">https://github.com/webpack-contrib/purifycss-webpack</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/cdfmaaeapjmacolkojefhfollmphonoh\">CSS Remove and combine chrome plugin</a></li>\n<li>snyk.io (package scanner buat check availability plugin dan vulnerability plugin)</li>\n</ul>\n<h3>3. Mengurangi beban “setiap halaman”</h3>\n<p>Kadang kita sebagai developer beranggapan tolak ukur web performance kita lebih baik dengan melakukan web performance test pada halaman index , padahal belum tentu hal tersebut menentukan web performance lebih baik atau tidak, karena masih banyak dia yang halamannya penuh dengan gambar, dia yang halamannya penuh dengan chart, dan dia yang halamannya penuh dengan <a href=\"https://en.wikipedia.org/wiki/Dependency_hell\">dependecy hell</a>.</p>\n<p>Kita tidak bisa menyalahkan dia yang halamannya penuh dengan chart karena mungkin dia dibuat untuk menampilkan data chart. Ada beberapa cara efektif untuk meningkatkan performance dari spesifik halaman, contoh dengan implementasi lazyload pada halaman yang berat, karena lazy load sendiri berfungsi utama di load pada saat media/ content tersebut dibutuhkan.</p>\n<blockquote>“Menggunakan lazyload untuk setiap penggunaan spesifik halaman, supaya setiap halaman di load seminim mungkin” — Galih pratama</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*FlyqhWp86PrMs0Py\"></figure><p>kalau membicarakan lazy load artinya ga jauh dengan asynchronous, yes, the almighty <strong>asynchronous, </strong>kapan dan dimana saja tempat yang cocok untuk penggunaan lazy load ini tergantung dengan kebutuhan, contohnya halaman listing item, comment section pada artikel.</p>\n<h3>4. Mengurangi segala “render blocking”</h3>\n<p>Salah satu kelemahan developer kalau menggunakan library JS atau CSS kadang tidak menggunakan minification atau defer untuk optimalisasi web</p>\n<p>ada beberapa poin yang bisa dijalankan untuk mengurangi render blocking :</p>\n<ul>\n<li>Jangan berketergantungan terhadap Javascript untuk load page</li>\n<li>try server-side-rendering atau service worker</li>\n<li>bundling all important JS in one file</li>\n<li>Optimisasi file CSS dan JS</li>\n</ul>\n<p>Ada beberapa artikel dari medium yang cukup membantu dalam mengurangi masalah render blocking ini</p>\n<ul>\n<li><a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">Berbagai best practice dalam memuat halaman website</a></li>\n<li><a href=\"https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b\">Service Worker Tanpa Application Shell Untuk Mempercepat Navigasi Antar Halaman Web</a></li>\n</ul>\n<h3><strong>5. Menggunakan perceived performance sebagai tolak ukur</strong></h3>\n<p>Pada umumnya kalau berbicara tentang web performance biasanya kecepatan adalah segalanya, kadang tolak ukur ini muncul dari berbagai banyak hal dari segi metric seperti, berapa detik user akses halaman, keefektifan penggunaan CDN, Time to First Byte, Compress Transfer (kadang compress transfer ini malah bisa menjadi masalah), Penggunaan keep alive, atau penggunaan cache static content. Kadang hasil dari metrik tersebut membuat kita over-analyze data, yang perlu kita lakukan adalah kita lirik dalam bentuk user perspektif.</p>\n<p>Dengan menganalisa user perspektif, perceived performance bisa menjadi tolak ukur yang cocok untuk performance web, karena perceived performance ini menggunakan skala seberapa cepat user berfikir tanpa perlu bertanya untuk menggunakan website, hal ini bisa menjadi hal lebih penting daripada “kecepatan” itu sendiri.</p>\n<p>Untuk mengukur perceived performance dapat menggunakan best practice atau checklist, beberapa contoh tolak ukur perceived performance :</p>\n<ul><li>Response Time, berikut waktu reaksi user pada saat buka website</li></ul>\n<blockquote>\n<strong>0–100ms</strong> — Instant</blockquote>\n<blockquote>\n<strong>100–300ms</strong> — Small perceptible delay</blockquote>\n<blockquote>\n<strong>300–1000ms</strong> — Machine is working</blockquote>\n<blockquote>\n<strong>1000+ms</strong> — Likely mental context switch</blockquote>\n<blockquote>\n<strong>10,000+ms</strong> — Task is abandoned</blockquote>\n<ul><li>Asynchronous Loading, hal yang bisa membuat user merasa wajar pada saat menunggu content yang halamannya berat.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/756/0*IxpeLKt4dZzEBnSa.gif\"><figcaption>loading</figcaption></figure><p><a href=\"https://medium.com/ben-and-dion/let-people-do-asynchronous-loading-is-for-users-not-just-computers-40987de0e221\">Let people do; Asynchronous loading is for users not just computers</a></p>\n<p>Thanks buat nyempetin baca tulisan gabut gw ini, pada dasarnya penulis membuat tulisan ini sangat panjang dan bahkan sempat membuat checklist web performance, penulis membayangkan apakah akan cukup membantu jika penulis merelease checklist web performance dan long version dari tulisan ini🤔 ?</p>\n<p>Let me know menarik untuk dibuat atau ada masukan lain thanks 🐣~</p>\n<p>Referensi</p>\n<p><a href=\"http://blog.teamtreehouse.com/perceived-performance\">http://blog.teamtreehouse.com/perceived-performance</a><br><a href=\"https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf\">https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf</a><br><a href=\"https://www.keycdn.com/blog/blocking-the-dom/\">https://www.keycdn.com/blog/blocking-the-dom/</a><br><a href=\"https://www.keycdn.com/blog/web-performance-advice-2018/\">https://www.keycdn.com/blog/web-performance-advice-2018/</a><br><a href=\"https://www.keycdn.com/blog/web-performance-advice/\">https://www.keycdn.com/blog/web-performance-advice/</a><br><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css</a><br><a href=\"https://developers.google.com/speed/pagespeed/insights\">https://developers.google.com/speed/pagespeed/insights</a><br><a href=\"https://www.wpbeginner.com/wp-tutorials/how-to-fix-render-blocking-javascript-and-css-in-wordpress/\">https://www.wpbeginner.com/wp-tutorials/how-to-fix-render-blocking-javascript-and-css-in-wordpress/</a><br><a href=\"https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b\">https://medium.com/wwwid/service-worker-tanpa-application-shell-untuk-mempercepat-navigasi-antar-halaman-6b0d01fbe94b</a><br><a href=\"https://medium.com/wwwid/yang-web-developer-harus-tau-1-5259c953881f\">https://medium.com/wwwid/yang-web-developer-harus-tau-1-5259c953881f</a><br><a href=\"https://medium.com/wwwid/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">https://medium.com/wwwid/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d</a></p>\n<p><a href=\"https://www.keycdn.com/blog/perceived-performance/\">https://www.keycdn.com/blog/perceived-performance/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f5ef575c3d5\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/wwwid/5-nilai-dasar-pancasila-web-performance-1f5ef575c3d5\">5 Nilai Dasar Pancasila Web Performance</a> was originally published in <a href=\"https://medium.com/wwwid\">WWWID</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-performance",
                "performance"
            ]
        }
    ]
}